<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Gaffer On Games</title>
    <link>https://gafferongames.com/post/</link>
    <description>Recent content in Posts on Gaffer On Games</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Copyright Â© Glenn Fiedler, 2004 - 2024</copyright>
    <lastBuildDate>Mon, 24 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://gafferongames.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Network Neutrality Considered Harmful</title>
      <link>https://gafferongames.com/post/network_neutrality_considered_harmful/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/network_neutrality_considered_harmful/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://www.linkedin.com/in/glennfiedler/&#34;&gt;Glenn Fiedler&lt;/a&gt; and I&amp;rsquo;m the founder and CEO of &lt;a href=&#34;https://networknext.com&#34;&gt;Network Next&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before starting Network Next, I worked in the game industry for 20 years as a software engineer. I was fortunate enough to have a good career and got to work on some games you&amp;rsquo;ve might have played: &lt;strong&gt;Freedom Force&lt;/strong&gt;, &lt;strong&gt;Mercenaries 2&lt;/strong&gt;, &lt;strong&gt;God of War&lt;/strong&gt;, &lt;strong&gt;Journey&lt;/strong&gt; and &lt;strong&gt;Titanfall 1 and 2&lt;/strong&gt;. Some of my netcode is still active in &lt;strong&gt;Apex Legends&lt;/strong&gt; even though I left Respawn Entertainment before it started development.&lt;/p&gt;
&lt;p&gt;Ever since &lt;a href=&#34;https://quake.fandom.com/wiki/Qtest&#34;&gt;QTest&lt;/a&gt; I&amp;rsquo;ve found the idea that people in different physical locations could inhabit the same virtual space utterly fascinating. I wanted to understand how that worked and be part of it. So, after a few false starts in graphics programming and physics, I specialized in UDP protocol design for latency sensitive games.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m writing this article to tell you something that you might find shocking.&lt;/p&gt;
&lt;p&gt;Network Neutrality, the thing that we hold so dear, the foundation of the internet as we know it, may in fact be harmful for latency sensitive applications like games.&lt;/p&gt;
&lt;p&gt;Why? Please watch this video for an explanation (sound on):&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/jo1qffymv3E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Now of course, saying &lt;strong&gt;the internet doesn&amp;rsquo;t care about your game&lt;/strong&gt; is a pretty strong accusation, so I&amp;rsquo;m going to back it up with some evidence.&lt;/p&gt;
&lt;p&gt;First, anecdotal. Every multiplayer game I worked on, I spent years of my life working on the netcode, using every trick possible to hide packet loss and latency. Client side prediction to hide latency in player actions, lag compensation to avoid players needing to lead shots, bandwidth optimization to reduce the load on the network, redundancy to mitigate packet loss, custom UDP protocols to avoid head of line blocking&amp;hellip;&lt;/p&gt;
&lt;p&gt;And despite all this effort, a significant portion of players would play my game and get bad network performance and there was &lt;em&gt;literally nothing I could do about it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Just how bad does it get? Let&amp;rsquo;s take a look at the data&amp;hellip;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a screenshot from Thursday August 20th, 2020:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Screenshot of https://portal.networknext.com&#34; src=&#34;https://gafferongames.com/img/network-neutrality-considered-harmful/portal-001.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;1000+ players with 100ms or greater added latency courtesy of best effort delivery, one player with a whooping 730ms extra. &lt;em&gt;Clearly, this is not a speed of light problem&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Later the same day we saw a packet loss event:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Graph showing AB test result for packet loss&#34; src=&#34;https://gafferongames.com/img/network-neutrality-considered-harmful/portal-002.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you may look at this and think, oh, it&amp;rsquo;s just 0.8% packet loss at peak, it&amp;rsquo;s not that bad&amp;hellip; but this is an average across all players, and only some portion of players were affected. For these players, the effect was much more severe:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Graph showing absolute point reduction in packet loss percent for players on network next&#34; src=&#34;https://gafferongames.com/img/network-neutrality-considered-harmful/portal-003.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;During the mitigation the average packet loss reduction was an absolute reduction of 12 points of packet loss. No, not a reduction of 12%, &lt;strong&gt;a reduction of 12 points&lt;/strong&gt;. In other words, a conversion from totally unplayable to playable.&lt;/p&gt;
&lt;p&gt;This is not an isolated incident. These things literally happen all the time. Take a look for yourself, our portal is live and updated in real-time: &lt;a href=&#34;https://portal.networknext.com&#34;&gt;https://portal.networknext.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From this point on it should be clear: &lt;strong&gt;the internet really doesn&amp;rsquo;t care about your game.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So&amp;hellip; what&amp;rsquo;s going on?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s this. The internet makes no guarantee of performance, but instead offers best effort delivery. By the orthodoxy of Network Neutrality it is hand-wavingly assumed that overall, the quality level is maintained via over provisioning. But while this may be true for browsing the web and reading email, looking at the results above we can clearly see it isn&amp;rsquo;t working for latency sensitive applications like games!&lt;/p&gt;
&lt;p&gt;As a game developer what I want for my traffic is the lowest latency (within speed of light limits), with as little packet loss and jitter as possible. In other words, if I send 60 packets per-second, I want all of them to arrive as quickly as possible exactly 1/60th of a second apart. The internet as it exists today, is just not capable of this.&lt;/p&gt;
&lt;p&gt;So now let&amp;rsquo;s take direct aim at one of the core tenets of Network Neutrality. That all traffic is the same. Clearly this is false. Latency sensitive traffic like game traffic is not the same as checking your email or browsing the web. It&amp;rsquo;s not even the same as watching YouTube or Netflix, which can be solved by simply buffering the stream. It&amp;rsquo;s something completely different.&lt;/p&gt;
&lt;p&gt;Now that we acknowledge that different classes of traffic exist, how can we reconcile this with a neutral network and avoid classically described dystopias where network providers throttle the performance of competing applications, and ISPs bill you for &amp;ldquo;acceleration plans&amp;rdquo; for your internet connection on a monthly basis.&lt;/p&gt;
&lt;p&gt;This is why I created Network Next.&lt;/p&gt;
&lt;p&gt;Network Next is not just another network. We&amp;rsquo;re not building network infrastructure. We&amp;rsquo;re not lighting up dark fiber. We&amp;rsquo;re not creating yet another shadow internet with private interconnects. We don&amp;rsquo;t even have an ASN.&lt;/p&gt;
&lt;p&gt;Instead, we&amp;rsquo;re creating a &lt;strong&gt;neutral marketplace&lt;/strong&gt; where networks compete to carry latency sensitive traffic. In this marketplace, networks cannot identify the application or even set a different price for different applications. They can only compete on performance and price.&lt;/p&gt;
&lt;p&gt;The buyer on our marketplace is not the player, it&amp;rsquo;s the application developer who uses Network Next to communicate the quality of service they want to the network. Network Next then runs a bid on our marketplace every 10 seconds per-player and the result of this bid is the route players take across our supplier networks.&lt;/p&gt;
&lt;p&gt;This creates a truly neutral network of networks - a new internet - with different classes of transit. An ethical, and technologically enforced alternative to the Network Neutrality Orthodoxy that covers its ears and yells &amp;ldquo;All traffic is the same!&amp;rdquo; in 2020 even though clearly it is not.&lt;/p&gt;
&lt;p&gt;I hope you agree with me, but if even if you don&amp;rsquo;t, we&amp;rsquo;ve created this marketplace over the past three years and it&amp;rsquo;s now live. Chances are pretty good over the next 3 months when you play a game, you&amp;rsquo;re playing it over Network Next and I look forward to improving the quality of your connection.&lt;/p&gt;
&lt;p&gt;Best wishes,&lt;/p&gt;
&lt;p&gt;Glenn Fiedler, CEO, Network Next &lt;a href=&#34;https://networknext.com&#34;&gt;networknext.com&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Fixing the Internet for Games</title>
      <link>https://gafferongames.com/post/fixing_the_internet_for_games/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/fixing_the_internet_for_games/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and this is my GDC 2019 talk called âFixing the Internet for Gamesâ.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/001.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;It&amp;rsquo;s about what we are doing at my new startup &lt;a href=&#34;https://networknext.com&#34;&gt;Network Next&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/002.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;When you launch a multiplayer game, some percentage of your player base will complain they are getting a bad experience.&lt;/p&gt;
&lt;p&gt;You only need to check your forums to see this is true.&lt;/p&gt;
&lt;p&gt;And as a player youâve probably experienced it too.&lt;/p&gt;
&lt;p&gt;Whatâs going on?&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/003.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Is it your netcode, or maybe your matchmaker or hosting provider?&lt;/p&gt;
&lt;p&gt;Can you fix it by running more servers in additional locations, or by switching to another hosting company?&lt;/p&gt;
&lt;p&gt;Or maybe youâve done all this already and now you have too many data centers, causing fragmentation in your player base?&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/004.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;It turns out that you can do all these things perfectly yet some % of your player base will still complain.&lt;/p&gt;
&lt;p&gt;The real problem is that you donât control the route from your player to your game server, and sometimes this route is bad.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/005.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;This happens because the internet is not optimized for what we want (lowest latency, jitter and packet loss)&lt;/p&gt;
&lt;p&gt;No amount of good netcode that you write can compensate for this.&lt;/p&gt;
&lt;p&gt;The problem is the internet itself.&lt;/p&gt;
&lt;p&gt;The internet doesnât care about your game.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/006.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;The internet thinks game traffic is the same as checking emails, visiting a website or watching netflix.&lt;/p&gt;
&lt;p&gt;But game traffic is real-time and latency sensitive. Itâs not the same.&lt;/p&gt;
&lt;p&gt;Itâs interactive so it canât be cached at the edge and buffered like streamed video.&lt;/p&gt;
&lt;p&gt;Networks that participate in the internet do hot potato routing, they just try to get your packets off their network as fast as possible so they donât have to deal with it anymore. Nobody is coordinating centrally to ensure that packets are delivered with the lowest overall latency, jitter and packet loss.&lt;/p&gt;
&lt;p&gt;Sometimes ISPs or transit providers make mistakes and packets are sent on ridiculous routes that can go to the other side of the country and back on their way to a game server just 5 miles away from the playerâ¦ you can call up the ISP and ask them to fix this, but it can take days to resolve.&lt;/p&gt;
&lt;p&gt;Even from day to day, performance is not consistent. You can get a good route one day, and a terrible one the next.&lt;/p&gt;
&lt;p&gt;For all of these problems, players tend to blame you, the developer. But itâs not actually your fault.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/007.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;What can you, the game developer, do about this?&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/008.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;One common approach is to try running as many servers in as many locations as possible, with as many different providers as you can.&lt;/p&gt;
&lt;p&gt;This seems like a good idea at first, but there is no one data center or hosting company that is perfectly peered with every player of your game, so ultimately, it does not solve the problem.&lt;/p&gt;
&lt;p&gt;Flaws:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Player fragmentation&lt;/li&gt;
&lt;li&gt;Logistics of so many suppliers&lt;/li&gt;
&lt;li&gt;Really difficult to find one data center suitable for party or team that wants to play together&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/009.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Another option is to host in public clouds. Googleâs private network is pretty good, right?&lt;/p&gt;
&lt;p&gt;Game developers tend to assume that AWS, Azure and Google peering is perfect. But this is not true.&lt;/p&gt;
&lt;p&gt;Flaws:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Egress bandwidth is expensive&lt;/li&gt;
&lt;li&gt;Locked into one provider&lt;/li&gt;
&lt;li&gt;Transit is not as good as you think&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/010.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;You could also build your own internet for your game.&lt;/p&gt;
&lt;p&gt;This is not a joke. It actually happened!&lt;/p&gt;
&lt;p&gt;Riot built their own private internet for League of Legends. When you play league of legends, your game traffic goes directly from your ISP onto this private network.&lt;/p&gt;
&lt;p&gt;Case study: Riot Direct&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://technology.riotgames.com/news/fixing-internet-real-time-applications-part-i&#34;&gt;Fixing the internet for real-time applications (part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technology.riotgames.com/news/fixing-internet-real-time-applications-part-ii&#34;&gt;Fixing the internet for real-time applications (part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technology.riotgames.com/news/fixing-internet-real-time-applications-part-iii&#34;&gt;Fixing the internet for real-time applications (part 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flaws:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Can you really afford this?&lt;/li&gt;
&lt;li&gt;How many internets do we really need?! :)&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/011.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Right now, if you are a game developer shipping a multiplayer game, you are competing against companies that have built their own private internet for their game.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/012.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Whatâs the solution? Build your own too?&lt;/p&gt;
&lt;p&gt;Does it really make sense to build an internet for each game? This is crazy&amp;hellip;&lt;/p&gt;
&lt;p&gt;There has to be a way to do this without building your own infrastructure.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/013.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Network Next was created to solve this problem.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/014.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Network Next steers your gameâs traffic across private networks that have already been built, so you donât have to build your own private internet for your game.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/015.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;But hold on. Aren&amp;rsquo;t all the problems at the edge?&lt;/p&gt;
&lt;p&gt;People seem to think that all the bad stuff on the internet occurs at the edge of the network, eg. shitty DSL connections, oversubscribed cable networksâ¦&lt;/p&gt;
&lt;p&gt;But this is not true.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/016.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;The backbone itself is not as good as you think it is.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/017.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;And Iâm going to prove it.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/018.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Just two regular computers sitting in different data centers&amp;hellip; letâs send UDP ping and pong packets between them, so we can measure the quality of the network.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/019.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;We need some way to measure this quality as a scalar value.&lt;/p&gt;
&lt;p&gt;Define cost as the sum of round trip time (rtt) in milliseconds, jitter (3rd standard deviation), and packet loss %.&lt;/p&gt;
&lt;p&gt;Lower cost is good. Higher cost is bad.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/020.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Now letâs generalize to 4 nodes.&lt;/p&gt;
&lt;p&gt;We measure cost between all nodes via pings, O(n^2).&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/021.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Now letâs go up to 10 nodes.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/022.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Store the cost between all nodes in a triangular matrix.&lt;/p&gt;
&lt;p&gt;Each entry in the matrix is the cost between the node with index corresponding to the column, and node with index corresponding to the row.&lt;/p&gt;
&lt;p&gt;The diagonal is -1, because nodes donât ping themselves.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/023.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Now spin up instances in all the providers you can think of and all locations they support in North America.&lt;/p&gt;
&lt;p&gt;For example: Google, AWS, Azure, Bluemix, vultr.com, multiplay, i3d, gameservers.com, servers.com and so on.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/024.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;If the internet backbone was perfectly efficient, A-B would be the lowest cost 100% of the time.&lt;/p&gt;
&lt;p&gt;Instead, for the worst provider it is only 5-10% of the time.&lt;/p&gt;
&lt;p&gt;And the best performing provider only 30% of the time&amp;hellip;&lt;/p&gt;
&lt;p&gt;Of course, we are not outperforming each provider on their own internal network, those are efficient.&lt;/p&gt;
&lt;p&gt;Instead we reveal that each node on the internet is not perfectly peered with every other node. There is some slack, and going through an intermediary node in the majority cases can fix this.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/025.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Machines on the backbone are not talking to each other as efficiently as they can.&lt;/p&gt;
&lt;p&gt;Talking through an intermediary is often better, in terms of our cost function.&lt;/p&gt;
&lt;p&gt;Why? Many reasons&amp;hellip; but overall, the public internet is optimized for throughput at lowest cost, not lowest latency and jitter.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/026.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;What other option is there, aside from the public internet?&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/027.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Many private networks have been built.&lt;/p&gt;
&lt;p&gt;These include CDNs and any corporate entity that has realized the public internet is broken, and have built their own private networks (backhaul) and interconnections to compensate.&lt;/p&gt;
&lt;p&gt;(Not many people know this, but this âshadowâ private internet is actually growing at a faster rate than the public internet&amp;hellip;)&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/028.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;This private internet is currently closed. Your game packets do not traverse it.&lt;/p&gt;
&lt;p&gt;How can we open it up?&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/029.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;With a marketplace. Network Next is a marketplace where private networks resell excess capacity to applications that want better transit than the public internet.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/030.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Every 10 seconds, per-player we run a &amp;ldquo;route shader&amp;rdquo; as a bid on our marketplace, and find the best route across multiple suppliers that satisfies this request.&lt;/p&gt;
&lt;p&gt;Suppliers cannot identify buyers, and can only compete on performance and price.&lt;/p&gt;
&lt;p&gt;Thus, Network Next discovers the market price for premium transit, while remaining neutral.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/031.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Now letâs see how it works in practice, with real players.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/032.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Here is a small sample of connections active at a specific time one night last week&amp;hellip;&lt;/p&gt;
&lt;p&gt;Each dot is a player. Green dots are taking Network Next, blue dots are taking the public internet, because Network Next does not provide any improvement for them (yet).&lt;/p&gt;
&lt;p&gt;Around 60% of player sessions are improved, fluctuating between 50% and 60% depending on the time of day. We believe that as we ramp up more suppliers, we can get the percentage of players improved up to 90%.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/033.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Of the 60% that are currently improved, the improvement breaks down into the following buckets:&lt;/p&gt;
&lt;p&gt;49% of sessions had 0-5 cost unit improvement (cost being latency+jitter+packet loss).
25% had 5-10cu improvement.
12% had 10-15cu improvement.
6% had 15-20cu improvement.
7% had greater than 20cu improvement&amp;hellip;&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/034.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Here is a look at live sessions at a random time that night. Look at the rightmost column. Some players are getting an incredible improvement&amp;hellip; there are always some players getting improvements like this at all times of the day&amp;hellip;&lt;/p&gt;
&lt;p&gt;(My apologies for the black censoring, it is necessary for GDPR compliance).&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/035.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Drilling into the session getting the most improvement, we can see that they are not in the middle of nowhere, they are in Monterey, California&amp;hellip;&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/036.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Here we can see that the improvement is in both latency and jitter. Notice how flat the blue latency line is (Network Next), vs. the red line (public internet) that is going all over the place.&lt;/p&gt;
&lt;p&gt;Network Next not only has lower latency, it is also more consistent.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/037.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;Here is a look at different data centers where our customers run game servers.&lt;/p&gt;
&lt;p&gt;On the right is the % of players taking Network Next (getting improvement) to servers in that data center (green), and those not getting improvement and going direct over the public internet (blue).&lt;/p&gt;
&lt;p&gt;On the left is the distribution of cost unit improvements for players that are getting improvement on Network Next to servers in that data center. The improvement depends on the peering arrangements of that data center, and on internet weather. It fluctuates somewhat from day to day.&lt;/p&gt;
&lt;p&gt;We are able to fix this fluctuation due to internet weather and get the best result at all times.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/fixing-the-internet/040.png&#34; width=&#34;100%&#34; class=&#34;image_border&#34;/&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn more, please visit us at &lt;a href=&#34;https://networknext.com&#34;&gt;networknext.com&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Networked Physics in Virtual Reality</title>
      <link>https://gafferongames.com/post/networked_physics_in_virtual_reality/</link>
      <pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/networked_physics_in_virtual_reality/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;About a year ago, Oculus approached me and offered to sponsor my research. They asked me, effectively: &amp;ldquo;Hey Glenn, there&amp;rsquo;s a lot of interest in networked physics in VR. You did a cool talk at GDC. Do you think could come up with a networked physics sample in VR that we could share with devs? Maybe you could use the touch controllers?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I replied &lt;del&gt;&amp;ldquo;F*** yes!&amp;quot;&lt;/del&gt; &lt;strong&gt;cough&lt;/strong&gt; &amp;ldquo;Sure. This could be a lot of fun!&amp;rdquo;. But to keep it real, I insisted on two conditions. One: the source code I developed would be published under a permissive open source licence (for example, BSD) so it would create the most good. Two: when I was finished, I would be able to write an article describing the steps I took to develop the sample.&lt;/p&gt;
&lt;p&gt;Oculus agreed. Welcome to that article! Also, the source for the networked physics sample is &lt;a href=&#34;https://github.com/OculusVR/oculus-networked-physics-sample&#34;&gt;here&lt;/a&gt;, wherein the code that I wrote is released under a BSD licence. I hope the next generation of programmers can learn from my research into networked physics and create some really cool things. Good luck!&lt;/p&gt;
&lt;h1 id=&#34;what-are-we-building&#34;&gt;What are we building?&lt;/h1&gt;
&lt;p&gt;When I first started discussions with Oculus, we imagined creating something like a table where four players could sit around and interact with physically simulated cubes on the table. For example, throwing, catching and stacking cubes, maybe knocking each other&amp;rsquo;s stacks over with a swipe of their hand.&lt;/p&gt;
&lt;p&gt;But after a few days spent learning Unity and C#, I found myself actually &lt;em&gt;inside&lt;/em&gt; the Rift. In VR, scale is &lt;em&gt;so important&lt;/em&gt;. When the cubes were small, everything felt much less interesting, but when the cubes were scaled up to around a meter cubed, everything had this really cool sense of scale. You could make these &lt;em&gt;huge&lt;/em&gt; stacks of cubes, up to 20 or 30 meters high. This felt really cool!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s impossible to communicate visually what this feels like outside of VR, but it looks something like this&amp;hellip;&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/networked-physics-in-vr/stack-of-cubes.jpg&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;&amp;hellip; where you can select, grab and throw cubes using the touch controller, and any cubes you release from your hand interact with the other cubes in the simulation. You can throw a cube at a stack of cubes and knock them over. You can pick up a cube in each hand and juggle them. You can build a stack of cubes and see how high you can make it go.&lt;/p&gt;
&lt;p&gt;Even though this was a lot of fun, it&amp;rsquo;s not all rainbows and unicorns. Working with Oculus as a client, I had to define tasks and deliverables before I could actually start the work.&lt;/p&gt;
&lt;p&gt;I suggested the following criteria we would use to define success:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Players should be able to pick up, throw and catch cubes without latency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Players should be able to stack cubes, and these stacks should be stable (come to rest) and be without visible jitter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When cubes thrown by any player interact with the simulation, wherever possible, these interactions should be without latency.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At the same time I created a set of tasks to work in order of greatest risk to least, since this was R&amp;amp;D, there was no guarantee we would actually succeed at what we were trying to do.&lt;/p&gt;
&lt;h1 id=&#34;network-models&#34;&gt;Network Models&lt;/h1&gt;
&lt;p&gt;First up, we had to pick a network model. A network model is basically a strategy, exactly &lt;em&gt;how&lt;/em&gt; we are going to hide latency and keep the simulation in sync.&lt;/p&gt;
&lt;p&gt;There are three main network models to choose from:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deterministic lockstep&lt;/li&gt;
&lt;li&gt;Client/server with client-side prediction&lt;/li&gt;
&lt;li&gt;Distributed simulation with authority scheme&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I was instantly confident of the correct network model: a distributed simulation model where players take over authority of cubes they interact with. But let me share with you my reasoning behind this.&lt;/p&gt;
&lt;p&gt;First, I could trivially rule out a deterministic lockstep network model, since the physics engine inside Unity (PhysX) is not deterministic. Furthermore, even if PhysX was deterministic I could &lt;em&gt;still&lt;/em&gt; rule it out because of the requirement that player interactions with the simulation be without latency.&lt;/p&gt;
&lt;p&gt;The reason for this is that to hide latency with deterministic lockstep I needed to maintain two copies of the simulation and predict the authoritative simulation ahead with local inputs prior to render (GGPO style). At 90HZ simulation rate and with up to 250ms of latency to hide, this meant 25 physics simulation steps for each visual render frame. 25X cost is simply not realistic for a CPU intensive physics simulation.&lt;/p&gt;
&lt;p&gt;This leaves two options: a client/server network model with client-side prediction (perhaps with dedicated server) and a less secure distributed simulation network model.&lt;/p&gt;
&lt;p&gt;Since this was a non-competitive sample, there was little justification to incur the cost of running dedicated servers. Therefore, whether I implemented a client/server model with client-side prediction or distributed simulation model, the security would be effectively the same. The only difference would be if only one of the players in the game could theoretically cheat, or &lt;em&gt;all&lt;/em&gt; of them could.&lt;/p&gt;
&lt;p&gt;For this reason, a distributed simulation model made the most sense. It had effectively the same amount of security, and would not require any expensive rollback and resimulation, since players simply take authority over cubes they interact with and send the state for those cubes to other players.&lt;/p&gt;
&lt;h1 id=&#34;authority-scheme&#34;&gt;Authority Scheme&lt;/h1&gt;
&lt;p&gt;While it makes intuitive sense that taking authority (acting like the server) for objects you interact can hide latency &amp;ndash; since, well if you&amp;rsquo;re the server, you don&amp;rsquo;t experience any lag, right? &amp;ndash; what&amp;rsquo;s not immediately obvious is how to resolve conflicts.&lt;/p&gt;
&lt;p&gt;What if two players interact with the same stack? What if two players, masked by latency, grab the same cube? In the case of conflict: who wins, who gets corrected, and how is this decided?&lt;/p&gt;
&lt;p&gt;My intuition at this point was that because I would be exchanging state for objects rapidly (up to 60 times per-second), that it would be best to implement this as an encoding in the state exchanged between players over my network protocol, rather than as events.&lt;/p&gt;
&lt;p&gt;I thought about this for a while and came up with two key concepts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Authority&lt;/li&gt;
&lt;li&gt;Ownership&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each cube would have authority, either set to default (white), or to whatever color of the player that last interacted with it. If another player interacted with an object, authority would switch and update to that player. I planned to use authority for interactions of thrown objects with the scene. I imagined that a cube thrown by player 2 could take authority over any objects it interacted with, and in turn any objects those objects interacted with, recursively.&lt;/p&gt;
&lt;p&gt;Ownership was a bit different. Once a cube is owned by a player, no other player could take ownership until that player reliquished ownership. I planned to use ownership for players grabbing cubes, because I didn&amp;rsquo;t want to make it possible for players to grab cubes out of other player&amp;rsquo;s hands after they picked them up.&lt;/p&gt;
&lt;p&gt;I had an intuition that I could represent and communicate authority and ownership as state by including two different sequence numbers per-cube as I sent them: an authority sequence, and an ownership sequence number. This intuition ultimately proved correct, but turned out to be much more complicated in implementation than I expected. More on this later.&lt;/p&gt;
&lt;h1 id=&#34;state-synchronization&#34;&gt;State Synchronization&lt;/h1&gt;
&lt;p&gt;Trusting I could implement the authority rules described above, my first task was to prove that synchronizing physics in one direction of flow could actually work with Unity and PhysX. In previous work I had networked simulations built with ODE, so really, I had no idea if it was really possible.&lt;/p&gt;
&lt;p&gt;To find out, I setup a loopback scene in Unity where cubes fall into a pile in front of the player. There are two sets of cubes. The cubes on the left represent the authority side. The cubes on the right represent the non-authority side, which we want to be in sync with the cubes on the left.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/networked-physics-in-vr/authority-and-non-authority-cubes.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;At the start, without anything in place to keep the cubes in sync, even though both sets of cubes start from the same initial state, they give slightly different end results. You can see this most easily from top-down:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/networked-physics-in-vr/out-of-sync.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;This happens because PhysX is non-deterministic. Rather than tilting at non-determinstic windmills, I &lt;em&gt;fight&lt;/em&gt; non-determinism by grabbing state from the left side (authority) and applying it to the right side (non-authority) 10 times per-second:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/networked-physics-in-vr/left-to-right.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The state I grab from each cube looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct CubeState
{
    Vector3 position;
    Quaternion rotation;
    Vector3 linear_velocity;
    Vector3 angular_velocity;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And when I apply this state to the simulation on the right side, I simply &lt;em&gt;snap&lt;/em&gt; the position, rotation, linear and angular velocity of each cube to the state captured from the left side.&lt;/p&gt;
&lt;p&gt;This simple change is enough to keep the left and right simulations in sync. PhysX doesn&amp;rsquo;t even diverge enough in the 1/10th of a second between updates to show any noticeable pops.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/networked-physics-in-vr/in-sync.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;This &lt;strong&gt;proves&lt;/strong&gt; that a state synchronization based approach for networking can work with PhysX. &lt;em&gt;(Sigh of relief)&lt;/em&gt;. The only problem of course, is that sending uncompressed physics state uses way too much bandwidth&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;bandwidth-optimization&#34;&gt;Bandwidth Optimization&lt;/h1&gt;
&lt;p&gt;To make sure the networked physics sample is playable over the internet, I needed to get bandwidth under control.&lt;/p&gt;
&lt;p&gt;The easiest gain I found was to simply encode the state for at rest cubes more efficiently. For example, instead of repeatedly sending (0,0,0) for linear velocity and (0,0,0) for angular velocity for at rest cubes, I send just one bit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[position] (vector3)
[rotation] (quaternion)
[at rest] (bool)
&amp;lt;if not at rest&amp;gt;
{
    [linear_velocity] (vector3)
    [angular_velocity] (vector3)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is &lt;em&gt;lossless&lt;/em&gt; technique because it doesn&amp;rsquo;t change the state sent over the network in any way. It&amp;rsquo;s also extremely effective, since statistically speaking, most of the time the majority of cubes are at rest.&lt;/p&gt;
&lt;p&gt;To optimize bandwidth further we need to use &lt;em&gt;lossy techniques&lt;/em&gt;. For example, we can reduce the precision of the physics state sent over the network by bounding position in some min/max range and quantizing it to a resolution of 1/1000th of a centimeter and sending that quantized position as an integer value in some known range. The same basic approach can be used for linear and angular velocity. For rotation I used the &lt;em&gt;smallest three representation&lt;/em&gt; of a quaternion.&lt;/p&gt;
&lt;p&gt;But while this saves bandwidth, it also adds risk. My concern was that if we are networking a stack of cubes (for example, 10 or 20 cubes placed on top of each other), maybe the quantization would create errors that add jitter to that stack. Perhaps it would even cause the stack to become &lt;em&gt;unstable&lt;/em&gt;, but in a particularly annoying and hard to debug way, where the stack looks fine for you, and is only unstable in the remote view (eg. the non-authority simulation), where another player is watching what you do.&lt;/p&gt;
&lt;p&gt;The best solution to this problem that I found was to quantize the state on &lt;em&gt;both sides&lt;/em&gt;. This means that before each physics simulation step, I capture and quantize the physics state &lt;em&gt;exactly the same way&lt;/em&gt; as when it&amp;rsquo;s sent over the network, then I apply this quantized state back to the local simulation.&lt;/p&gt;
&lt;p&gt;Now the extrapolation from quantized state on the non-authority side &lt;em&gt;exactly&lt;/em&gt; matches the authority simulation, minimizing jitter in large stacks. At least, in theory.&lt;/p&gt;
&lt;h1 id=&#34;coming-to-america-rest&#34;&gt;Coming To &lt;del&gt;America&lt;/del&gt; Rest&lt;/h1&gt;
&lt;p&gt;But quantizing the physics state created some &lt;em&gt;very interesting&lt;/em&gt; side-effects!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PhysX doesn&amp;rsquo;t really like you forcing the state of each rigid body at the start of every frame and makes sure you know by taking up a bunch of CPU.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quantization adds error to position which PhysX tries very hard to correct, snapping cubes immediately out of penetration with huge pops!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rotations can&amp;rsquo;t be represented exactly either, again causing penetration. Interestingly in this case, cubes can get stuck in a feedback loop where they slide across the floor!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although cubes in large stacks &lt;em&gt;seem&lt;/em&gt; to be at rest, close inspection in the editor reveals that they are actually jittering by tiny amounts, as cubes are quantized just above surface and falling towards it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;rsquo;s not much I could do about the PhysX CPU usage, but the solution I found for the depenetration was to set &lt;em&gt;maxDepenetrationVelocity&lt;/em&gt; on each rigid body, limiting the velocity that cubes are pushed apart with. I found that one meter per-second works very well.&lt;/p&gt;
&lt;p&gt;Getting cubes to come to rest reliably was much harder. The solution I found was to disable the PhysX at rest calculation entirely and replace it with a ring-buffer of positions and rotations per-cube. If a cube has not moved or rotated significantly in the last 16 frames, I force it to rest. Boom. Perfectly stable stacks &lt;em&gt;with&lt;/em&gt; quantization.&lt;/p&gt;
&lt;p&gt;Now this might seem like a hack, but short of actually getting in the PhysX source code and rewriting the PhysX solver and at rest calculations, which I&amp;rsquo;m certainly not qualified to do, I didn&amp;rsquo;t see any other option. I&amp;rsquo;m happy to be proven wrong though, so if you find a better way to do this, please let me know :)&lt;/p&gt;
&lt;h1 id=&#34;priority-accumulator&#34;&gt;Priority Accumulator&lt;/h1&gt;
&lt;p&gt;The next big bandwidth optimization I did was to send only a subset of cubes in each packet. This gave me fine control over the amount of bandwidth sent, by setting a maximum packet size and sending only the set of updates that fit in each packet.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how it works in practice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each cube has a &lt;em&gt;priority factor&lt;/em&gt; which is calculated each frame. Higher values are more likely to be sent. Negative values mean &lt;em&gt;&amp;ldquo;don&amp;rsquo;t send this cube&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the priority factor is positive, it&amp;rsquo;s added to the &lt;em&gt;priority accumulator&lt;/em&gt; value for that cube. This value persists between simulation updates such that the priority accumulator increases each frame, so cubes with higher priority rise faster than cubes with low priority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Negative priority factors clear the priority accumulator to -1.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a packet is sent, cubes are sorted in order of highest priority accumulator to lowest. The first n cubes become the set of cubes to potentially include in the packet. Objects with negative priority accumulator values are excluded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The packet is written and cubes are serialized to the packet in order of importance. Not all state updates will necessarily fit in the packet, since cube updates have a variable encoding depending on their current state (at rest vs. not at rest and so on). Therefore, packet serialization returns a flag per-cube indicating whether it was included in the packet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority accumulator values for cubes sent in the packet are cleared to 0.0, giving other cubes a fair chance to be included in the next packet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this demo I found some value in boosting priority for cubes recently involved in high energy collisions, since high energy collision was the largest source of divergence due to non-deterministic results. I also boosted priority for cubes recently thrown by players.&lt;/p&gt;
&lt;p&gt;Somewhat counter-intuitively, reducing priority for at rest cubes gave bad results. My theory is that since the simulation runs on both sides, at rest cubes would get slightly out of sync and not be corrected quickly enough, causing divergence when other cubes collided with them.&lt;/p&gt;
&lt;h1 id=&#34;delta-compression&#34;&gt;Delta Compression&lt;/h1&gt;
&lt;p&gt;Even with all the techniques so far, it still wasn&amp;rsquo;t optimized enough. With four players I really wanted to get the cost per-player down under 256kbps, so the entire simulation could fit into 1mbps for the host.&lt;/p&gt;
&lt;p&gt;I had one last trick remaining: &lt;strong&gt;delta compression&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;First person shooters often implement delta compression by compressing the entire state of the world relative to a previous state. In this technique, a previous complete world state or &amp;lsquo;snapshot&amp;rsquo; acts as the &lt;em&gt;baseline&lt;/em&gt;, and a set of differences, or &lt;em&gt;delta&lt;/em&gt;, between the &lt;em&gt;baseline&lt;/em&gt; and the &lt;em&gt;current&lt;/em&gt; snapshot is generated and sent down to the client.&lt;/p&gt;
&lt;p&gt;This technique is (relatively) easy to implement because the state for all objects are included in each snapshot, thus all the server needs to do is track the most recent snapshot received by each client, and generate deltas from that snapshot to the current.&lt;/p&gt;
&lt;p&gt;However, when a priority accumulator is used, packets don&amp;rsquo;t contain updates for all objects and delta encoding becomes more complicated. Now the server (or authority-side) can&amp;rsquo;t simply encode cubes relative to a previous snapshot number. Instead, the baseline must be specified &lt;em&gt;per-cube&lt;/em&gt;, so the receiver knows which state each cube is encoded relative to.&lt;/p&gt;
&lt;p&gt;The supporting systems and data structures are also much more complicated:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A reliability system is required that can report back to the sender which packets were received, not just the most recently received snapshot #.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sender needs to track the states included in each packet sent, so it can map packet level acks to sent states and update the most recently acked state per-cube. The next time a cube is sent, its delta is encoded relative to this state as a baseline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The receiver needs to store a ring-buffer of received states per-cube, so it can reconstruct the current cube state from a delta by looking up the baseline in this ring-buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But ultimately, it&amp;rsquo;s worth the extra complexity, because this system combines the flexibility of being able to dynamically adjust bandwidth usage, with the orders of magnitude bandwidth improvement you get from delta encoding.&lt;/p&gt;
&lt;h1 id=&#34;delta-encoding&#34;&gt;Delta Encoding&lt;/h1&gt;
&lt;p&gt;Now that I have the supporting structures in place, I actually have to encode the difference of a cube relative to a previous baseline state. How is this done?&lt;/p&gt;
&lt;p&gt;The simplest way is to encode cubes that haven&amp;rsquo;t changed from the baseline value as just one bit: &lt;em&gt;not changed&lt;/em&gt;. This is also the easiest gain you&amp;rsquo;ll ever see, because at any time most cubes are at rest, and therefore aren&amp;rsquo;t changing state.&lt;/p&gt;
&lt;p&gt;A more advanced strategy is to encode the &lt;em&gt;difference&lt;/em&gt; between the current and baseline values, aiming to encode small differences with fewer bits. For example, delta position could be (-1,+2,+5) from baseline. I found this works well for linear values, but breaks down for deltas of the smallest three quaternion representation, as the largest component of a quaternion is often different between the baseline and current rotation.&lt;/p&gt;
&lt;p&gt;Furthermore, while encoding the difference gives some gains, it didn&amp;rsquo;t provide the order of magnitude improvement I was hoping for. In a desperate, last hope, I came up with a delta encoding strategy that included &lt;em&gt;prediction&lt;/em&gt;. In this approach, I predict the current state from the baseline assuming the cube is moving ballistically under acceleration due to gravity.&lt;/p&gt;
&lt;p&gt;Prediction was complicated by the fact that the predictor must be written in fixed point, because floating point calculations are not necessarily guaranteed to be deterministic. But after a few days of tweaking and experimentation, I was able to write a ballistic predictor for position, linear and angular velocity that matched the PhysX integrator within quantize resolution about 90% of the time.&lt;/p&gt;
&lt;p&gt;These lucky cubes get encoded with another bit: &lt;em&gt;perfect prediction&lt;/em&gt;, leading to another order of magnitude improvement. For cases where the prediction doesn&amp;rsquo;t match exactly, I encoded small error offset relative to the prediction.&lt;/p&gt;
&lt;p&gt;In the time I had to spend, I not able to get a good predictor for rotation. I blame this on the smallest three representation, which is highly numerically unstable, especially in fixed point. In the future, I would not use the smallest three representation for quantized rotations.&lt;/p&gt;
&lt;p&gt;It was also painfully obvious while encoding differences and error offsets that using a bitpacker was not the best way to read and write these quantities. I&amp;rsquo;m certain that something like a range coder or arithmetic compressor that can represent fractional bits, and dynamically adjust its model to the differences would give much better results, but I was already within my bandwidth budget at this point and couldn&amp;rsquo;t justify any further noodling :)&lt;/p&gt;
&lt;h1 id=&#34;synchronizing-avatars&#34;&gt;Synchronizing Avatars&lt;/h1&gt;
&lt;p&gt;After several months of work, I had made the following progress:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proof that state synchronization works with Unity and PhysX&lt;/li&gt;
&lt;li&gt;Stable stacks in the remote view while quantizing state on both sides&lt;/li&gt;
&lt;li&gt;Bandwidth reduced to the point where all four players can fit in 1mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next thing I needed to implement was interaction with the simulation via the touch controllers. This part was a lot of fun, and was my favorite part of the project :)&lt;/p&gt;
&lt;p&gt;I hope you enjoy these interactions. There was a lot of experimentation and tuning to make simple things like picking up, throwing, passing from hand to hand feel good, even crazy adjustments to ensure throwing worked great, while placing objects on top of high stacks could still be done with high accuracy.&lt;/p&gt;
&lt;p&gt;But when it comes to networking, in this case the game code doesn&amp;rsquo;t count. All the networking cares about is that avatars are represented by a head and two hands driven by the tracked headset and touch controller positions and orientations.&lt;/p&gt;
&lt;p&gt;To synchronize this I captured the position and orientation of the avatar components in &lt;em&gt;FixedUpdate&lt;/em&gt; along the rest of the physics state, and applied this state to the avatar components in the remote view.&lt;/p&gt;
&lt;p&gt;But when I first tried this it looked &lt;em&gt;absolutely awful&lt;/em&gt;. Why?&lt;/p&gt;
&lt;p&gt;After a bunch of debugging I worked out that the avatar state was sampled from the touch hardware at render framerate in &lt;em&gt;Update&lt;/em&gt;, and was applied on the other machine at &lt;em&gt;FixedUpdate&lt;/em&gt;, causing jitter because the avatar sample time didn&amp;rsquo;t line up with the current time in the remote view.&lt;/p&gt;
&lt;p&gt;To fix this I stored the difference between physics and render time when sampling avatar state, and included this in the avatar state in each packet. Then I added a jitter buffer with 100ms delay to received packets, solving network jitter from time variance in packet delivery and enabling interpolation between avatar states to reconstruct a sample at the correct time.&lt;/p&gt;
&lt;p&gt;To synchronize cubes held by avatars, while a cube is parented to an avatar&amp;rsquo;s hand, I set the cube&amp;rsquo;s &lt;em&gt;priority factor&lt;/em&gt; to -1, stopping it from being sent with regular physics state updates. While a cube is attached to a hand, I include its id and relative position and rotation as part of the avatar state. In the remote view, cubes are attached to the avatar hand when the first avatar state arrives with that cube parented to it, and detached when regular physics state updates resume, corresponding to the cube being thrown or released.&lt;/p&gt;
&lt;h1 id=&#34;bidirectional-flow&#34;&gt;Bidirectional Flow&lt;/h1&gt;
&lt;p&gt;Now that I had player interaction with the scene working with the touch controllers, it was time to start thinking about how the second player can interact with the scene as well.&lt;/p&gt;
&lt;p&gt;To do this without going insane switching between two headsets all the time (!!!), I extended my Unity test scene to be able to switch between the context of player one (left) and player two (right).&lt;/p&gt;
&lt;p&gt;I called the first player the &amp;ldquo;host&amp;rdquo; and the second player the &amp;ldquo;guest&amp;rdquo;. In this model, the host is the &amp;ldquo;real&amp;rdquo; simulation, and by default synchronizes all cubes to the guest player, but as the guest interacts with the world, it takes authority over these objects and sends state for them back to the host player.&lt;/p&gt;
&lt;p&gt;To make this work without inducing obvious conflicts the host and guest both check the local state of cubes before taking authority and ownership. For example, the host won&amp;rsquo;t take ownership over a cube already under ownership of the guest, and vice versa, while authority is allowed to be taken, to let players throw cubes at somebody else&amp;rsquo;s stack and knock it over while it&amp;rsquo;s being built.&lt;/p&gt;
&lt;p&gt;Generalizing further to four players, in the networked physics sample, all packets flow through the host player, making the host the &lt;em&gt;arbiter&lt;/em&gt;. In effect, rather than being truly peer-to-peer, a topology is chosen that all guests in the game communicate only with the host player. This lets the host decide which updates to accept, and which updates to ignore and subsequently correct.&lt;/p&gt;
&lt;p&gt;To apply these corrections I needed some way for the host to override guests and say, no, you don&amp;rsquo;t have authority/ownership over this cube, and you should accept this update. I also needed some way for the host to determine &lt;em&gt;ordering&lt;/em&gt; for guest interactions with the world, so if one client experiences a burst of lag and delivers a bunch of packets late, these packets won&amp;rsquo;t take precedence over more recent actions from other guests.&lt;/p&gt;
&lt;p&gt;As per my hunch earlier, this was achieved with two sequence numbers per-cube:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Authority sequence&lt;/li&gt;
&lt;li&gt;Ownership sequence&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These sequence numbers are sent along with each state update and included in avatar state when cubes are held by players. They are used by the host to determine if it should accept an update from guests, and by guests to determine if the state update from the server is more recent and should be accepted, even when that guest thinks it has authority or ownership over a cube.&lt;/p&gt;
&lt;p&gt;Authority sequence increments each time a player takes authority over a cube and when a cube under authority of a player comes to rest. When a cube has authority on a guest machine, it holds authority on that machine until it receives &lt;em&gt;confirmation&lt;/em&gt; from the host before returning to default authority. This ensures that the final at rest state for cubes under guest authority are committed back to the host, even under significant packet loss.&lt;/p&gt;
&lt;p&gt;Ownership sequence increments each time a player grabs a cube. Ownership is stronger than authority, such that an increase in ownership sequence wins over an increase in authority sequence number. For example, if a player interacts with a cube just before another player grabs it, the player who grabbed it wins.&lt;/p&gt;
&lt;p&gt;In my experience working on this demo I found these rules to be sufficient to resolve conflicts, while letting host and guest players interact with the world lag free. Conflicts requiring corrections are rare in practice even under significant latency, and when they do occur, the simulation quickly converges to a consistent state.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;High quality networked physics with stable stacks of cubes &lt;em&gt;is&lt;/em&gt; possible with Unity and PhysX using a distributed simulation network model.&lt;/p&gt;
&lt;p&gt;This approach is best used for &lt;em&gt;cooperative experiences only&lt;/em&gt;, as it does not provide the security of a server-authoritative network model with dedicated servers and client-side prediction.&lt;/p&gt;
&lt;p&gt;Thanks to Oculus for sponsoring my work and making this research possible!&lt;/p&gt;
&lt;p&gt;The source code for the networked physics sample can be downloaded &lt;a href=&#34;https://github.com/OculusVR/oculus-networked-physics-sample&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Why can&#39;t I send UDP packets from a browser?</title>
      <link>https://gafferongames.com/post/why_cant_i_send_udp_packets_from_a_browser/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/why_cant_i_send_udp_packets_from_a_browser/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h1 id=&#34;premise&#34;&gt;Premise&lt;/h1&gt;
&lt;p&gt;In 2017 the most popular web games like &lt;a href=&#34;http://agar.io&#34;&gt;agar.io&lt;/a&gt; are networked via WebSockets over TCP. If a UDP equivalent of WebSockets could be incorporated into browsers, it would greatly improve the networking of these games.&lt;/p&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;Web browsers are built on top of HTTP, which is a stateless request/response protocol initially designed for serving static web pages. HTTP is built on top of TCP, a low-level protocol which guarantees data sent over the internet arrives reliably, and in the same order it was sent.&lt;/p&gt;
&lt;p&gt;This has worked well for many years, but recently websites have become more interactive and poorly suited to the HTTP request/response paradigm. Rising to this challenge are modern web protocols like WebSockets, WebRTC, HTTP 2.0 and QUIC, which hold the potential to greatly improve the interactivity of the web.&lt;/p&gt;
&lt;p&gt;Unfortunately, this new set of standards for web development don&amp;rsquo;t provide what multiplayer games need, or, provide it in a form that is too complicated for game developers to use.&lt;/p&gt;
&lt;p&gt;This leads to frustration from game developers, who just want to be able to send and receive UDP packets in the browser.&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;
&lt;p&gt;The web is built on top of TCP, which is a reliable-ordered protocol.&lt;/p&gt;
&lt;p&gt;To deliver data reliably and in order under packet loss, it is necessary for TCP to hold more recent data in a queue while waiting for dropped packets to be resent. Otherwise, data would be delivered out of order.&lt;/p&gt;
&lt;p&gt;This is called &lt;strong&gt;head of line blocking&lt;/strong&gt; and it creates a frustrating and almost comedically tragic problem for game developers. The most recent data they want is delayed while waiting for old data to be resent, but by the time the resent data arrives, it&amp;rsquo;s too old to be used.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is no way to fix this behavior under TCP. All data must be received reliably and in order. Therefore, the standard solution in the game industry for the past 20 years has been to send game data over UDP instead.&lt;/p&gt;
&lt;p&gt;How this works in practice is that each game develops their own custom protocol on top of UDP, implementing basic reliability as required, while sending the majority of data as unreliable-unordered. This ensures that time series data arrives as quickly as possible without waiting for dropped packets to be resent.&lt;/p&gt;
&lt;p&gt;So, what does this have to do with web games?&lt;/p&gt;
&lt;p&gt;The main problem for web games today is that game developers have no way to follow this industry best practice in the browser. Instead, web games send their game data over TCP, causing hitches and non-responsiveness due to head of line blocking.&lt;/p&gt;
&lt;p&gt;This is completely unnecessary and could be fixed overnight if web games had some way to send and receive UDP packets.&lt;/p&gt;
&lt;h1 id=&#34;what-about-websockets&#34;&gt;What about WebSockets?&lt;/h1&gt;
&lt;p&gt;WebSockets are an extension to the HTTP protocol which upgrade a HTTP connection so that data can be exchanged bidirectionally, rather than in the traditional request/response pattern.&lt;/p&gt;
&lt;p&gt;This elegantly solves the problem of websites that need to display dynamically changing content, because once a web socket connection is established, the server can push data to the browser without a corresponding request.&lt;/p&gt;
&lt;p&gt;Unfortunately, since WebSockets are implemented on top of TCP, data is still subject to head of line blocking.&lt;/p&gt;
&lt;h1 id=&#34;what-about-quic&#34;&gt;What about QUIC?&lt;/h1&gt;
&lt;p&gt;QUIC is an experimental protocol built on top of UDP that is designed as replacement transport layer for HTTP. It&amp;rsquo;s currently supported in Google Chrome only.&lt;/p&gt;
&lt;p&gt;A key feature of QUIC is support for multiple data streams. New data streams can be created implicitly by the client or server by increasing the channel id.&lt;/p&gt;
&lt;p&gt;The channel concept provide two key benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Avoids a connection handshake each time a new request is made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eliminates head of line blocking between unrelated streams of data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, while head of line blocking is eliminated across unrelated data streams, it still exists &lt;em&gt;within&lt;/em&gt; each stream.&lt;/p&gt;
&lt;h1 id=&#34;what-about-webrtc&#34;&gt;What about WebRTC?&lt;/h1&gt;
&lt;p&gt;WebRTC is a collection of protocols that enable peer-to-peer communication between browsers for applications like audio and video streaming.&lt;/p&gt;
&lt;p&gt;Almost as a footnote, WebRTC supports a data channel which can be configured in unreliable mode, providing a way to send and receive unreliable-unordered data from the browser.&lt;/p&gt;
&lt;p&gt;So why are browser games still using WebSockets in 2017?&lt;/p&gt;
&lt;p&gt;The reason is that there is a trend away from peer-to-peer towards client/server for multiplayer games and while WebRTC makes it easy to send unreliable-unordered data from one browser to another, it falls down when data needs to be sent between a browser and a dedicated server.&lt;/p&gt;
&lt;p&gt;It falls down because WebRTC is &lt;em&gt;extremely complex&lt;/em&gt;. This complexity is understandable, being designed primarily to support peer-to-peer communication between browsers, WebRTC needs STUN, ICE and TURN support for NAT traversal and packet forwarding in the worst case.&lt;/p&gt;
&lt;p&gt;But from a game developer point of view, all this complexity seems like dead weight, when STUN, ICE and TURN are completely completely unnecessary to communicate with dedicated servers, which have public IPs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&amp;ldquo;I feel what is needed is a UDP version of WebSockets. That&amp;rsquo;s all I wish we had.&amp;quot;&lt;/b&gt;
Matheus Valadares, creator of agar.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, game developers appreciate simplicity and desire a &amp;ldquo;WebSockets for UDP&amp;rdquo;-like approach over the complexity of WebRTC.&lt;/p&gt;
&lt;h1 id=&#34;why-not-just-let-people-send-udp&#34;&gt;Why not just let people send UDP?&lt;/h1&gt;
&lt;p&gt;The final option to consider is to just let users send and receive UDP packets directly from the browser. Of course, this is an &lt;em&gt;absolutely terrible idea&lt;/em&gt; and there are good reasons why it should never be allowed.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Websites would be able to launch DDoS attacks by coordinating UDP packet floods from browsers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New security holes would be created as JavaScript running in web pages could craft malicious UDP packets to probe the internals of corporate networks and report back over HTTPS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP packets are not encrypted, so any data sent over these packets could be sniffed and read by an attacker, or even modified in transmit. It would be a massive step back for web security to create a new way for browsers to send unencrypted packets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no authentication, so a dedicated server reading packets sent from a browser would have to implement its own method to ensure that only valid clients are allowed to connect to it, which is well outside the amount of effort most game developers would be willing to apply to this problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So clearly, just letting JavaScript create UDP sockets in the browser is a no go.&lt;/p&gt;
&lt;h1 id=&#34;what-could-a-solution-look-like&#34;&gt;What could a solution look like?&lt;/h1&gt;
&lt;p&gt;But what if we approach it from the other side. What if, instead of trying to bridge from the web world to games, we started with what games need and worked back to something that could work well on the web?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m &lt;a href=&#34;https://www.linkedin.com/in/glennfiedler&#34;&gt;Glenn Fiedler&lt;/a&gt; and I&amp;rsquo;ve been a game developer for the last 15 years. For most of this time I&amp;rsquo;ve specialized as a network programmer. I&amp;rsquo;ve got a lot of experience working on fast-paced action games. The last game I worked on was &lt;a href=&#34;https://www.titanfall.com/&#34;&gt;Titanfall 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About a month ago, I read this thread on Hacker News:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=13264952&#34;&gt;WebRTC: the future of web games&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Where the creator of &lt;a href=&#34;http://agar.io&#34;&gt;agar.io&lt;/a&gt;, Matheus Valadares, explained that WebRTC was too complex for him to use, and that he&amp;rsquo;s still using WebSockets for his games.&lt;/p&gt;
&lt;p&gt;I got to thinking, surely a solution must exist that&amp;rsquo;s simpler than WebRTC?&lt;/p&gt;
&lt;p&gt;I wondered what exactly this solution would look like?&lt;/p&gt;
&lt;p&gt;My conclusion was that any solution must have these properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Connection based&lt;/strong&gt; so it could not be used in DDoS attacks or to probe security holes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encrypted&lt;/strong&gt; because no game or web application would want to send unencrypted packets in 2017.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authenticated&lt;/strong&gt; because dedicated servers only want to accept connections from clients who are authenticated on the web backend.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would now like to present the solution. I&amp;rsquo;m not holding my breath that this would be accepted as a standard in browsers as-is, I&amp;rsquo;m a game guy, not a web guy. But I do hope at least that it will help browser creators and web developers see what client/server games actually need, and in some small way, do its part to help bridge the gap.&lt;/p&gt;
&lt;p&gt;Hopefully the result will be multiplayer games playing better in a browser in the near future.&lt;/p&gt;
&lt;h1 id=&#34;netcodeio&#34;&gt;netcode.io&lt;/h1&gt;
&lt;p&gt;The solution I came up with is &lt;a href=&#34;http://netcode.io&#34;&gt;netcode.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;netcode.io is a simple network protocol that lets clients securely connect to dedicated servers and communicate over UDP. It&amp;rsquo;s connection oriented and encrypts and signs packets, and provides authentication support so only authenticated clients can connect to dedicated servers.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s designed for games like &lt;a href=&#34;http://agar.io&#34;&gt;agar.io&lt;/a&gt; that need to shunt players off from the main website to a number of dedicated server instances, each with some maximum number of players (up to 256 players per-instance in the reference implementation).&lt;/p&gt;
&lt;p&gt;The basic idea is that the web backend performs authentication and when a client wants to play, it makes a REST call to obtain a &lt;em&gt;connect token&lt;/em&gt; which is passed to the dedicated server as part of the connection handshake over UDP.&lt;/p&gt;
&lt;p&gt;Connect tokens are short lived and rely on a shared private key between the web backend and the dedicated server instances. The benefit of this approach is that only authenticated clients are able to connect to the dedicated servers.&lt;/p&gt;
&lt;p&gt;Where netcode.io wins out over WebRTC is simplicity. By focusing only on the dedicated server case, it removes the need for ICE, STUN and TURN. By implementing encryption, signing and authentication with &lt;a href=&#34;http://libsodium.org&#34;&gt;libsodium&lt;/a&gt; it avoids the complexity of a full implementation of DTLS, while still providing the same level of security.&lt;/p&gt;
&lt;p&gt;Over the past month I&amp;rsquo;ve created a &lt;a href=&#34;http://netcode.io&#34;&gt;reference implementation&lt;/a&gt; of netcode.io in C. It&amp;rsquo;s licenced under the BSD 3-Clause open source licence. Over the next few months, I hope to continue refining this implementation, spend time writing a spec, and work with people to port netcode.io to different languages.&lt;/p&gt;
&lt;p&gt;Your feedback on the reference implementation is appreciated.&lt;/p&gt;
&lt;h1 id=&#34;how-it-works&#34;&gt;How it works&lt;/h1&gt;
&lt;p&gt;A client authenticates with the web backend using standard authentication techniques (eg. OAuth). Once a client is authenticated they request to play a game by making a REST call. The REST call returns a &lt;em&gt;connect token&lt;/em&gt; to that client encoded as base64 over HTTPS.&lt;/p&gt;
&lt;p&gt;A connect token has two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A private portion, encrypted and signed by the shared private key using an AEAD primitive from libsodium. This cannot be read, modified or forged by the client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A public portion, which provides information the client needs to connect, like encryption keys for UDP packets and the list of server addresses to connect to, along with some other information corresponding to the &amp;lsquo;associated data&amp;rsquo; portion of the AEAD.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The client reads the connect token and has a list of n IP addresses to connect to in order. While n can be 1, it&amp;rsquo;s best to give the client multiple servers in case the first server is full by the time the client attempts to connect to it.&lt;/p&gt;
&lt;p&gt;When connecting to a dedicated server the client sends a &lt;em&gt;connection request packet&lt;/em&gt; repeatedly over UDP. This packet contains the private connect token data, plus some additional data for the AEAD such as the netcode.io version info, protocol id (a 64bit number unique to this particular game), expiry timestamp for the connnect token and the sequence number for the AEAD primitive.&lt;/p&gt;
&lt;p&gt;When the dedicated server receives a connection request over UDP it first checks that the contents of the packet are valid using the AEAD primitive. If any of the public data in the connection request packet is modified, the signature check will fail. This stops clients from modifying the expiry timestamp for a connect token, while also making rejection of expired tokens very fast.&lt;/p&gt;
&lt;p&gt;Provided the connect token is valid, it is decrypted. Internally it contains a list of dedicated server addresses that the connect token is valid for, stopping malicious clients going wide with one connect token and using it to connect to all available dedicated servers.&lt;/p&gt;
&lt;p&gt;The server also checks if the connect token has already been used by searching a short history of connect token HMACs, and ignores the connection request if a match is found. This prevents one connect token from being used to connect multiple clients.&lt;/p&gt;
&lt;p&gt;Additionally, the server enforces that only one client with a given IP address and port may be connected at any time, and only one client by unique &lt;em&gt;client id&lt;/em&gt; may be connected at any time, where &lt;em&gt;client id&lt;/em&gt; is a 64 bit integer that uniquely identifies a client that has been authenticated by the web backend.&lt;/p&gt;
&lt;p&gt;Provided the connect token has not expired, it decrypts successfully, and the dedicated server&amp;rsquo;s public IP is in the list of server addresses, and all other checks pass, the dedicated server sets up a mapping between the client IP address and the encryption keys contained in the private connect token data.&lt;/p&gt;
&lt;p&gt;All packets exchanged between the client and server from this point are encrypted using these keys. This encryption mapping expires if no UDP packets are received from the address for a short amount of time like 5 seconds.&lt;/p&gt;
&lt;p&gt;Next, the server checks if there is room for the client on the server. Each server supports some maximum number of clients, for example a 64 player game has 64 slots for clients to connect to. If the server is full, it responds with a &lt;em&gt;connection request denied packet&lt;/em&gt;. This lets clients quickly know to move on to the next server in the list when a server is full.&lt;/p&gt;
&lt;p&gt;If there &lt;em&gt;is&lt;/em&gt; room for the client, the server doesn&amp;rsquo;t yet assign the client to that slot, but instead stores the address + HMAC for the connect token for that client as a &lt;em&gt;potential client&lt;/em&gt;. The server then responds with a &lt;em&gt;connection challenge packet&lt;/em&gt;, which contains a &lt;em&gt;challenge token&lt;/em&gt; which is a block of data encrypted with a random key rolled when the server is started.&lt;/p&gt;
&lt;p&gt;This key randomization ensures there is not a security problem when the same sequence number is used to encrypt challenge tokens across multiple servers (the servers do not coordinate). Also, the connection challenge packet is significantly smaller than the connection request packet by design, to eliminate the possibility of the protocol being used as part of a DDoS amplification attack.&lt;/p&gt;
&lt;p&gt;The client receives the &lt;em&gt;connection challenge packet&lt;/em&gt; over UDP and switches to a state where it sends &lt;em&gt;connection response packets&lt;/em&gt; to the server. Connection response packets simply reflect the &lt;em&gt;challenge token&lt;/em&gt; back to the dedicated server, establishing that the client is actually able to receive packets on the source IP address they claim they are sending packets from. This stops clients with spoofed packet source addresses from connecting.&lt;/p&gt;
&lt;p&gt;When the server receives a &lt;em&gt;connection response packet&lt;/em&gt; it looks for a matching pending client entry, and if one exists, it searches once again for a free slot for the client to connect to. If there isn&amp;rsquo;t one, it replies with a &lt;em&gt;connection request denied packet&lt;/em&gt; since there may have been a slot free when the connection request was first received that is no longer available.&lt;/p&gt;
&lt;p&gt;Alternatively, the server assigns the client to a free slot and replies back with a &lt;em&gt;connection keep-alive&lt;/em&gt; packet, which tells the client which slot it was assigned on the server. This is known as a &lt;em&gt;client index&lt;/em&gt;. In multiplayer games, this is typically used to identify clients connected to a server. For example, clients 0,1,2,3 in a 4 player game correspond to players 1,2,3 and 4.&lt;/p&gt;
&lt;p&gt;The server now considers the client connected and is able to send &lt;em&gt;connection payload packets&lt;/em&gt; down to that client. These packets wrap game specific data and are delivered unreliable-ordered. The only caveat is that since the client needs to first receive a &lt;em&gt;connection keep-alive&lt;/em&gt; before it knows its client index and considers itself to be fully connected, the server tracks on a per-client slot basis whether that client is &lt;em&gt;confirmed&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The confirmed flag per-client is initially set to false, and flips true once the server has received a keep-alive or payload packet from that client. Until a client is confirmed, each time a payload packet is sent from the server to that client, it is prefixed with a keep-alive packet. This ensures the client is statistically likely to know its client index and be fully connected prior to receiving the first payload packet sent from the server, minimizing the number of connection establishment round-trips.&lt;/p&gt;
&lt;p&gt;Now that the client and server are fully connected they can exchange UDP packets bidirectionally. Typical game protocols sent player inputs from client to server at a high rate like 60 times per-second, and world state from the server to client at a slightly lower rate, like 20 times per-second. However more recent AAA games are increasing the server update rate.&lt;/p&gt;
&lt;p&gt;If the server or client don&amp;rsquo;t exchange a steady stream of packets, keep-alive packets are automatically generated so the connection doesn&amp;rsquo;t time out. If no packets are received from either side of the connection for a short amount of time like 5 seconds, the connection times out.&lt;/p&gt;
&lt;p&gt;If either side of the connection wishes to cleanly disconnect, a number of &lt;em&gt;connection disconnect packets&lt;/em&gt; are fired across redundantly, so that statistically these packets are likely to get through even under packet loss. This ensures that clean disconnects happen quickly, without the other side waiting for time out.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Popular web games like &lt;a href=&#34;http://agar.io&#34;&gt;agar.io&lt;/a&gt; are networked via WebSockets over TCP, because WebRTC is difficult to use in a client/server context with dedicated servers.&lt;/p&gt;
&lt;p&gt;One solution would be for Google to make it &lt;em&gt;significantly&lt;/em&gt; easier for game developers to integrate WebRTC data channel support in their dedicated servers.&lt;/p&gt;
&lt;p&gt;Alternatively, &lt;a href=&#34;http://netcode.io&#34;&gt;netcode.io&lt;/a&gt; provides a much simpler &amp;lsquo;WebSockets for UDP&amp;rsquo;-like approach, which would also solve the problem, if it were standardized and incorporated into browsers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; netcode.io is now &lt;a href=&#34;https://github.com/RedpointGames/netcode.io-browser&#34;&gt;available in browsers&lt;/a&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Client Server Connection</title>
      <link>https://gafferongames.com/post/client_server_connection/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/client_server_connection/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, Iâm &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/building-a-game-network-protocol/&#34;&gt;Building a Game Network Protocol&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So far in this article series we&amp;rsquo;ve discussed how games read and write packets, how to unify packet read and write into a single function, how to fragment and re-assemble packets, and how to send large blocks of data over UDP.&lt;/p&gt;
&lt;p&gt;Now in this article we&amp;rsquo;re going to bring everything together and build a client/server connection on top of UDP.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Developers from a web background often wonder why games go to such effort to build a client/server connection on top of UDP, when for many applications, TCP is good enough. &lt;a href=&#34;https://gafferongames.com/post/client_server_connection/#quic_footnote&#34;&gt;*&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reason is that games send &lt;strong&gt;time critical data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why don&amp;rsquo;t games use TCP for time critical data? The answer is that TCP delivers data reliably and in-order, and to do this on top of IP (which is unreliable, unordered) it holds more recent packets hostage in a queue while older packets are resent over the network.&lt;/p&gt;
&lt;p&gt;This is known as &lt;strong&gt;head of line blocking&lt;/strong&gt; and it&amp;rsquo;s a &lt;em&gt;huuuuuge&lt;/em&gt; problem for games. To understand why, consider a game server broadcasting the state of the world to clients 10 times per-second. Each client advances time forward and wants to display the most recent state it receives from the server.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/client-time.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;But if the packet containing state for time t = 10.0 is lost, under TCP we must wait for it to be resent before we can access t = 10.1 and 10.2, even though those packets have already arrived and contain the state the client wants to display.&lt;/p&gt;
&lt;p&gt;Worse still, by the time the resent packet arrives, it&amp;rsquo;s far too late for the client to actually do anything useful with it. The client has already advanced past 10.0 and wants to display something around 10.3 or 10.4!&lt;/p&gt;
&lt;p&gt;So why resend dropped packets at all? &lt;strong&gt;BINGO!&lt;/strong&gt; What we&amp;rsquo;d really like is an option to tell TCP: &amp;ldquo;Hey, I don&amp;rsquo;t care about old packets being resent, by they time they arrive I can&amp;rsquo;t use them anyway, so just let me skip over them and access the most recent data&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Unfortunately, TCP simply does not give us this option :(&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All data must be delivered reliably and in-order&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This creates terrible problems for time critical data where packet loss &lt;em&gt;and&lt;/em&gt; latency exist. Situations like, you know, The Internet, where people play FPS games.&lt;/p&gt;
&lt;p&gt;Large hitches corresponding to multiples of round trip time are added to the stream of data as TCP waits for dropped packets to be resent, which means additional buffering to smooth out these hitches, or long pauses where the game freezes and is non-responsive.&lt;/p&gt;
&lt;p&gt;Neither option is acceptable for first person shooters, which is why virtually all first person shooters are networked using UDP. UDP doesn&amp;rsquo;t provide any reliability or ordering, so protocols built on top it can access the most recent data without waiting for lost packets to be resent, implementing whatever reliability they need in &lt;em&gt;radically&lt;/em&gt; different ways to TCP.&lt;/p&gt;
&lt;p&gt;But, using UDP comes at a cost:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UDP doesn&amp;rsquo;t provide any concept of connection.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We have to build that ourselves. This is a lot of work! So strap in, get ready, because we&amp;rsquo;re going to build it all up from scratch using the same basic techniques first person shooters use when creating their protocols over UDP. You can use this client/server protocol for games or non-gaming applications and, provided the data you send is time critical, I promise you, it&amp;rsquo;s well worth the effort.&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;quic_footnote&#34;&gt;&lt;/a&gt; &lt;em&gt;* These days even web servers are transitioning to UDP via &lt;a href=&#34;https://ma.ttias.be/googles-quic-protocol-moving-web-tcp-udp/&#34;&gt;Google&amp;rsquo;s QUIC&lt;/a&gt;. If you still think TCP is good enough for time critical data in 2016, I encourage you to put that in your pipe and smoke it :)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;clientserver-abstraction&#34;&gt;Client/Server Abstraction&lt;/h2&gt;
&lt;p&gt;The goal is to create an abstraction on top of a UDP socket where our server presents a number of &lt;em&gt;virtual slots&lt;/em&gt; for clients to connect to:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/connection-request.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;When a client requests a connection, it gets assigned to one of these slots:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/connection-accepted.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;If a client requests connection, but no slots are available, the server is full and the connection request is denied:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/server-is-full.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Once a client is connected, packets are exchanged in both directions. These packets form the basis for the custom protocol between the client and server which is game specific.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/client-server-packets.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;In a first person shooter, packets are sent continuously in both directions. Clients send input to the server as quickly as possible, often 30 or 60 times per-second, and the server broadcasts the state of the world to clients 10, 20 or even 60 times per-second.&lt;/p&gt;
&lt;p&gt;Because of this steady flow of packets in both directions there is no need for keep-alive packets. If at any point packets stop being received from the other side, the connection simply times out. No packets for 5 seconds is a good timeout value in my opinion, but you can be more aggressive if you want.&lt;/p&gt;
&lt;p&gt;When a client slot times out on the server, it becomes available for other clients to connect. When the client times out, it transitions to an error state.&lt;/p&gt;
&lt;h2 id=&#34;simple-connection-protocol&#34;&gt;Simple Connection Protocol&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s get started with the implementation of a simple protocol. It&amp;rsquo;s a bit basic and more than a bit naive, but it&amp;rsquo;s a good starting point and we&amp;rsquo;ll build on it during the rest of this article, and the next few articles in this series.&lt;/p&gt;
&lt;p&gt;First up we have the client state machine.&lt;/p&gt;
&lt;p&gt;The client is in one of three states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disconnected&lt;/li&gt;
&lt;li&gt;Connecting&lt;/li&gt;
&lt;li&gt;Connected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Initially the client starts in &lt;em&gt;disconnected&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When a client connects to a server, it transitions to the &lt;em&gt;connecting&lt;/em&gt; state and sends &lt;strong&gt;connection request&lt;/strong&gt; packets to the server:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/connection-request-packet.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The CRC32 and implicit protocol id in the packet header allow the server to trivially reject UDP packets not belonging to this protocol or from a different version of it.&lt;/p&gt;
&lt;p&gt;Since connection request packets are sent over UDP, they may be lost, received out of order or in duplicate.&lt;/p&gt;
&lt;p&gt;Because of this we do two things: 1) we keep sending packets for the client state until we get a response from the server or the client times out, and 2) on both client and server we ignore any packets that don&amp;rsquo;t correspond to what we are expecting, since a lot of redundant packets are flying over the network.&lt;/p&gt;
&lt;p&gt;On the server, we have the following data structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int MaxClients = 64;

class Server
{
    int m_maxClients;
    int m_numConnectedClients;
    bool m_clientConnected[MaxClients];
    Address m_clientAddress[MaxClients];
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which lets the server lookup a free slot for a client to join (if any are free):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int Server::FindFreeClientIndex() const
{
    for ( int i = 0; i &amp;lt; m_maxClients; ++i )
    {
        if ( !m_clientConnected[i] )
            return i;
    }
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find the client index corresponding to an IP address and port:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int Server::FindExistingClientIndex( const Address &amp;amp; address ) const
{
    for ( int i = 0; i &amp;lt; m_maxClients; ++i )
    {
        if ( m_clientConnected[i] &amp;amp;&amp;amp; m_clientAddress[i] == address )
            return i;
    }
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check if a client is connected to a given slot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bool Server::IsClientConnected( int clientIndex ) const
{
    return m_clientConnected[clientIndex];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip; and retrieve a clientâs IP address and port by client index:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Address &amp;amp; Server::GetClientAddress( int clientIndex ) const
{
    return m_clientAddress[clientIndex];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using these queries we implement the following logic when the server processes a &lt;strong&gt;connection request&lt;/strong&gt; packet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the server is full, reply with &lt;strong&gt;connection denied&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the connection request is from a new client and we have a slot free, assign the client to a free slot and respond with &lt;strong&gt;connection accepted&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the sender corresponds to the address of a client that is already connected, &lt;em&gt;also&lt;/em&gt; reply with &lt;strong&gt;connection accepted&lt;/strong&gt;. This is necessary because the first response packet may not have gotten through due to packet loss. If we don&amp;rsquo;t resend this response, the client gets stuck in the &lt;em&gt;connecting&lt;/em&gt; state until it times out.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The connection accepted packet tells the client which client index it was assigned, which the client needs to know which player it is in the game:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/connection-accepted-packet.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Once the server sends a connection accepted packet, from its point of view it considers that client connected. As the server ticks forward, it watches connected client slots, and if no packets have been received from a client for 5 seconds, the slot times out and is reset, ready for another client to connect.&lt;/p&gt;
&lt;p&gt;Back to the client. While the client is in the &lt;em&gt;connecting&lt;/em&gt; state the client listens for &lt;strong&gt;connection denied&lt;/strong&gt; and &lt;strong&gt;connection accepted&lt;/strong&gt; packets from the server. Any other packets are ignored.&lt;/p&gt;
&lt;p&gt;If the client receives &lt;strong&gt;connection accepted&lt;/strong&gt;, it transitions to connected. If it receives &lt;strong&gt;connection denied&lt;/strong&gt;, or after 5 seconds hasn&amp;rsquo;t received any response from the server, it transitions to disconnected.&lt;/p&gt;
&lt;p&gt;Once the client hits &lt;em&gt;connected&lt;/em&gt; it starts sending connection payload packets to the server. If no packets are received from the server in 5 seconds, the client times out and transitions to &lt;em&gt;disconnected&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;naive-protocol-is-naive&#34;&gt;Naive Protocol is Naive&lt;/h2&gt;
&lt;p&gt;While this protocol is easy to implement, we can&amp;rsquo;t use a protocol like this in production. It&amp;rsquo;s way too naive. It simply has too many weaknesses to be taken seriously:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spoofed packet source addresses can be used to redirect connection accepted responses to a target (victim) address. If the connection accepted packet is larger than the connection request packet, attackers can use this protocol as part of a &lt;a href=&#34;https://www.us-cert.gov/ncas/alerts/TA14-017A&#34;&gt;DDoS amplification attack&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spoofed packet source addresses can be used to trivially fill all client slots on a server by sending connection request packets from n different IP addresses, where n is the number of clients allowed per-server. This is a real problem for dedicated servers. Obviously you want to make sure that only real clients are filling slots on servers you are paying for.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An attacker can trivially fill all slots on a server by varying the client UDP port number on each client connection. This is because clients are considered unique on an address + port basis. This isn&amp;rsquo;t easy to fix because due to NAT (network address translation), different players behind the same router collapse to the same IP address with only the port being different, so we can&amp;rsquo;t just consider clients to be unique at the IP address level sans port.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Traffic between the client and server can be read and modified in transit by a third party. While the CRC32 protects against packet corruption, an attacker would simply recalculate the CRC32 to match the modified packet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If an attacker knows the client and server IP addresses and ports, they can impersonate the client or server. This gives an attacker the power to completely a hijack a clientâs connection and perform actions on their behalf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once a client is connected to a server there is no way for them to disconnect cleanly, they can only time out. This creates a delay before the server realizes a client has disconnected, or before a client realizes the server has shut down. It would be nice if both the client and server could indicate a clean disconnect, so the other side doesnât need to wait for timeout in the common case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean disconnection is usually implemented with a disconnect packet, however because an attacker can impersonate the client and server with spoofed packets, doing so would give the attacker the ability to disconnect a client from the server whenever they like, provided they know the client and server IP addresses and the structure of the disconnect packet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a client disconnects dirty and attempts to reconnect before their slot times out on the server, the server still thinks that client is connected and replies with &lt;strong&gt;connection accepted&lt;/strong&gt; to handle packet loss. The client processes this response and thinks it&amp;rsquo;s connected to the server, but it&amp;rsquo;s actually in an undefined state.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While some of these problems require authentication and encryption before they can be fully solved, we can make some small steps forward to improve the protocol before we get to that. These changes are instructive.&lt;/p&gt;
&lt;h2 id=&#34;improving-the-connection-protocol&#34;&gt;Improving The Connection Protocol&lt;/h2&gt;
&lt;p&gt;The first thing we want to do is only allow clients to connect if they can prove they are actually at the IP address and port they say they are.&lt;/p&gt;
&lt;p&gt;To do this, we no longer accept client connections immediately on connection request, instead we send back a challenge packet, and only complete connection when a client replies with information that can only be obtained by receiving the challenge packet.&lt;/p&gt;
&lt;p&gt;The sequence of operations in a typical connect now looks like this:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/challenge-response.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;To implement this we need an additional data structure on the server. Somewhere to store the challenge data for pending connections, so when a challenge response comes in from a client we can check against the corresponding entry in the data structure and make sure it&amp;rsquo;s a valid response to the challenge sent to that address.&lt;/p&gt;
&lt;p&gt;While the pending connect data structure can be made larger than the maximum number of connected clients, it&amp;rsquo;s still ultimately finite and is therefore subject to attack. We&amp;rsquo;ll cover some defenses against this in the next article. But for the moment, be happy at least that attackers can&amp;rsquo;t progress to the &lt;strong&gt;connected&lt;/strong&gt; state with spoofed packet source addresses.&lt;/p&gt;
&lt;p&gt;Next, to guard against our protocol being used in a DDoS amplification attack, we&amp;rsquo;ll inflate client to server packets so they&amp;rsquo;re large relative to the response packet sent from the server. This means we add padding to both &lt;strong&gt;connection request&lt;/strong&gt; and &lt;strong&gt;challenge response&lt;/strong&gt; packets and enforce this padding on the server, ignoring any packets without it. Now our protocol effectively has DDoS &lt;em&gt;minification&lt;/em&gt; for requests -&amp;gt; responses, making it highly unattractive for anyone thinking of launching this kind of attack.&lt;/p&gt;
&lt;p&gt;Finally, we&amp;rsquo;ll do one last small thing to improve the robustness and security of the protocol. It&amp;rsquo;s not perfect, we need authentication and encryption for that, but it at least it ups the ante, requiring attackers to actually sniff traffic in order to impersonate the client or server. We&amp;rsquo;ll add some unique random identifiers, or &amp;lsquo;salts&amp;rsquo;, to make each client connection unique from previous ones coming from the same IP address and port.&lt;/p&gt;
&lt;p&gt;The connection request packet now looks like this:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/connection-request-packet-2.0.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The client salt in the packet is a random 64 bit integer rolled each time the client starts a new connect. Connection requests are now uniquely identified by the IP address and port combined with this client salt value. This distinguishes packets from the current connection from any packets belonging to a previous connection, which makes connection and reconnection to the server much more robust.&lt;/p&gt;
&lt;p&gt;Now when a connection request arrives and a pending connection entry can&amp;rsquo;t be found in the data structure (according to IP, port and client salt) the server rolls a server salt and stores it with the rest of the data for the pending connection before sending a challange packet back to the client. If a pending connection is found, the salt value stored in the data structure is used for the challenge. This way there is always a consistent pair of client and server salt values corresponding to each client session.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/challenge-packet.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The client state machine has been expanded so &lt;em&gt;connecting&lt;/em&gt; is replaced with two new states: &lt;em&gt;sending connection request&lt;/em&gt; and &lt;em&gt;sending challenge response&lt;/em&gt;, but it&amp;rsquo;s the same idea as before. Client states repeatedly send the packet corresponding to that state to the server while listening for the response that moves it forward to the next state, or back to an error state. If no response is received, the client times out and transitions to &lt;em&gt;disconnected&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The challenge response sent from the client to the server looks like this:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/challenge-response-packet.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The utility of this being that once the client and server have established connection, we prefix all payload packets with the xor of the client and server salt values and discard any packets with the incorrect salt values. This neatly filters out packets from previous sessions and requires an attacker to sniff packets in order to impersonate a client or server.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/connection-payload-packet.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Now that we have at least a &lt;em&gt;basic&lt;/em&gt; level of security, it&amp;rsquo;s not much, but at least it&amp;rsquo;s &lt;em&gt;something&lt;/em&gt;, we can implement a disconnect packet:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/network-protocol/disconnect-packet.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;And when the client or server want to disconnect clean, they simply fire 10 of these over the network to the other side, in the hope that some of them get through, and the other side disconnects cleanly instead of waiting for timeout.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We now have a much more robust protocol. It&amp;rsquo;s secure against spoofed IP packet headers. It&amp;rsquo;s no longer able to be used as port of DDoS amplification attacks, and with a trivial xor based authentication, we are protected against &lt;em&gt;casual&lt;/em&gt; attackers while client reconnects are much more robust.&lt;/p&gt;
&lt;p&gt;But it&amp;rsquo;s still vulnerable to a sophisticated actors who can sniff packets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This attacker can read and modify packets in flight.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This breaks the trivial identification based around salt values&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip; giving an attacker the power to disconnect any client at will.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To solve this, we need to get serious with cryptography to encrypt and sign packets so they can&amp;rsquo;t be read or modified by a third party.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE&lt;/strong&gt;: &lt;a href=&#34;http://patreon.com/gafferongames&#34;&gt;Securing Dedicated Servers&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Reliable Ordered Messages</title>
      <link>https://gafferongames.com/post/reliable_ordered_messages/</link>
      <pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/reliable_ordered_messages/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, Iâm &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/building-a-game-network-protocol/&#34;&gt;Building a Game Network Protocol&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Many people will tell you that implementing your own reliable message system on top of UDP is foolish.Â After all, why reimplement TCP?&lt;/p&gt;
&lt;p&gt;But why limit ourselves to how TCP works? But thereÂ are so many different ways to implement reliable-messages and most of them workÂ &lt;em&gt;nothing&lt;/em&gt; like TCP!&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s get creative and work out how we can implement a reliable message system that&amp;rsquo;s &lt;em&gt;better&lt;/em&gt; and &lt;em&gt;more flexible&lt;/em&gt; than TCP for real-time games.&lt;/p&gt;
&lt;h2 id=&#34;different-approaches&#34;&gt;Different Approaches&lt;/h2&gt;
&lt;p&gt;A common approach to reliability in games is to have two packet types: reliable-ordered and unreliable. You&amp;rsquo;ll see this approach in many network libraries.&lt;/p&gt;
&lt;p&gt;The basic idea is that the library resends reliable packets until they are received by the other side. This is the option that usuallyÂ ends up looking a bit like TCP-lite for theÂ reliable-packets. It&amp;rsquo;s not that bad, but you can do much better.&lt;/p&gt;
&lt;p&gt;The way I prefer to think of it is that messages are smaller bitpacked elements that know how to serialize themselves. This makes the most sense when the overhead of length prefixing and padding bitpacked messages up to the next byte is undesirable (eg. lots of small messages included in each packet). Sent messages are placed in a queue and each time a packet is sent some of the messages in the send queueÂ are included in the outgoing packet.Â This way there are no reliable packets that need to be resent. Reliable messages are simply included in outgoing packets until they are received.&lt;/p&gt;
&lt;p&gt;The easiest wayÂ to do this is toÂ include all unacked messages in each packet sent. It goes something like this:Â each message sent has an id that increments each time a message is sent. Each outgoing packet includes the start &lt;em&gt;message id&lt;/em&gt; followed by the data for &lt;em&gt;n&lt;/em&gt; messages. The receiver continually sends back the most recent received message id to the sender as an ack and only messages newer than the most recent acked message id are included in packets.&lt;/p&gt;
&lt;p&gt;This is simple and easy to implement butÂ ifÂ a large burst of packet loss occurs while you are sending messages you get a spike in packet size due to unacked messages.&lt;/p&gt;
&lt;p&gt;You can avoid this byÂ extending the system to have an upper boundÂ on the number of messages included per-packet &lt;em&gt;n&lt;/em&gt;. But now if you have a high packet send rate (like 60 packets per-second) you are sending the same message multiple times until you get an ack for that message.&lt;/p&gt;
&lt;p&gt;If your round trip time is 100ms each message will be sent 6 times redundantly before being acked on average. Maybe you really need this amount of redundancy because your messages are extremelyÂ time critical, but in most cases, your bandwidth would be better spent on other things.&lt;/p&gt;
&lt;p&gt;The approach I prefer combines packet level acks with a prioritization system that picks the n most important messages to include in each packet.Â This combinesÂ time critical delivery and the ability to send only n messages per-packet, while distributing sends across all messages in the send queue.&lt;/p&gt;
&lt;h2 id=&#34;packet-levelacks&#34;&gt;Packet LevelÂ Acks&lt;/h2&gt;
&lt;p&gt;To implement packet level acks, we add the following packet header:&lt;/p&gt;
&lt;pre&gt;
struct Header
{
    uint16_t sequence;
    uint16_t ack;
    uint32_t ack_bits;
};
&lt;/pre&gt;
&lt;p&gt;These header elements combine to create the ack system: &lt;strong&gt;sequence&lt;/strong&gt; is a number that increases with each packet sent, &lt;strong&gt;ack&lt;/strong&gt; is the most recent packet sequence number received, and &lt;strong&gt;ack_bits&lt;/strong&gt; is a bitfield encodingÂ the set of acked packets.&lt;/p&gt;
&lt;p&gt;If bit &lt;strong&gt;n&lt;/strong&gt; is set in &lt;strong&gt;ack_bits&lt;/strong&gt;, then &lt;strong&gt;ack - n&lt;/strong&gt; is acked. Not only isÂ &lt;strong&gt;ack_bits&lt;/strong&gt; a smart encoding thatÂ saves bandwidth, it also adds &lt;em&gt;redundancy&lt;/em&gt; to combat packet loss. Each ack is sent 32 times. If one packet is lost, there&amp;rsquo;s 31 other packets with the same ack. Statistically speaking, acks are very likely to get through.&lt;/p&gt;
&lt;p&gt;But bursts of packet loss do happen, so it&amp;rsquo;s important to note that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you receive an ack for packet n then that packet wasÂ &lt;strong&gt;definitely received&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If youÂ don&amp;rsquo;t receive an ack, the packet was &lt;em&gt;most likely&lt;/em&gt; not received. But, it might have been, andÂ the ack just didn&amp;rsquo;t get through. &lt;strong&gt;This isÂ extremely rare&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my experience it&amp;rsquo;sÂ not necessary toÂ sendÂ perfect acks. Building a reliability system on top of a system that very rarely drops acks adds no significant problems. But it does create a challenge for testing this system works under all situations because of the edge cases when acks are dropped.&lt;/p&gt;
&lt;p&gt;So please if you do implement this system yourself, setup a soak test with terrible network conditions to make sure your ack system is working correctly. You&amp;rsquo;ll find such a soak test in the &lt;a href=&#34;http://www.patreon.com/gafferongames&#34;&gt;example source code&lt;/a&gt; for this article, and the open source network libraries &lt;a href=&#34;https://github.com/networkprotocol/reliable.io&#34;&gt;reliable.io&lt;/a&gt; and &lt;a href=&#34;http://www.libyojimbo.com&#34;&gt;yojimbo&lt;/a&gt; which also implement this technique.&lt;/p&gt;
&lt;h2 id=&#34;sequence-buffers&#34;&gt;Sequence Buffers&lt;/h2&gt;
&lt;p&gt;To implement this ack system we need a data structure on the sender side to track whether a packet has been acked so we can ignore redundant acks (each packet is acked multiple times via &lt;strong&gt;ack_bits&lt;/strong&gt;.Â We also need a data structure on the receiver side to keep track of whichÂ packets have been received so we can fill in the &lt;strong&gt;ack_bits&lt;/strong&gt; value in the packet header.&lt;/p&gt;
&lt;p&gt;The data structure should have the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constant time insertion (inserts mayÂ be &lt;em&gt;random&lt;/em&gt;, for example out of order packets&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Constant time query if an entry exists given a packet sequence number&lt;/li&gt;
&lt;li&gt;Constant time access for the data stored for a given packet sequence number&lt;/li&gt;
&lt;li&gt;Constant time removal of entries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might be thinking. Oh of course, &lt;em&gt;hash table&lt;/em&gt;. But there&amp;rsquo;s a much simpler way:&lt;/p&gt;
&lt;pre&gt;
const int BufferSize = 1024;

uint32_t sequence_buffer[BufferSize];

struct PacketData
{
    bool acked;
};

PacketData packet_data[BufferSize];

PacketData * GetPacketData( uint16_t sequence )
{
    const int index = sequence % BufferSize;
    if ( sequence_buffer[index] == sequence )
        return &amp;amp;packet_data[index];
    else
        return NULL;
}
&lt;/pre&gt;
&lt;p&gt;As you can see the trick here is a rolling buffer indexed by sequence number:&lt;/p&gt;
&lt;pre&gt;
const int index = sequence % BufferSize;
&lt;/pre&gt;
&lt;p&gt;This works because we don&amp;rsquo;t care about being destructive toÂ old entries. As the sequence number increases older entries are naturally overwritten as we insert new ones. The sequence_buffer[index] value is used to test if the entry at that index actually corresponds to the sequence number you&amp;rsquo;reÂ looking for. A sequence buffer value of 0xFFFFFFFF indicates an empty entry and naturally returns NULL for any sequence number query without an extra branch.&lt;/p&gt;
&lt;p&gt;When entries are added in order like a send queue, all that needs to be done on insert is to update the sequence buffer value to the new sequence number and overwrite the data at that index:&lt;/p&gt;
&lt;pre&gt;
PacketData &amp;amp; InsertPacketData( uint16_t sequence )
{
    const int index = sequence % BufferSize;
    sequence_buffer[index] = sequence;
    return packet_data[index];
}
&lt;/pre&gt;
&lt;p&gt;Unfortunately, on the receive side packets arrive out of order and some are lost. Under ridiculously high packet loss (99%) I&amp;rsquo;ve seen old sequence buffer entries stick around from before the previous sequence number wrap at 65535 and break my ack logic (leading to false acks and broken reliability where the sender thinks the other side has received something they haven&amp;rsquo;t&amp;hellip;).&lt;/p&gt;
&lt;p&gt;The solution to this problem is to walk between the previous highest insert sequence and the new insert sequence (if it is more recent) and clearÂ those entries in the sequence buffer to 0xFFFFFFFF. Now in the common case, insert is &lt;em&gt;very close&lt;/em&gt; to constant time, but worst case is linear where n is the number of sequence entriesÂ between the previous highest insert sequence and the current insert sequence.&lt;/p&gt;
&lt;p&gt;Before we move on I would like to note that you can do much more with this data structure than just acks. For example, you could extend the per-packet data to include time sent:&lt;/p&gt;
&lt;pre&gt;struct PacketData
{
    bool acked;
    double send_time;
};
&lt;/pre&gt;
&lt;p&gt;With this information you can create your own estimate of round trip timeÂ by comparing send time to current time when packets are acked and taking an &lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_smoothing&#34;&gt;exponentially smoothed moving average&lt;/a&gt;. You can evenÂ look at packets in the sent packet sequence buffer older than your RTT estimate (you should have received an ack for them by now&amp;hellip;) to create your own packet loss estimate.&lt;/p&gt;
&lt;h2 id=&#34;ack-algorithm&#34;&gt;Ack Algorithm&lt;/h2&gt;
&lt;p&gt;Now that we have the data structures and packet header, here is the algorithm for implementing packet level acks:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On packet send:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Insert an entry for for the current send packet sequence number in the sent packet sequence buffer with data indicating that it hasn&amp;rsquo;t been acked yet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GenerateÂ &lt;strong&gt;ack&lt;/strong&gt; andÂ &lt;strong&gt;ack_bits&lt;/strong&gt; from the contents of the local received packet sequence buffer and theÂ most recent received packet sequence number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fill the packet header withÂ &lt;strong&gt;sequence&lt;/strong&gt;, &lt;strong&gt;ack&lt;/strong&gt; andÂ &lt;strong&gt;ack_bits&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send the packet and increment theÂ send packet sequence number&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;On packet receive:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Read inÂ &lt;strong&gt;sequence&lt;/strong&gt; from the packet header&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;strong&gt;sequence&lt;/strong&gt;Â is more recent than the previous most recent received packet sequence number, update the most recent received packet sequence number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert an entry for this packet in the received packet sequence buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decode the set of acked packet sequence numbers fromÂ &lt;strong&gt;ack&lt;/strong&gt; andÂ &lt;strong&gt;ack_bits&lt;/strong&gt; in the packet header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate across all acked packet sequence numbers andÂ for any packet that is not alreadyÂ acked callÂ &lt;strong&gt;OnPacketAcked&lt;/strong&gt;( uint16_t sequence )Â and mark that packet asÂ &lt;em&gt;acked&lt;/em&gt; in the sent packet sequence buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Importantly this algorithm is done on both sides so if you have a client and a server then each side of the connection runsÂ the same logic, maintaining its own sequence number for sent packets, tracking most recent received packet sequence # from the other side and a sequence buffer of received packets from which it generates &lt;strong&gt;sequence&lt;/strong&gt;,Â &lt;strong&gt;ack&lt;/strong&gt; andÂ &lt;strong&gt;ack_bits&lt;/strong&gt; to send to the other side.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s really all there is to it. Now you have a callback when aÂ packet is received by the other side: &lt;strong&gt;OnPacketAcked&lt;/strong&gt;.Â The main benefit of this ack system is now that you know which packets were received,Â you can build &lt;em&gt;any&lt;/em&gt; reliability systemÂ you want on top. It&amp;rsquo;s not limited to just reliable-ordered messages. For example, you could use it to implement delta encoding on a per-object basis.&lt;/p&gt;
&lt;h2 id=&#34;message-objects&#34;&gt;Message Objects&lt;/h2&gt;
&lt;p&gt;Messages are small objects (smaller than packet size, so that many will fit in a typical packet) that know how to serialize themselves. In my system they perform serialization using aÂ &lt;a href=&#34;http://gafferongames.com/building-a-game-network-protocol/serialization-strategies&#34;&gt;unified serialize function&lt;/a&gt;unified serialize function.&lt;/p&gt;
&lt;p&gt;The serialize function is templated so you write it once and itÂ handles read, write andÂ &lt;em&gt;measure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Yes. Measure. One of my favorite tricks is to have a dummy stream class calledÂ &lt;strong&gt;MeasureStream&lt;/strong&gt; that doesn&amp;rsquo;t do any actual serialization but just measures the numberÂ of bits thatÂ &lt;em&gt;would&lt;/em&gt; be written if you called the serialize function. This is particularly usefulÂ for working out which messages are going to fit into your packet, especially when messages themselves can have arbitrarily complex serialize functions.&lt;/p&gt;
&lt;pre&gt;
struct TestMessage : public Message
{
    uint32_t a,b,c;

    TestMessage()
    {
        a = 0;
        b = 0;
        c = 0;
    }

    template &amp;lt;typename Stream&amp;gt; bool Serialize( Stream &amp;amp; stream )
    { 
        serialize_bits( stream, a, 32 );
        serialize_bits( stream, b, 32 );
        serialize_bits( stream, c, 32 );
        return true;
    }

    virtual SerializeInternal( WriteStream &amp;amp; stream )
    {
        return Serialize( stream );
    }

    virtual SerializeInternal( ReadStream &amp;amp; stream )
    {
        return Serialize( stream );
    }

    virtual SerializeInternal( MeasureStream &amp;amp; stream )
    {
        return Serialize( stream );        
    }
};
&lt;/pre&gt;
&lt;p&gt;The trick here is to bridge the unified templated serialize function (so you only have to write it once) to virtual serialize methods by calling into it fromÂ virtual functions per-stream type. I usuallyÂ wrap this boilerplate with a macro, but it&amp;rsquo;s expanded in the code above so you canÂ see what&amp;rsquo;s going on.&lt;/p&gt;
&lt;p&gt;Now when you have a base message pointer you can do this and it &lt;em&gt;just works&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
Message * message = CreateSomeMessage();
message-&amp;gt;SerializeInternal( stream );
&lt;/pre&gt;
&lt;p&gt;An alternative if you know the full set of messages at compile time is to implement a bigÂ switch statement on message type casting to the correct message type before calling into the serialize function for each type. I&amp;rsquo;ve done this in the pastÂ on console platform implementations of this message systemÂ (eg.Â PS3 SPUs) but for applications today (2016) the overhead of virtual functionsÂ is neglible.&lt;/p&gt;
&lt;p&gt;Messages derive from a base class thatÂ provides a common interface such as serialization, querying the type of a message and reference counting. Reference counting is necessaryÂ because messages are passed around by pointer and stored not only in the message send queue until acked, but also in outgoingÂ packets which are themselves C++ structs.&lt;/p&gt;
&lt;p&gt;This is a strategy to avoid copying dataÂ by passing both messages and packets around by pointer. Somewhere else (ideally on a separate thread) packets and the messages inside them are serialized to a buffer. Eventually, when no references to a message exist in the message send queue (the message is acked) and no packets includingÂ that message remain in the packet send queue, theÂ message is destroyed.&lt;/p&gt;
&lt;p&gt;We also need a way to create messages. I do this with aÂ message factory class with a virtual function overriden to create a message by type. It&amp;rsquo;s good if the packet factory also knows the total number of message types, so we can serialize a message type over the network with tight bounds and discard malicious packets withÂ messageÂ type values outside of the valid range:&lt;/p&gt;
&lt;pre&gt;
enum TestMessageTypes
{
    TEST_MESSAGE_A,
    TEST_MESSAGE_B,
    TEST_MESSAGE_C,
    TEST_MESSAGE_NUM_TYPES
};

// message definitions omitted

class TestMessageFactory : public MessageFactory
{ 
public:

    Message * Create( int type )
    {
        switch ( type )
        {
            case TEST_MESSAGE_A: return new TestMessageA();
            case TEST_MESSAGE_B: return new TestMessageB();
            case TEST_MESSAGE_C: return new TestMessageC();
        }
    }

    virtual int GetNumTypes() const
    {
        return TEST_MESSAGE_NUM_TYPES;
    }
};
&lt;/pre&gt;
&lt;p&gt;Again, this is boilerplate and is usually wrapped by macros, but underneath this is what&amp;rsquo;s going on.&lt;/p&gt;
&lt;h2 id=&#34;reliable-ordered-message-algorithm&#34;&gt;Reliable Ordered Message Algorithm&lt;/h2&gt;
&lt;p&gt;The algorithm for sending reliable-ordered messages is as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On message send:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Measure how many bits the message serializes to using the measure stream&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert the message pointer and the # of bits it serializes toÂ into a sequence buffer indexed by message id.Â Set the time that message has last been sent to -1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increment the send message id&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;On packet send:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Walk across the set of messages in the send messageÂ sequence buffer between the oldest unacked message id and the most recent inserted message id from left -&amp;gt; right (increasing message id order).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never send a message id that the receiver can&amp;rsquo;t buffer or you&amp;rsquo;ll break message acks (since that message won&amp;rsquo;t be buffered, but the packet containing it will be acked, the sender thinks the message has been received, and will not resend it). This means you must &lt;em&gt;never&lt;/em&gt; send a message id equal to or more recentÂ than the oldest unacked message id plus the size of the message receive buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For any message that hasn&amp;rsquo;t been sent in the last 0.1 seconds &lt;em&gt;and&lt;/em&gt; fits in the available space we have left in the packet, add it to the list of messages to send. Messages on the left (older messages) naturally have priority due to the iteration order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Include the messages in the outgoing packet and add a reference to each message. Make sure the packet destructor decrements the ref count for each message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Store the number of messages in the packet &lt;strong&gt;n&lt;/strong&gt; and the array of message idsÂ included in the packet in a sequence buffer indexed by the outgoing packet sequence number so they can be used to map packet level acks to the set of messages included in that packet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the packet to the packet send queue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;On packet receive:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Walk across the set of messages included in the packet and insert them in the receive message sequence buffer indexed by their message id.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ack system automaticallyÂ acks the packet sequence numberÂ we just received.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;On packet ack:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Look up the set of messages ids included in the packet by sequence number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove those messages from the message send queue if they exist and decrease their ref count.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the last unacked message id by walking forward from the previous unacked message id in the send message sequence buffer until a valid message entry is found, or you reach the current send message id. Whichever comes first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;OnÂ message receive:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check the receive message sequence bufferÂ to see if a message exists for the current receive message id.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the message exists, remove it from the receive message sequence buffer, increment the receive message id and return a pointer to the message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, no message is available to receive. Return &lt;strong&gt;NULL&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In short, messages keep getting included in packets until a packet containing that message is acked. We use a data structure on the sender side to map packet sequence numbers to the set of message ids to ack. Messages are removed from the send queue when they are acked. On the receive side,Â messages arriving out of order are stored in a sequence buffer indexed by message id, which lets us receiveÂ themÂ in the order they were sent.&lt;/p&gt;
&lt;h2 id=&#34;the-end-result&#34;&gt;The End Result&lt;/h2&gt;
&lt;p&gt;This provides the user with an interface that looks something like this on send:&lt;/p&gt;
&lt;pre&gt;
TestMessage * message = (TestMessage*) factory.Create( TEST_MESSAGE );
if ( message )
{
    message-&amp;gt;a = 1;
    message-&amp;gt;b = 2;
    message-&amp;gt;c = 3;
    connection.SendMessage( message );
}&lt;/pre&gt;
&lt;p&gt;And on the receive side:&lt;/p&gt;
&lt;pre&gt;
while ( true )
{
    Message * message = connection.ReceiveMessage();
    if ( !message )
        break;

    if ( message-&amp;gt;GetType() == TEST_MESSAGE )
    {
        TestMessage * testMessage = (TestMessage*) message;
        // process test message
    }

    factory.Release( message );
}
&lt;/pre&gt;
&lt;p&gt;Which is flexible enough to implement whatever you like on top of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE&lt;/strong&gt;: &lt;a href=&#34;https://gafferongames.com/post/client_server_connection/&#34;&gt;Client Server Connection&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Sending Large Blocks of Data</title>
      <link>https://gafferongames.com/post/sending_large_blocks_of_data/</link>
      <pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/sending_large_blocks_of_data/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, Iâm &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/building-a-game-network-protocol/&#34;&gt;Building a Game Network Protocol&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In theÂ &lt;a href=&#34;https://gafferongames.com/post/packet_fragmentation_and_reassembly/&#34;&gt;previous article&lt;/a&gt;Â we implemented packet fragmentation and reassembly so we can send packets larger than MTU.&lt;/p&gt;
&lt;p&gt;This approach works great when the data block you&amp;rsquo;re sending is time critical and can be dropped, but in other cases you need to send large blocks of quickly and reliably over packet loss, and you need the data to get through.&lt;/p&gt;
&lt;p&gt;In this situation, a different technique gives much better results.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s common for servers to send large block of data to the client on connect, for example, the initial state of the game world for late join.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume this data is 256k in size and the client needs to receive it before they can join the game. The client is stuck behind a load screen waiting for the data, so obviously we want it to be transmitted as quickly as possible.&lt;/p&gt;
&lt;p&gt;If we send the data with the technique from the previous article, we get &lt;em&gt;packet loss amplification&lt;/em&gt; because a single dropped fragment results in the whole packet being lost. The effect of this is actually quite severe. Our example block split into 256 fragments and sent over 1% packet loss now has a whopping 92.4% chance of being dropped!&lt;/p&gt;
&lt;p&gt;Since we just need the data to get across, we have no choice but to keep sending it until it gets through. On average, we have to send the block 10 times before it&amp;rsquo;s received. You may laugh but this actually happened on a AAA game I worked on!&lt;/p&gt;
&lt;p&gt;To fix this, I implemented a new system for sending large blocks, one that handles packet loss by resends fragments until they are acked. Then I took the problematic large blocks and piped them through this system, fixing a bunch of players stalling out on connect, while continuing to send time critical data (snapshots) via packet fragmentation and reassembly.&lt;/p&gt;
&lt;h2 id=&#34;chunks-and-slices&#34;&gt;Chunks and Slices&lt;/h2&gt;
&lt;p&gt;In this new system blocks of data are called &lt;em&gt;chunks&lt;/em&gt;. Chunks are split up into &lt;em&gt;slices&lt;/em&gt;. This name change keeps the chunk system terminology (chunks/slices) distinct from packet fragmentation and reassembly (packets/fragments).&lt;/p&gt;
&lt;p&gt;The basic idea is that slices are sent over the network repeatedly until they all get through. Since we are implementing this over UDP, simple in conceptÂ becomes a little more complicated in implementation because have to build in our own basic reliability system so the sender knows which slices have been received.&lt;/p&gt;
&lt;p&gt;This reliability gets quite tricky if we have a bunch of different chunks in flight, so we&amp;rsquo;re going to make a simplifying assumption up front: we&amp;rsquo;re only going to sendÂ one chunk over the network at a time. This doesn&amp;rsquo;t mean theÂ sender can&amp;rsquo;t have aÂ local send queue for chunks, just that in terms of network traffic there&amp;rsquo;s only ever one chunkÂ &lt;em&gt;in flight&lt;/em&gt; at any time.&lt;/p&gt;
&lt;p&gt;This makes intuitive sense because the whole point of the chunk system isÂ to send chunks reliably and in-order. If you are for some reason sending chunk 0 and chunk 1 at the same time, what&amp;rsquo;s the point? You can&amp;rsquo;t process chunk 1 until chunk 0 comes through, because otherwise it wouldn&amp;rsquo;t be reliable-ordered.&lt;/p&gt;
&lt;p&gt;That said, if you dig a bit deeper you&amp;rsquo;ll see that sending one chunk at a time does introduce a small trade-off, and that is that it adds a delay of RTT between chunk n being received and the send starting for chunk n+1 from the receiver&amp;rsquo;s point of view.&lt;/p&gt;
&lt;p&gt;This trade-off is totally acceptable for the occasional sending of large chunks like data sentÂ once on client connect, but it&amp;rsquo;s definitelyÂ &lt;em&gt;not&lt;/em&gt; acceptable for data sent 10 or 20 times per-second like snapshots. So remember, this system is useful for large, infrequently sent blocks of data, not for time critical data.&lt;/p&gt;
&lt;h2 id=&#34;packet-structure&#34;&gt;Packet Structure&lt;/h2&gt;
&lt;p&gt;There areÂ two sides to the chunk system, the &lt;strong&gt;sender&lt;/strong&gt; and the &lt;strong&gt;receiver&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The sender is the side that queues up the chunkÂ and sends slices over the network. The receiver is what readsÂ those slice packets and reassembles the chunk on the other side. The receiver is also responsible for communicating back to the sender which slices have been received via acks.&lt;/p&gt;
&lt;p&gt;TheÂ netcode I work on is usually client/server,Â and in this case I usually want to be able to send blocks of data from the server to the client &lt;em&gt;and&lt;/em&gt; from the client to the server. In that case, there are two senders and two receivers, a sender on the client corresponding to a receiver on the server and vice-versa.&lt;/p&gt;
&lt;p&gt;Think of the sender and receiver as end points for this chunk transmission protocol that define the direction of flow. If you want to send chunks in a different direction, or even extend the chunk sender to support peer-to-peer, just add sender and receiver end points for each direction you need to send chunks.&lt;/p&gt;
&lt;p&gt;Traffic over the network for this system is sent via two packet types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Slice packet&lt;/strong&gt;Â - contains a slice of a chunk up to 1k in size.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ack packet&lt;/strong&gt; - a bitfield indicating whichÂ slices have been received so far.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The slice packet is sent from the sender to the receiver. It is the payload packet that gets the chunk data across the network and is designed so each packet fits neatly under a conservative MTU of 1200 bytes. Each slice is a maximum of 1k and there is a maximum of 256 slices per-chunk, therefore the largest data you can send over the network with this system is 256k.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int SliceSize = 1024;
const int MaxSlicesPerChunk = 256;
const int MaxChunkSize = SliceSize * MaxSlicesPerChunk;

struct SlicePacket : public protocol2::Packet
{
    uint16_t chunkId;
    int sliceId;
    int numSlices;
    int sliceBytes;
    uint8_t data[SliceSize];
 
    template &amp;amp;lt;typename Stream&amp;amp;gt; bool Serialize( Stream &amp;amp;amp; stream )
    {
        serialize_bits( stream, chunkId, 16 );
        serialize_int( stream, sliceId, 0, MaxSlicesPerChunk - 1 );
        serialize_int( stream, numSlices, 1, MaxSlicesPerChunk );
        if ( sliceId == numSlices - 1 )
        {
            serialize_int( stream, sliceBytes, 1, SliceSize );
        }
        else if ( Stream::IsReading )
        {
            sliceBytes = SliceSize;
        }
        serialize_bytes( stream, data, sliceBytes );
        return true;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two pointsÂ I&amp;rsquo;d like to make about the slice packet. The first is that even though there is only ever one chunk in flight over the network, it&amp;rsquo;s still necessary to include theÂ chunk id (0,1,2,3, etc&amp;hellip;) because packets sent over UDP can be received out of order.&lt;/p&gt;
&lt;p&gt;Second point. Due to the way chunks are sliced up we know thatÂ all slices except the last one must be SliceSize (1024 bytes). We take advantage of this to save a small bit of bandwidth sending the slice size only in the last slice, but there is a trade-off: theÂ receiver doesn&amp;rsquo;t know the exact size of a chunk until it receives the last slice.&lt;/p&gt;
&lt;p&gt;The otherÂ packet sent byÂ this system is the ack packet. This packet is sent in the opposite direction, from the receiver back to the sender. This is the reliability part of the chunk network protocol. Its purpose is to lets the sender know which slices have been received.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct AckPacket : public protocol2::Packet 
{ 
    uint16_t chunkId; 
    int numSlices; 
    bool acked[MaxSlicesPerChunk]; 

    bool Serialize( Stream &amp;amp;amp; stream )
    { 
        serialize_bits( stream, chunkId, 16 ); 
        serialize_int( stream, numSlices, 1, MaxSlicesPerChunk ); 
        for ( int i = 0; i &amp;amp;lt; numSlices; ++i ) 
        {
            serialize_bool( stream, acked[i] ); return true; } };
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acks are short for &amp;lsquo;acknowledgments&amp;rsquo;. So an ack for slice 100 means the receiver is &lt;em&gt;acknowledging&lt;/em&gt; that it has received slice 100.Â This is critical information for the sender because not only does itÂ let the senderÂ determineÂ when all slices have been received so it knows when to stop, it also allows the sender to use bandwidth more efficiently by onlyÂ sending slices that haven&amp;rsquo;t been acked.&lt;/p&gt;
&lt;p&gt;Looking a bit deeper into the ack packet, at first glance it seems a bit &lt;em&gt;redundant&lt;/em&gt;. Why are we sending acks for all slices in every packet? Well, ack packets are sent over UDP so there is no guarantee that all ack packets are going to get through. You certainly don&amp;rsquo;t want a desync between the sender and the receiver regarding which slices are acked.&lt;/p&gt;
&lt;p&gt;So we need some reliability for acks, butÂ weÂ don&amp;rsquo;t want to implement anÂ &lt;em&gt;ack system for acks&lt;/em&gt; because that would be a huge pain in the ass. Since the worst case ack bitfield is just 256 bits or 32 bytes, we just send the entire state of all acked slicesÂ in each ack packet. When the ack packet is received, we consider a slice to be acked the instant an ack packet comes in with that slice marked as acked and locally that slice is not seen as acked yet.&lt;/p&gt;
&lt;p&gt;This last step, biasing in the direction of non-acked to ack, like a fuse getting blown, means we can handle out of order delivery of ack packets.&lt;/p&gt;
&lt;h2 id=&#34;sender-implementation&#34;&gt;Sender Implementation&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s get started withÂ the implementation of the sender.&lt;/p&gt;
&lt;p&gt;The strategy for the sender is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KeepÂ sending slices until all slices areÂ acked&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t resend slices that have already beenÂ acked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We useÂ the following data structure for the sender:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ChunkSender
{
    bool sending;
    uint16_t chunkId;
    int chunkSize;
    int numSlices;
    int numAckedSlices;
    int currentSliceId;
    bool acked[MaxSlicesPerChunk];
    uint8_t chunkData[MaxChunkSize];
    double timeLastSent[MaxSlicesPerChunk];
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned before,Â onlyÂ one chunk is sent at a time, so there is a &amp;lsquo;sending&amp;rsquo; state which is true if we are currently sending a chunk, false if we are in an idle state ready for the user to send a chunk. In this implementation, you can&amp;rsquo;t send another chunk while the currentÂ chunk is still beingÂ sent over the network. If you don&amp;rsquo;t like this, stick a queue in front of the sender.&lt;/p&gt;
&lt;p&gt;Next, we have the id of the chunk we are currently sending, or, if we are not sending a chunk, the id of the next chunk to be sent, followed by the size of the chunk and the number of slices it has been split into.Â We also track, per-slice, whether that slice has been acked, which lets us count the number of slices that have been acked so far while ignoring redundantÂ acks.Â AÂ chunk is considered fully received from the sender&amp;rsquo;s point of view when numAckedSlices == numSlices.&lt;/p&gt;
&lt;p&gt;We also keep track of the current slice id for the algorithm that determines which slices to send, which works like this. At the start of a chunk send, start at slice id 0 and work from left to right and wrap back around to 0 again when you go past the last slice. Eventually, youÂ stop iterating across because you&amp;rsquo;ve run out of bandwidth to send slices. At this point, remember our current slice indexÂ via current slice idÂ so you can pick up from where you left offÂ next time.Â This last part is important because it distributes sends across all slices, not just the first few.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s discuss bandwidth limiting. Obviously you don&amp;rsquo;t just blast slices out continuously as you&amp;rsquo;d flood the connection in no time, so how do we limit the sender bandwidth?Â My implementation works something like this: asÂ you walk across slices and consider each slice you want to send, estimateÂ roughly how many bytes the slice packet will take eg: roughly slice bytes + some overhead for your protocol and UDP/IP header. Then compare the amount of bytes required vs. the available bytes you have to send in your bandwidth budget. If you don&amp;rsquo;t have enough bytes accumulated, stop. Otherwise, subtract the bytes required to send the slice and repeat the process for the next slice.&lt;/p&gt;
&lt;p&gt;Where does the available bytes in the send budget come from? Each frame before you update the chunk sender, takeÂ your target bandwidth (eg. 256kbps), convert it to bytes per-second, and add it multiplied byÂ delta time (dt) to an accumulator.&lt;/p&gt;
&lt;p&gt;A conservative send rate of 256kbps means you can send 32000 bytes per-second, so add 32000 * dt to the accumulator.Â A middle ground of 512kbit/sec is 64000 bytes per-second. A more aggressive 1mbit is 125000 bytes per-second. This way each update youÂ &lt;em&gt;accumulate&lt;/em&gt; a number of bytes you are allowed to send, and when you&amp;rsquo;ve sent all the slices you can given that budget, anyÂ bytes left over stick around for the next time you try toÂ send a slice.&lt;/p&gt;
&lt;p&gt;One subtle point with the chunk sender and is that it&amp;rsquo;s a good idea to implement some minimum resend delay per-slice, otherwise you get situations where for small chunks, or the last few slices of aÂ chunk that the same few slices get spammed over the network.&lt;/p&gt;
&lt;p&gt;For this reason we maintain an array of last send time per-slice. One option for this resend delay is to maintain an estimate of RTT and to only resend a slice if it hasn&amp;rsquo;t been acked within RTT * 1.25 of its last send time. Or, you could just resend the slice it if it hasn&amp;rsquo;t been sent in the lastÂ 100ms. Works for me!&lt;/p&gt;
&lt;h2 id=&#34;kicking-it-up-a-notch&#34;&gt;Kicking it up a notch&lt;/h2&gt;
&lt;p&gt;Do the math you&amp;rsquo;ll noticeÂ it still takes a long time for a 256k chunk to get across:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1mbps = 2 seconds&lt;/li&gt;
&lt;li&gt;512kbps = 4 seconds&lt;/li&gt;
&lt;li&gt;256kbps = &lt;strong&gt;8 seconds&lt;/span&gt; :(&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which kinda sucks. The whole point here is quickly and reliably. Emphasis on &lt;em&gt;quickly&lt;/em&gt;. Wouldn&amp;rsquo;t it be niceÂ to be able to get the chunk across faster? The typical use case of the chunk system supports this. For example, a large block of data sent down to the client immediately on connect or a block of data that has to get through before the client exits a load screen and starts to play. You want this to be over as quickly as possible and in both cases the user really doesn&amp;rsquo;t have anything better to do with their bandwidth, so why not use as much of it as possible?&lt;/p&gt;
&lt;p&gt;One thing I&amp;rsquo;ve tried in the past with excellent results is an initial burst. Assuming your chunk size isn&amp;rsquo;t so large, and your chunk sends are infrequent, I can see no reason why you can&amp;rsquo;t just fire across the entire chunk, all slices of it, in separate packets in one glorious burst of bandwidth, wait 100ms, and then resume the regular bandwidth limited slice sending strategy.&lt;/p&gt;
&lt;p&gt;Why does this work? In the case where the user has a good internet connection (some multiple of 10mbps or greater&amp;hellip;), the slices get throughÂ very quickly indeed.Â In the situation where the connection is not so great,Â the burst gets buffered up and &lt;em&gt;most&lt;/em&gt; slices will be delivered as quickly as possible limited only by the amount bandwidth available.Â After this point switching to theÂ regular strategy at a lower rate picks up any slices that didn&amp;rsquo;t get through the first time.&lt;/p&gt;
&lt;p&gt;This seems a bit risky so let me explain. In the case where the user can&amp;rsquo;t quite support this bandwidthÂ what you&amp;rsquo;re relying on here is that routers on the Internet &lt;em&gt;strongly prefer&lt;/em&gt; to buffer packets rather than discard them at almost any cost. It&amp;rsquo;s a TCP thing. Normally, I hate this because it induces latency in packet delivery and messes up your game packets which you want delivered as quickly as possible, but in this case it&amp;rsquo;s good behaviorÂ because the player really has nothing else to do but wait for your chunk to get through.&lt;/p&gt;
&lt;p&gt;Just don&amp;rsquo;t go too overboard with the spam or the congestion will persist after your chunk send completes and it will affect your game for the first few seconds. Also, make sure you increase the size of your OS socket buffers on both ends so they are larger than your maximum chunk size (I recommend at least double), otherwise you&amp;rsquo;ll be dropping slices packets before they even hit the wire.&lt;/p&gt;
&lt;p&gt;Finally, I want to be a responsible network citizen here so although I recommend sending all slices onceÂ in an initial burst, it&amp;rsquo;s important for me to mention that I think this really is only appropriate, and only really &lt;em&gt;borderline appropriate&lt;/em&gt; behavior for small chunks in the few 100s of k range in 2016, and only when your game isn&amp;rsquo;t sending anything else that is time-critical.&lt;/p&gt;
&lt;p&gt;PleaseÂ don&amp;rsquo;t use this burst strategy if your chunk is really large, eg: megabytes of data, because that&amp;rsquo;s way too bigÂ to be relying on the kindness of strangers, AKA. the buffers in the routers between you and your packet&amp;rsquo;s destination. For this it&amp;rsquo;s necessary to implement something much smarter. SomethingÂ adaptive that tries to send data as quickly as it can, but backs off when it detects too much latency and/or packet loss as a result of flooding the connection. Such a system is outside of the scope of this article.&lt;/p&gt;
&lt;h2 id=&#34;receiver-implementation&#34;&gt;Receiver Implementation&lt;/h2&gt;
&lt;p&gt;Now that we have the sender all sorted out let&amp;rsquo;s move on to the reciever.Â &lt;/p&gt;
&lt;p&gt;As mentioned previously, unlike the packet fragmentation and reassembly system from the previous article, the chunk system only ever has one chunk in flight.&lt;/p&gt;
&lt;p&gt;This makes the reciever side of the chunk system much simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ChunkReceiver
{
    bool receiving;
    bool readyToRead;
    uint16_t chunkId;
    int chunkSize;
    int numSlices;
    int numReceivedSlices;
    bool received[MaxSlicesPerChunk];
    uint8_t chunkData[MaxChunkSize];
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have aÂ state whether we are currently &amp;lsquo;receiving&amp;rsquo; a chunk over the network, plus aÂ &amp;lsquo;readyToRead&amp;rsquo; state which indicates that a chunk hasÂ received all slices and is ready to be popped off by the user. This is effectively a minimal receive queue of length 1. If you don&amp;rsquo;t like this, of course you are free to add a queue.&lt;/p&gt;
&lt;p&gt;In this data structure we also keep track of chunk size (although it is not known with complete accuracy until the last slice arrives), num slices and num received slices, as well as a received flag per-slice. This per-slice received flag lets us discard packets containing slices we have already received, and count the number of slices received so far (since we may receive the slice multiple times, we only increase this count the first time we receive a particular slice). It&amp;rsquo;sÂ also used when generating ack packets.Â The chunk receive is completed from the receiver&amp;rsquo;s point of view when numReceivedSlices == numSlices.&lt;/p&gt;
&lt;p&gt;So what does it look like end-to-end receiving a chunk?&lt;/p&gt;
&lt;p&gt;First, the receiver sets upÂ set to start at chunk 0. When the a slice packet comes in over the network matching the chunk id 0, &amp;lsquo;receiving&amp;rsquo; flips from false to true, data for that first slice is inserted into &amp;lsquo;chunkData&amp;rsquo; at the correct position, numSlices is set to the value in that packet,Â numReceivedSlices is incremented from 0 -&amp;gt; 1, and the received flag in the array entry corresponding to that slice is set to true.&lt;/p&gt;
&lt;p&gt;As the remaining slice packets for the chunk come in, each of them are checked that they match the current chunkÂ id and numSlices that are being received and are ignored if they don&amp;rsquo;t match. Packets areÂ also ignored if they contain a slice that has already been received. Otherwise, the slice data is copied into the correct place in the chunkData array, numReceivedSlices is incremented and receivedÂ flag for that slice is set to true.&lt;/p&gt;
&lt;p&gt;This process continues until all slices of the chunk are received, at which point the receiver sets receiving to &amp;lsquo;false&amp;rsquo; and &amp;lsquo;readyToRead&amp;rsquo; to true. While &amp;lsquo;readyToRead&amp;rsquo; is true, incoming slice packets are discarded. At this point, the chunk receive packet processing is performed, typically on the sameÂ frame. The caller checks &amp;lsquo;do I have a chunk to read?&amp;rsquo; and processesÂ the chunk data. All chunk receive data is cleared back to defaults, except chunk id which is incremented from 0 -&amp;gt; 1, and we are ready to receive the next chunk.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The chunk system isÂ simple in concept, but the implementation is certainly not. I encourage you to take a close look at the &lt;a href=&#34;http://www.patreon.com/gafferongames&#34;&gt;source code&lt;/a&gt; for this article for furtherÂ details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/reliable_ordered_messages/&#34;&gt;Reliable Ordered Messages&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Packet Fragmentation and Reassembly</title>
      <link>https://gafferongames.com/post/packet_fragmentation_and_reassembly/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/packet_fragmentation_and_reassembly/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, Iâm &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/building-a-game-network-protocol/&#34;&gt;Building a Game Network Protocol&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In theÂ &lt;a href=&#34;https://gafferongames.com/post/serialization_strategies/&#34;&gt;previous article&lt;/a&gt;Â we discussedÂ how to unify packet read and write into a single serializeÂ function and added a bunch of safety features to packet read.&lt;/p&gt;
&lt;p&gt;Now we are ready to start putting interesting things in our packets and sending them over the network, but immediately we run into an interesting question:Â &lt;em&gt;how big should our packets be?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To answer this question properly we need a bit of background about how packets are actually sent over the Internet.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Perhaps the most important thing to understand about the internet is that there&amp;rsquo;s no direct connection between the source and destination IP address. What actually happens is that packets hop from one computer to another to reach their destination.&lt;/p&gt;
&lt;p&gt;Each computer along this routeÂ enforces a maximum packet size called the maximum transmission unit, or MTU. According to the IP standard, if any computer recieves a packet larger than its MTU, it has the option of a) fragmenting that packet, or b) dropping the packet.&lt;/p&gt;
&lt;p&gt;So here&amp;rsquo;s how this usually goes down. People write a multiplayer game where the average packet size is quite small, lets say a few hundred bytes, but every now and then when a lot of stuff is happening in their game and a burstÂ of packet loss occurs, packets get a lot larger thanÂ usual, going above MTU for the route, and suddenly all packets start getting dropped!&lt;/p&gt;
&lt;p&gt;JustÂ last year (2015) I was talking with Alex Austin at Indiecade about networking in his game &lt;a href=&#34;http://subrosagame.com&#34;&gt;Sub Rosa&lt;/a&gt;. He had this strange networking bug he couldn&amp;rsquo;t reproduce. For some reason, players would randomly get disconnected from the game, but only when a bunch of stuff was going on. It was extremely rare and he was unable to reproduce it. Alex told me looking at the logs it seemed like &lt;em&gt;packets just stopped getting through&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This sounded &lt;em&gt;exactly&lt;/em&gt; like an MTU issue to me, and sure enough,Â when Alex limited his maximum packet size to a reasonable valueÂ the bug went away.&lt;/p&gt;
&lt;h2 id=&#34;mtu-in-the-real-world&#34;&gt;MTU in the real world&lt;/h2&gt;
&lt;p&gt;So what&amp;rsquo;s a reasonable maximum packet size?&lt;/p&gt;
&lt;p&gt;On the Internet today (2016, IPv4) the real-world MTU is 1500 bytes.&lt;/p&gt;
&lt;p&gt;Give or take a few bytes for UDP/IP packet header and you&amp;rsquo;ll find that the typical number before packets start to get dropped or fragmentedÂ is somewhere around 1472.&lt;/p&gt;
&lt;p&gt;You can try this out for yourself by running this command on MacOS X:&lt;/p&gt;
&lt;pre&gt;ping -g 56 -G 1500 -h 10 -D 8.8.4.4&lt;/pre&gt;
&lt;p&gt;On my machine it conks out around just below 1500 bytes as expected:&lt;/p&gt;
&lt;pre&gt;1404 bytes from 8.8.4.4: icmp_seq=134 ttl=56 time=11.945 ms
1414 bytes from 8.8.4.4: icmp_seq=135 ttl=56 time=11.964 ms
1424 bytes from 8.8.4.4: icmp_seq=136 ttl=56 time=13.492 ms
1434 bytes from 8.8.4.4: icmp_seq=137 ttl=56 time=13.652 ms
1444 bytes from 8.8.4.4: icmp_seq=138 ttl=56 time=133.241 ms
1454 bytes from 8.8.4.4: icmp_seq=139 ttl=56 time=17.463 ms
1464 bytes from 8.8.4.4: icmp_seq=140 ttl=56 time=12.307 ms
1474 bytes from 8.8.4.4: icmp_seq=141 ttl=56 time=11.987 ms
ping: sendto: Message too long
ping: sendto: Message too long
Request timeout for icmp_seq 142&lt;/pre&gt;
&lt;p&gt;Why 1500? That&amp;rsquo;s the default MTU for MacOS X. It&amp;rsquo;s also the default MTU on Windows. So now we have an upper bound for your packet size assuming you actually care about packets getting through to Windows and Mac boxes without IP level fragmentation or a chance of being dropped:Â &lt;strong&gt;1472 bytes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s the lower bound? Unfortunately for the routers in between your computer and the destination the IPv4 standard says &lt;strong&gt;576&lt;/strong&gt;. Does this mean we have to limit our packets to 400 bytes or less? In practice, not really.&lt;/p&gt;
&lt;p&gt;MacOS X lets me set MTU values in range 1280 to 1500 so considering packet header overhead, my first guess for a conservative lower bound on the IPv4 Internet today would be &lt;strong&gt;1200 bytes&lt;/strong&gt;. Moving forward, in IPv6 this is also a good value, as any packet of 1280 bytes or less is guaranteed to get passed on without IP level fragmentation.&lt;/p&gt;
&lt;p&gt;This lines up with numbers that I&amp;rsquo;ve seen throughoutÂ my career. In my experience games rarely try anything complicated like attempting to discover path MTU, they just assume a reasonably conservative MTU and roll with that, something like 1000 to 1200 bytes of payload data.Â If a packet larger than this needs to be sent, it&amp;rsquo;s split up into fragments by the game protocol and re-assembled on the other side.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s &lt;em&gt;exactly&lt;/em&gt; what I&amp;rsquo;m going to show you how to do in this article.&lt;/p&gt;
&lt;h2 id=&#34;fragment-packet-structure&#34;&gt;Fragment Packet Structure&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s get started with implementation.&lt;/p&gt;
&lt;p&gt;The first thing we need to decide is how we&amp;rsquo;re going to represent fragment packetsÂ over the network so they are distinct from non-fragmented packets.&lt;/p&gt;
&lt;p&gt;Ideally, we would like fragmented and non-fragmented packets to be compatible with the existing packet structure we&amp;rsquo;ve already built, with as little overhead as possible in the common case when we are sending packets smaller than MTU.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the packet structure from the previous article:&lt;/p&gt;
&lt;pre&gt;
&lt;del&gt;[protocol id] (64 bits)&lt;/del&gt; // not actually sent, but used to calc crc32 
[crc32] (32 bits) 
[packet type] (2 bits for 3 distinct packet types)
(variable length packet data according to packet type) 
[end of packet serialize check] (32 bits)
&lt;/pre&gt;
&lt;p&gt;In our protocol we have three packet types: A, B and C.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make one of theseÂ packet types generate really large packets:&lt;/p&gt;
&lt;pre&gt;
static const int MaxItems = 4096 * 4;

struct TestPacketB : public Packet
{
    int numItems;
    int items[MaxItems];

    TestPacketB() : Packet( TEST_PACKET_B )
    {
        numItems = random_int( 0, MaxItems );
        for ( int i = 0; i &amp;lt; numItems; ++i )
            items[i] = random_int( -100, +100 );
    }

    template &amp;lt;typename Stream&amp;gt; bool Serialize( Stream &amp;amp; stream )
    {
        serialize_int( stream, numItems, 0, MaxItems );
        for ( int i = 0; i &amp;lt; numItems; ++i )
        {
            serialize_int( stream, items[i], -100, +100 );
        }
        return true;
    }
};
&lt;/pre&gt;
&lt;p&gt;This may seem somewhat contrivedÂ but these situations really do occur. For example, if you have a strategy where you send all un-acked events from server to client and you hit a burst of packet loss, you can easily end up withÂ packets larger than MTU, even though yourÂ average packet size is quite small.&lt;/p&gt;
&lt;p&gt;Another common case is delta encoded snapshots in a first person shooter. Here packet size is proportional toÂ the amount of state changed betweenÂ the baseline and current snapshots for each client.Â If there are a lot of differences between the snapshots the delta packet is large and there&amp;rsquo;s nothing you can do about it except break it up into fragments and re-assemble them on the other side.&lt;/p&gt;
&lt;p&gt;Getting back to packet structure. It&amp;rsquo;s fairly common to add a sequence number at the header of each packet. This is just a packet number that increases with each packet sent. I like to use 16 bits for sequence numbersÂ even though they wrap around in about 15 minutes @ 60 packets-per-second, because it&amp;rsquo;s extremely unlikely that a packet will be delivered 15 minutes late.&lt;/p&gt;
&lt;p&gt;Sequence numbers are useful for a bunch of things like acks, reliability and detecting and discarding out of order packets. In our case, we&amp;rsquo;re going to use the sequence number to identify which packet a fragment belongs to:&lt;/p&gt;
&lt;pre&gt;
&lt;del&gt;[protocol id] (64 bits)&lt;/del&gt;   // not actually sent, but used to calc crc32
[crc32] (32 bits)
&lt;strong&gt;[sequence] (16 bits)&lt;/strong&gt;
[packet type] (2 bits)
(variable length packet data according to packet type)
[end of packet serialize check] (32 bits)
&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s the interesting part. Sure we could just add a bit &lt;strong&gt;is_fragment&lt;/strong&gt; to the header,Â but then in the common case of non-fragmented packets you&amp;rsquo;re wasting one bit that is always set to zero.&lt;/p&gt;
&lt;p&gt;What I do instead is add a special fragment packet type:&lt;/p&gt;
&lt;pre&gt;
enum TestPacketTypes
{
    PACKET_FRAGMENT = 0,     // RESERVED 
    TEST_PACKET_A,
    TEST_PACKET_B,
    TEST_PACKET_C,
    TEST_PACKET_NUM_TYPES
};
&lt;/pre&gt;
&lt;p&gt;And it just happens to be &lt;em&gt;free&lt;/em&gt; because four packet typesÂ fit into 2 bits. Now when a packet is read, if the packet type is zero we know it&amp;rsquo;s a fragment packet, otherwise we run through the ordinary, non-fragmented read packet codepath.&lt;/p&gt;
&lt;p&gt;Lets design what this fragment packet looks like.Â We&amp;rsquo;ll allow a maximum of 256 fragments per-packet and have a fragment size of 1024 bytes. This gives a maximum packet size of 256k that we can send through this system, which should be enough for anybody, but please don&amp;rsquo;t quote me on this.&lt;/p&gt;
&lt;p&gt;With a small fixed size header, UDP header and IP header a fragment packet be well under the conservative MTU value of 1200. Plus, with 256 max fragments per-packet we can represent a fragment id in the range [0,255] and the total number of fragments per-packet [1,256]Â with 8 bits.&lt;/p&gt;
&lt;pre&gt;
&lt;del&gt;[protocol id] (32 bits)&lt;/del&gt;   // not actually sent, but used to calc crc32
[crc32] (32 bits)
[sequence] (16 bits)
[packet type = 0] (2 bits)
&lt;strong&gt;[fragment id] (8 bits)
[num fragments] (8 bits)
[pad zero bits to nearest byte index]
&amp;lt;fragment data&amp;gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;Notice thatÂ we pad bits up to the next byte beforeÂ writing out the fragment data.Â Why do this? Two reasons: 1)Â it&amp;rsquo;s faster to copy fragment data into the packet via memcpy than bitpacking each byte, and 2) we can now save a small amount of bandwidth by inferring the fragment size by subtracting the start of the fragment data from the total size of the packet.&lt;/p&gt;
&lt;h2 id=&#34;sending-packetfragments&#34;&gt;Sending PacketÂ Fragments&lt;/h2&gt;
&lt;p&gt;Sending packet fragments is &lt;em&gt;easy&lt;/em&gt;. For any packet larger than conservative MTU, simply calculate how many 1024 byte fragments it needs to be split into, and send those fragment packets over the network. Fire and forget!&lt;/p&gt;
&lt;p&gt;One consequenceÂ of this is that ifÂ &lt;em&gt;any&lt;/em&gt; fragment of that packet is lost then theÂ entire packet is lost. It follows that if you have packet loss then sendingÂ a 256k packet as 256 fragments is not a very good idea, because the probability of dropping a packetÂ increases significantly as the number of fragments increases. Not quite linearly, but in an interesting way that you can read more about &lt;a href=&#34;http://www.fourmilab.ch/rpkp/experiments/statistics.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In short, to calculate the probability of losing a packet, you must calculate the probability of all fragments being delivered successfully and subtract that from one, giving you the probability that at least one fragment was dropped.&lt;/p&gt;
&lt;pre&gt;
1 - probability_of_fragment_being_delivered ^Â num_fragments
&lt;/pre&gt;
&lt;p&gt;For example, if we send aÂ non-fragmented packet over the network with 1% packet loss, there is naturally a 1/100 chance the packet will be dropped.&lt;/p&gt;
&lt;p&gt;As the number of fragments increase, packet loss is amplified:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Two fragments:Â 1 - (99/100) ^ 2 = &lt;strong&gt;2%&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Ten fragments:Â 1 - (99/100) ^ 10 =Â &lt;strong&gt;9.5%&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;100 fragments:Â 1 - (99/100) ^ 100 = &lt;strong&gt;63.4%&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;256 fragments:Â 1 - (99/100) ^ 256 = &lt;strong&gt;92.4%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I recommend you take it easy with the number of fragments. It&amp;rsquo;s best to use this strategy only for packets in the 2-4 fragment range, and only for time critical data that doesn&amp;rsquo;t matter too much if it gets dropped. It&amp;rsquo;s &lt;em&gt;definitely not&lt;/em&gt; a good idea to fire down a bunch of reliable-ordered events in a huge packet and rely on packet fragmentation and reassembly to save your ass.&lt;/p&gt;
&lt;p&gt;Another typical use case for large packets is whenÂ a client initially joins a game. Here you usually want to send a large block of data down reliably to that client, for example, representing the initial state of the world for late join. Whatever you do,Â don&amp;rsquo;t send that block of data down using the fragmentation and re-assembly technique in this article.&lt;/p&gt;
&lt;p&gt;Instead, check out the technique inÂ &lt;a href=&#34;https://gafferongames.com/post/sending-large-blocks-of-data.html&#34;&gt;next article&lt;/a&gt;Â which handles packet loss by resending fragments until they are all received.&lt;/p&gt;
&lt;h2 id=&#34;receiving-packet-fragments&#34;&gt;Receiving Packet Fragments&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s time to implement the code that receives and processed packet fragments. This is a bit tricky because we have to be particularly careful of somebody trying to attack us with malicious packets.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s aÂ list of all the ways I can think of to attack the protocol:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Try to send out of bound fragments ids trying to get you to crash memory. eg: send fragments [0,255] in a packet that has just two fragments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send packet n with some maximum fragment count of say 2, and then send more fragment packets belonging to the same packet n butÂ with maximum fragments of 256 hoping that you didn&amp;rsquo;t realize I widened the maximum number of fragments in the packet after the first one you received, and you trash memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send really large fragment packets with fragment data larger than 1k hoping to get you to trash memory as you try to copy that fragment data into the data structure, or blow memory budget trying to allocate fragments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continually send fragments of maximum size (256/256 fragments) in hope that itÂ I could make you allocate a bunch of memory and crash you out. Lets say you have a sliding window of 256 packets, 256 fragments per-packet max, and each fragment is 1k. That&amp;rsquo;sÂ 64 mb per-client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can I fragment the heap with a bunch of funny sized fragment packets sent over and over? Perhaps the server shares a common allocator across clients and I can make allocations fail for other clients in the game because the heap becomes fragmented.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from these concerns, implementation is reasonably straightforward: store received fragments somewhere and when all fragments arrive for a packet, reassemble them into the original packet and return that to the user.&lt;/p&gt;
&lt;h2 id=&#34;data-structure-on-receiver-side&#34;&gt;Data Structure on Receiver Side&lt;/h2&gt;
&lt;p&gt;The first thing we need is some way to store fragments before they are reassembled. My favorite data structure is something I call a &lt;em&gt;sequence buffer&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
const int MaxEntries = 256;

struct SequenceBuffer
{
    uint32_t sequence[MaxEntries];
    Entry entries[MaxEntries];
};
&lt;/pre&gt;
&lt;p&gt;Indexing into the arrays is performed with modulo arithmetic, giving us a fast O(1) lookup of entries by sequence number:&lt;/p&gt;
&lt;pre&gt;
const int index = sequence % MaxEntries;
&lt;/pre&gt;
&lt;p&gt;A sentinel value of 0xFFFFFFFF is used to represent empty entries. This value cannot possibly occur with 16 bit sequence numbers, thus providing us with a fast test to see if an entry exists for a given sequence number, without an additional branch to test if that entry exists.&lt;/p&gt;
&lt;p&gt;This data structure is used as follows. When the first fragment of a new packet comes in, the sequence number is mapped to an entry in the sequence buffer. If an entry doesn&amp;rsquo;t exist, it&amp;rsquo;s added and the fragment data is stored in there, along with information about the fragment, eg. how many fragments there are, how many fragments have been received so far, and so on.&lt;/p&gt;
&lt;p&gt;Each time a new fragment arrives, it looks up the entry by the packet sequence number. When an entry already exists, the fragment data is stored and number of fragments received is incremented. Eventually, once the number of fragments received matches the number of fragments in the packet, the packet is reassembled and delivered to the user.&lt;/p&gt;
&lt;p&gt;Since it&amp;rsquo;s possible for old entries to stick around (potentially with allocated blocks), great care must be taken to clean up any stale entries when inserting new entries in the sequence buffer. These stale entries correspond to packets that didn&amp;rsquo;t receive all fragments.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s basically it at a high level. For further details on this approach please refer to the example source code for this article.Â &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/gafferongames&#34;&gt;Click here to get the example source code for this article series&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;test-driven-development&#34;&gt;Test Driven Development&lt;/h2&gt;
&lt;p&gt;One thing I&amp;rsquo;d like to close this article out on.&lt;/p&gt;
&lt;p&gt;Writing a custom UDP network protocol is &lt;em&gt;hard&lt;/em&gt;. It&amp;rsquo;s so hard that even though I&amp;rsquo;ve done this from scratch at least 10 times, each time I still manage to fuck it up in a new and exciting ways. You&amp;rsquo;d think eventually I&amp;rsquo;d learn, but this stuff is complicated. You can&amp;rsquo;t just write low-level netcode and expect it to just work.&lt;/p&gt;
&lt;p&gt;YouÂ have to test it!&lt;/p&gt;
&lt;p&gt;My strategy when testing low-level netcode is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code defensively. Assert everywhere. These asserts will fire and they&amp;rsquo;ll be important clues you need when something goes wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add functional testsÂ and make sure stuff is working as you are writing it. Put your code through its paces at a basic level as you write it and make sure it&amp;rsquo;s working as you build it up. Think hard about the essential cases that need to be property handled and add tests that cover them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But just adding a bunch of functional tests is not enough. There are of course cases you didn&amp;rsquo;t think of! Now you have to get really mean. I call this soak testing and I&amp;rsquo;ve never, not even once, have coded a network protocol that hasn&amp;rsquo;t subsequently had problems found in it by soak testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When soak testingÂ justÂ loop forever and just do a mix of random stuff that puts your system through its paces, eg. random length packets in this case with a huge amount of packet loss, out of order and duplicates through a packet simulator. Your soak test passes when it runs overnight and doesn&amp;rsquo;t hang or assert.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you find anything wrong with soak testing. You may need to go back and add detailed logs to the soak test to work out how you got to the failure case. Once you know what&amp;rsquo;s going on, stop. Don&amp;rsquo;t fix it immediately and just run the soak test again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead,Â add a unit test that reproduces that problem you are trying to fix, verify your test reproduces the problem, and that it problem goes away with your fix. Only after this, go back to the soak test and make sure they run overnight. This way the unit tests document the correct behavior of your system and can quickly be run in future to make sure you don&amp;rsquo;t break this thing moving forward when you make other changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a bunch of logs. High level errors, info asserts showing an overview of what is going on, but also low-level warnings and debug logs that show what went wrong after the fact. You&amp;rsquo;re going to need these logs to diagnose issues that don&amp;rsquo;t occur on your machine. Make sure the log level can be adjusted dynamically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement network simulators and make sure code handles the worst possible network conditions imaginable. 99% packet loss, 10 seconds of latency and +/- several seconds of jitter. Again, you&amp;rsquo;ll be surprised how much this uncovers. Testing is the time where you want to uncover and fix issues with bad network conditions, not the night before your open beta.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement fuzz tests where appropriate to make sure your protocol doesn&amp;rsquo;t crash when processing random packets. Leave fuzz tests running overnight to feel confident that your code is reasonably secure against malicious packets and doesn&amp;rsquo;t crash.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Surprisingly, I&amp;rsquo;ve consistently found issues that only show up when I loop the set of unit tests over and over, perhaps these issues are caused by different random numbers in tests, especially with the network simulator being driven by random numbers. This is a great way to take a rare test that fails once every few days and make it fail every time. So before you congratulate yourself on your tests passing 100%, add a mode where your unit tests can be looped easily, to uncover such errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test simultaneously on multiple platforms. I&amp;rsquo;ve never written a low-level library that worked first time on MacOS, Windows and Linux. There are always interesting compiler specific issues and crashes. Test on multiple platforms as you develop, otherwise it&amp;rsquo;s pretty painful fixing all these at the end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think about how people can attack the protocol. Implement code to defend against these attacks. Add functional tests that mimic these attacks and make sure that your code handles them correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is my process and it seems to work pretty well. If you are writing a low-level network protocol, the rest of your game depends on this code working correctly. You need to be absolutely sure it works before you build on it, otherwise it&amp;rsquo;s basically a stack of cards.&lt;/p&gt;
&lt;p&gt;In my experience, game neworking is hard enough without having suspicions that that your low-level network protocolÂ has bugs that only show up under extreme network conditions. That&amp;rsquo;s exactly where you need to be able to trust your code works correctly. &lt;strong&gt;So test it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE&lt;/strong&gt;: &lt;a href=&#34;https://gafferongames.com/post/sending_large_blocks_of_data/&#34;&gt;Sending Large Blocks of Data&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Serialization Strategies</title>
      <link>https://gafferongames.com/post/serialization_strategies/</link>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/serialization_strategies/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, Iâm &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/building-a-game-network-protocol/&#34;&gt;Building a Game Network Protocol&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/reading_and_writing_packets/&#34;&gt;previous article&lt;/a&gt;, we created a bitpacker but it required manual checking to make sure reading a packet from the network is safe. This is a real problem because the stakes are particularly high - a single missed check creates a vulnerability that an attacker can use to crash your server.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;re going to transform the bitpacker into a system where this checking is &lt;em&gt;automatic&lt;/em&gt;. We&amp;rsquo;re going to do this with minimal runtime overhead, and in such a way that we don&amp;rsquo;t have to code separate read and write functions, performing both read and write with a single function.&lt;/p&gt;
&lt;p&gt;This is called a &lt;em&gt;serialize function&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;serializing-bits&#34;&gt;Serializing Bits&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with the goal. Here&amp;rsquo;s where we want to end up:&lt;/p&gt;
&lt;pre&gt;
struct PacketA
{
    int x,y,z;

    template &amp;lt;typename Stream&amp;gt; bool Serialize( Stream &amp;amp; stream )
    {
        serialize_bits( stream, x, 32 );
        serialize_bits( stream, y, 32 );
        serialize_bits( stream, z, 32 );
        return true;
    }
};
&lt;/pre&gt;
&lt;p&gt;Above you can see a simple serialize function. We serialize three integer variables x,y,z with 32 bits each.&lt;/p&gt;
&lt;pre&gt;
struct PacketB
{
    int numElements;
    int elements[MaxElements];

    template &amp;lt;typename Stream&amp;gt; bool Serialize( Stream &amp;amp; stream )
    {
        serialize_int( stream, numElements, 0, MaxElements );
        for ( int i = 0; i &amp;lt; numElements; ++i )
        {
            serialize_bits( buffer, elements[i], 32 );
        }
        return true;
    }
};
&lt;/pre&gt;
&lt;p&gt;And now something more complicated. We serialize a variable length array, making sure that the array length is in the range [0,MaxElements].&lt;/p&gt;
&lt;p&gt;Next, we serialize a rigid body with an simple optimization while it&amp;rsquo;s at rest, serializing only one bit in place of linear and angular velocity:&lt;/p&gt;
&lt;pre&gt;
struct RigidBody
{
    vec3f position;
    quat4f orientation;
    vec3f linear_velocity;
    vec3f angular_velocity;

    template &amp;lt;typename Stream&amp;gt; bool Serialize( Stream &amp;amp; stream )
    {
        serialize_vector( stream, position );
        serialize_quaternion( stream, orientation );
        bool at_rest = Stream::IsWriting ? ( velocity.length() == 0 ) : 1;
        serialize_bool( stream, at_rest );
        if ( !at_rest )
        {
            serialize_vector( stream, linear_velocity );
            serialize_vector( stream, angular_velocity );
        }
        else if ( Stream::IsReading )
        {
            linear_velocity = vec3f(0,0,0);
            angular_velocity = vec3f(0,0,0);
        }
        return true;
    }
};
&lt;/pre&gt;
&lt;p&gt;Notice how we&amp;rsquo;re able to branch on Stream::IsWriting and Stream::IsReading to write code for each case. These branches are removed by the compiler when the specialized read and write serialize functions are generated.&lt;/p&gt;
&lt;p&gt;As you can see, serialize functions are flexible and expressive. They&amp;rsquo;re also &lt;em&gt;safe&lt;/em&gt;, with each &lt;em&gt;&lt;em&gt;serialize&lt;/em&gt;*&lt;/em&gt;_ call performing checks and aborting read if anything is wrong (eg. a value out of range, going past the end of the buffer). Most importantly, this checking is automatic, &lt;em&gt;so you can&amp;rsquo;t forget to do it!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;implementation-in-c&#34;&gt;Implementation in C++&lt;/h2&gt;
&lt;p&gt;The trick to making this all work is to create two stream classes that share the same interface: &lt;strong&gt;ReadStream&lt;/strong&gt; and &lt;strong&gt;WriteStream&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The write stream implementation &lt;em&gt;writes values&lt;/em&gt; using the bitpacker:&lt;/p&gt;
&lt;pre&gt;
class WriteStream
{
public:

    enum { IsWriting = 1 };
    enum { IsReading = 0 };

    WriteStream( uint8_t * buffer, int bytes ) : m_writer( buffer, bytes ) {}

    bool SerializeInteger( int32_t value, int32_t min, int32_t max )
    {
        assert( min &lt; max );
        assert( value &gt;= min );
        assert( value &lt;= max );
        const int bits = bits_required( min, max );
        uint32_t unsigned_value = value - min;
        m_writer.WriteBits( unsigned_value, bits );
        return true;
    }

    // ...

private:

    BitWriter m_writer;
};
&lt;/pre&gt;
&lt;p&gt;And the read stream implementation &lt;em&gt;reads values in&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
class ReadStream
{
public:

    enum { IsWriting = 0 };
    enum { IsReading = 1 };

    ReadStream( const uint8_t * buffer, int bytes ) : m_reader( buffer, bytes ) {}

    bool SerializeInteger( int32_t &amp; value, int32_t min, int32_t max )
    {
        assert( min &lt; max );
        const int bits = bits_required( min, max );
        if ( m_reader.WouldReadPastEnd( bits ) )
        {
            return false;
        }
        uint32_t unsigned_value = m_reader.ReadBits( bits );
        value = (int32_t) unsigned_value + min;
        return true;
    }

    // ...

private:

    BitReader m_reader;
};
&lt;/pre&gt;
&lt;p&gt;With the magic of C++ templates, we leave it up to the compiler to specialize the serialize function to the stream class passed in, producing optimized read and write functions.&lt;/p&gt;
&lt;p&gt;To handle safety &lt;em&gt;&lt;em&gt;serialize&lt;/em&gt;*&lt;/em&gt;_ calls are not actually functions at all. They&amp;rsquo;re actually macros that return false on error, thus unwinding the stack in case of error, without the need for exceptions.&lt;/p&gt;
&lt;p&gt;For example, this macro serializes an integer in a given range:&lt;/p&gt;
&lt;pre&gt;
#define serialize_int( stream, value, min, max )                    \
    do                                                              \
    {                                                               \
        assert( min &amp;lt; max );                                        \
        int32_t int32_value;                                        \
        if ( Stream::IsWriting )                                    \
        {                                                           \
            assert( value &amp;gt;= min );                                 \
            assert( value &amp;lt;= max );                                 \
            int32_value = (int32_t) value;                          \
        }                                                           \
        if ( !stream.SerializeInteger( int32_value, min, max ) )    \
        {                                                           \
            return false;                                           \
        }                                                           \
        if ( Stream::IsReading )                                    \
        {                                                           \
            value = int32_value;                                    \
            if ( value &amp;lt; min || value &amp;gt; max )                       \
            {                                                       \
                return false;                                       \
            }                                                       \
        }                                                           \
     } while (0)
&lt;/pre&gt;
&lt;p&gt;If a value read in from the network is outside the expected range, or we read past the end of the buffer, the packet read is aborted.&lt;/p&gt;
&lt;h2 id=&#34;serializing-floating-point-values&#34;&gt;Serializing Floating Point Values&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re used to thinking about floating point numbers as being different to integers, but in memory they&amp;rsquo;reÂ just a 32 bit value like any other.&lt;/p&gt;
&lt;p&gt;The C++ language lets usÂ work with this fundamental property, allowing us to directly access the bits of a float value as if it were an integer:&lt;/p&gt;
&lt;pre&gt;
union FloatInt
{
    float float_value;
    uint32_t int_value;
};

FloatInt tmp;
tmp.float_value = 10.0f;
printf( &#34;float value as an integer: %x\n&#34;, tmp.int_value );
&lt;/pre&gt;
&lt;p&gt;You may prefer to do this with an aliased uint32_t* pointer, but this breaks with GCCÂ -O2. Friends of mine point out that the only &lt;em&gt;truly standard way&lt;/em&gt; to get the float as an integer is to cast a pointer to the float value to char* and reconstruct the integer from the bytes valuesÂ accessed through the char pointer.&lt;/p&gt;
&lt;p&gt;Meanwhile in the past 5 years I&amp;rsquo;ve had no problems in the field with the union trick. Here&amp;rsquo;s how IÂ use it to serialize an uncompressed float value:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;typename Stream&amp;gt; 
bool serialize_float_internal( Stream &amp;amp; stream, 
                               float &amp;amp; value )
{
    union FloatInt
    {
        float float_value;
        uint32_t int_value;
    };
    FloatInt tmp;
    if ( Stream::IsWriting )
    {
        tmp.float_value = value;
    }
    bool result = stream.SerializeBits( tmp.int_value, 32 );
    if ( Stream::IsReading )
    {
        value = tmp.float_value;
    }
    return result;
}
&lt;/pre&gt;
&lt;p&gt;This is of course wrapped with a &lt;strong&gt;serialize_float&lt;/strong&gt; macro for error checking:&lt;/p&gt;
&lt;pre&gt;
#define serialize_float( stream, value )                             \
  do                                                                 \
  {                                                                  \
      if ( !serialize_float_internal( stream, value ) )              \
      {                                                              \
          return false;                                              \
      }
  } while (0)
&lt;/pre&gt;
&lt;p&gt;We can now transmit full precision floating point values over the network.&lt;/p&gt;
&lt;p&gt;But what about situations where you don&amp;rsquo;t need full precision? What about a floating point value in the range [0,10] with an acceptable precision of 0.01? Is there a way to send this over the network using less bits?&lt;/p&gt;
&lt;p&gt;Yes there is. The trick is to simply divide by 0.01 to get an integer in the range [0,1000] and send that value over the network. On the other side, convert back to a float by multiplying by 0.01.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a general purpose implementation of this basic idea:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;typename Stream&amp;gt; 
bool serialize_compressed_float_internal( Stream &amp;amp; stream, 
                                          float &amp;amp; value, 
                                          float min, 
                                          float max, 
                                          float res )
{
    const float delta = max - min;
    const float values = delta / res;
    const uint32_t maxIntegerValue = (uint32_t) ceil( values );
    const int bits = bits_required( 0, maxIntegerValue );
    uint32_t integerValue = 0; 
    if ( Stream::IsWriting )
    {
        float normalizedValue = 
            clamp( ( value - min ) / delta, 0.0f, 1.0f );
        integerValue = (uint32_t) floor( normalizedValue * 
                                         maxIntegerValue + 0.5f );
    }
    if ( !stream.SerializeBits( integerValue, bits ) )
    {
        return false;
    }
    if ( Stream::IsReading )
    {
        const float normalizedValue = 
            integerValue / float( maxIntegerValue );
        value = normalizedValue * delta + min;
    }
    return true;
}
&lt;/pre&gt;
&lt;p&gt;Of course we need error checking, so we wrap this with a macro:&lt;/p&gt;
&lt;pre&gt;
#define serialize_compressed_float( stream, value, min, max )        \
  do                                                                 \
  {                                                                  \
    if ( !serialize_float_internal( stream, value, min, max ) )      \
    {                                                                \
        return false;                                                \
    }                                                                \
  } while (0)
&lt;/pre&gt;
&lt;p&gt;And now the basic interface is complete. We can serialize both compressed and uncompressed floating point values over the network.&lt;/p&gt;
&lt;h1 id=&#34;serializing-vectors-and-quaternions&#34;&gt;Serializing Vectors and Quaternions&lt;/h1&gt;
&lt;p&gt;Once you can serialize float values it&amp;rsquo;s trivial to serializeÂ vectors over the network. I use a modified version of the &lt;a href=&#34;https://github.com/scoopr/vectorial&#34;&gt;vectorial library&lt;/a&gt; in my projects andÂ implement serialization for its vector type like this:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;typename Stream&amp;gt; 
bool serialize_vector_internal( Stream &amp;amp; stream, 
                                vec3f &amp;amp; vector )
{
    float values[3];
    if ( Stream::IsWriting )
    {
        vector.store( values );
    }
    serialize_float( stream, values[0] );
    serialize_float( stream, values[1] );
    serialize_float( stream, values[2] );
    if ( Stream::IsReading )
    {
        vector.load( values );
    }
    return true;
}

#define serialize_vector( stream, value )                       \
 do                                                             \
 {                                                              \
     if ( !serialize_vector_internal( stream, value ) )         \
     {                                                          \
         return false;                                          \
     }                                                          \
 }                                                              \
 while(0)
&lt;/pre&gt;
&lt;p&gt;If your vector is bounded in some range, then you can compress it:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;typename Stream&amp;gt; 
bool serialize_compressed_vector_internal( Stream &amp;amp; stream, 
                                           vec3f &amp;amp; vector,
                                           float min,
                                           float max,
                                           float res )
{
    float values[3];
    if ( Stream::IsWriting )
    {
        vector.store( values );
    }
    serialize_compressed_float( stream, values[0], min, max, res );
    serialize_compressed_float( stream, values[1], min, max, res );
    serialize_compressed_float( stream, values[2], min, max, res );
    if ( Stream::IsReading )
    {
        vector.load( values );
    }
    return true;
}
&lt;/pre&gt;
&lt;p&gt;Notice how we are able to build more complex serialization using the primitives we&amp;rsquo;re already created. Using this approach you can easily extend the serialization to support anything you need.&lt;/p&gt;
&lt;h2 id=&#34;serializing-strings-and-arrays&#34;&gt;Serializing Strings and Arrays&lt;/h2&gt;
&lt;p&gt;What if you need to serialize a string over the network?&lt;/p&gt;
&lt;p&gt;Is it a good idea to send aÂ string over the network with null termination? Not really. You&amp;rsquo;re just asking for trouble! Instead, serialize the string as an array of bytes with the string length in front. Therefore, in order to send aÂ string over the network, we have to work out how to sendÂ an array of bytes.&lt;/p&gt;
&lt;p&gt;First observation. Why waste effort bitpacking an array of bytes into your bit stream just so they are randomly shifted by [0,7] bits? Why not align to byte so you can memcpy the array of bytes directly into the packet?&lt;/p&gt;
&lt;p&gt;To align a bitstream just work out your current bit index in the stream and how many bits of padding are needed until the current bit index divides evenly into 8, thenÂ insert that number of padding bits.Â &lt;/p&gt;
&lt;p&gt;For bonus points, pad up with zero bits to add entropy so that on read youÂ can verify that yes, you are reading a byte align and yes, it is indeed padded up with zero bits to the next whole byte bit index. If a non-zero bit is discovered in the padding, &lt;em&gt;abort serialize read and discard the packet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;sÂ my code toÂ align a bit stream to byte:&lt;/p&gt;
&lt;pre&gt;
void BitWriter::WriteAlign()
{
    const int remainderBits = m_bitsWritten % 8;
    if ( remainderBits != 0 )
    {
        uint32_t zero = 0;
        WriteBits( zero, 8 - remainderBits );
        assert( ( m_bitsWritten % 8 ) == 0 );
    }
}

bool BitReader::ReadAlign()
{
    const int remainderBits = m_bitsRead % 8;
    if ( remainderBits != 0 )
    {
        uint32_t value = ReadBits( 8 - remainderBits );
        assert( m_bitsRead % 8 == 0 );
        if ( value != 0 )
            return false;
    }
    return true;
}

#define serialize_align( stream )           \
  do                                        \
  {                                         \
      if ( !stream.SerializeAlign() )       \
          return false;                     \
  } while (0)
&lt;/pre&gt;
&lt;p&gt;Now we can align to byte prior to writing an array of bytes, letting us use memcpy for the bulk of the array data. The only wrinkle is because the bitpacker works at the word level, it&amp;rsquo;s necessary to have special handling for the head and tailÂ portions. Because of this, the code is quite complex and is omitted for brevity. You can find it in the &lt;a href=&#34;https://www.patreon.com/gafferongames&#34;&gt;sample code&lt;/a&gt; for this article.&lt;/p&gt;
&lt;p&gt;The end result of all this is a &lt;strong&gt;serialize_bytes&lt;/strong&gt; primitive that we can use to serialize a string as a lengthÂ followed by the string data, like so:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;typename Stream&amp;gt; 
bool serialize_string_internal( Stream &amp;amp; stream, 
                                char * string, 
                                int buffer_size )
{
    uint32_t length;
    if ( Stream::IsWriting )
    {
        length = strlen( string );
   Â     assert( length &amp;lt; buffer_size - 1 );
    }
    serialize_int( stream, length, 0, buffer_size - 1 );
    serialize_bytes( stream, (uint8_t*)string, length );
    if ( Stream::IsReading )
    {
        string[length] = &#39;\0&#39;;
    }
}

#define serialize_string( stream, string, buffer_size )              \
do                                                                   \
{                                                                    \
    if ( !serialize_string_internal( stream,                         \
                                     string,                         \
                                     buffer_size ) )                 \
    {                                                                \
        return false;                                                \
    }                                                                \
} while (0)
&lt;/pre&gt;
&lt;p&gt;This is an ideal string format because it lets us quickly reject malicious data, vs. having to scan through to the end of the packet searching for &lt;strong&gt;&amp;rsquo;\0&amp;rsquo;&lt;/strong&gt; before giving up. This is important because otherwise protocol level attacks could be crafted to degrade your server&amp;rsquo;s performance by making it do extra work.&lt;/p&gt;
&lt;h2 id=&#34;serializing-array-subsets&#34;&gt;Serializing Array Subsets&lt;/h2&gt;
&lt;p&gt;When implemeting a game network protocol, sooner or later you need to serialize an array of objects over the network. Perhaps the server needs to send object state down to the client, or there is an array of messages to be sent.&lt;/p&gt;
&lt;p&gt;ThisÂ is straightforward if you are sending &lt;em&gt;all&lt;/em&gt; objects in the array - just iterate across the array and serialize each object in turn. But what if you want to send a subset of the array?&lt;/p&gt;
&lt;p&gt;The simplest approach is to iterate across all objects in the array and serialize a bit per-object if that object is to be sent. If the value of the bit is 1 then the object data follows in the bit stream, otherwise it&amp;rsquo;s ommitted:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;typename Stream&amp;gt; 
bool serialize_scene_a( Stream &amp;amp; stream, Scene &amp;amp; scene )
{
    for ( int i = 0; i &amp;lt; MaxObjects; ++i )
    {
        serialize_bool( stream, scene.objects[i].send );
        if ( !scene.objects[i].send )
        {
            if ( Stream::IsReading )
            {
                memset( &amp;amp;scene.objects[i], 0, sizeof( Object ) );
            }
            continue;
        }
        serialize_object( stream, scene.objects[i] );
    }
    return true;
}
&lt;/pre&gt;
&lt;p&gt;This approach breaks down as the size of the array gets larger. For example, for an array size of size 4096, then 4096 / 8 = 512 bytes spent on skip bits. That&amp;rsquo;s not good. Can we switch it around so we take overhead propertional to the number of objects sent instead of the total number of objects in the array?&lt;/p&gt;
&lt;p&gt;We canÂ but now, we&amp;rsquo;ve done something interesting. We&amp;rsquo;re walking one set of objects in the serialize write (all objects in the array) and are walking over a different set of objects in the serialize read (subset of objects sent).&lt;/p&gt;
&lt;p&gt;At this point the unified serialize function concept starts to breaks down, and in my opinion, it&amp;rsquo;s best to separate the read and write back into separate functions, because they have so little in common:&lt;/p&gt;
&lt;pre&gt;
bool write_scene_b( WriteStream &amp;amp; stream, Scene &amp;amp; scene )
{
    int num_objects_sent = 0;
    for ( int i = 0; i &amp;lt; MaxObjects; ++i )
    {
        if ( scene.objects[i].send )
            num_objects_sent++;
    }
    write_int( stream, num_objects_sent, 0, MaxObjects );
    for ( int i = 0; i &amp;lt; MaxObjects; ++i )
    {
        if ( !scene.objects[i].send )
        {
            continue;
        }
        write_int( stream, i, 0, MaxObjects - 1 );
        write_object( stream, scene.objects[i] );
    }
    return true;
}

bool read_scene_b( ReadStream &amp;amp; stream, Scene &amp;amp; scene )
{
    memset( &amp;amp;scene, 0, sizeof( scene ) );
    int num_objects_sent; 
    read_int( stream, num_objects_sent, 0, MaxObjects );
    for ( int i = 0; i &amp;lt; num_objects_sent; ++i )
    {
        int index; 
        read_int( stream, index, 0, MaxObjects - 1 );
        read_object( stream, scene.objects[index] );
    }
    return true;
}
&lt;/pre&gt;
&lt;p&gt;One more point. The code above walks over the set of objects &lt;em&gt;twice&lt;/em&gt; on serialize write. Once to determine the number of changed objects and a second time to actually serialize the set of changed objects.Â Can we do it in one pass instead? Absolutely! You can use another trick, rather than serializing the # of objects in the array up front, use a &lt;em&gt;sentinel value&lt;/em&gt; to indicate the end of the array:&lt;/p&gt;
&lt;pre&gt;
bool write_scene_c( WriteStream &amp;amp; stream, Scene &amp;amp; scene )
{
    for ( int i = 0; i &amp;lt; MaxObjects; ++i )
    {
        if ( !scene.objects[i].send )
        {
            continue;
        }
        write_int( stream, i, 0, MaxObjects );
        write_object( stream, scene.objects[i] );
    }
    write_int( stream, MaxObjects, 0, MaxObjects );
    return true;
}

bool read_scene_c( ReadStream &amp;amp; stream, Scene &amp;amp; scene )
{
    memset( &amp;amp;scene, 0, sizeof( scene ) );
    while ( true )
    {
        int index; read_int( stream, index, 0, MaxObjects );
        if ( index == MaxObjects )
        {
            break;
        }
        read_object( stream, scene.objects[index] );
    }
    return true;
}
&lt;/pre&gt;
&lt;p&gt;The above technique works great if the objects sent are a small percentage of total objects. But what if a large number of objects are sent, lets say half of the 4000 objects in the scene. That&amp;rsquo;s 2000 object indices with each index costing 12 bits&amp;hellip; that&amp;rsquo;sÂ 24000 bits or 3000 bytes (almost 3k!) in your packet wasted on indexing.&lt;/p&gt;
&lt;p&gt;YouÂ can reduce this overhead by encoding each object index relative to the previous object index. Think about it, you&amp;rsquo;re walking from left to right along an array, so object indices start at 0 and go up to MaxObjects - 1. Statistically speaking, you&amp;rsquo;re quite likely to have objects that are close to each other and if the next index is +1 or even +10 or +30 from the previous one, on average, you&amp;rsquo;ll need quite a few less bits to representÂ that difference than an absolute index.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s one way to encode the object index as an integer relative to the previous object index, while spending less bits on statistically more likely values:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;typename Stream&amp;gt; 
bool serialize_object_index_internal( Stream &amp;amp; stream, 
                                      int &amp;amp; previous, 
                                      int &amp;amp; current )
{
    uint32_t difference;
    if ( Stream::IsWriting )
    {
        assert( previous &amp;lt; current );
        difference = current - previous;
        assert( difference &amp;gt; 0 );
    }

    // +1 (1 bit)
    bool plusOne;
    if ( Stream::IsWriting )
    {
       plusOne = difference == 1;
    }
    serialize_bool( stream, plusOne );
    if ( plusOne )
    {
        if ( Stream::IsReading )
        {
            current = previous + 1;
        }
        previous = current;
        return true;
    }

    // [+2,5] -&amp;gt; [0,3] (2 bits)
    bool twoBits;
    if ( Stream::IsWriting )
    {
        twoBits = difference &amp;lt;= 5;
    }
    serialize_bool( stream, twoBits );
    if ( twoBits )
    {
        serialize_int( stream, difference, 2, 5 );
        if ( Stream::IsReading )
        {
            current = previous + difference;
        }
        previous = current;
        return true;
    }

    // [6,13] -&amp;gt; [0,7] (3 bits)
    bool threeBits;
    if ( Stream::IsWriting )
    {
        threeBits = difference &amp;lt;= 13;
    }
    serialize_bool( stream, threeBits );
    if ( threeBits )
    {
        serialize_int( stream, difference, 6, 13 );
        if ( Stream::IsReading )
        {
            current = previous + difference;
        }
        previous = current;
        return true;
    }

    // [14,29] -&amp;gt; [0,15] (4 bits)
    bool fourBits;
    if ( Stream::IsWriting )
    {
        fourBits = difference &amp;lt;= 29;
    }
    serialize_bool( stream, fourBits );
    if ( fourBits )
    {
        serialize_int( stream, difference, 14, 29 );
        if ( Stream::IsReading )
        {
            current = previous + difference;
        }
        previous = current;
        return true;
    }

    // [30,61] -&amp;gt; [0,31] (5 bits)
    bool fiveBits;
    if ( Stream::IsWriting )
    {
        fiveBits = difference &amp;lt;= 61;
    }
    serialize_bool( stream, fiveBits );
    if ( fiveBits )
    {
        serialize_int( stream, difference, 30, 61 );
        if ( Stream::IsReading )
        {
            current = previous + difference;
        }
        previous = current;
        return true;
    }

    // [62,125] -&amp;gt; [0,63] (6 bits)
    bool sixBits;
    if ( Stream::IsWriting )
    {
        sixBits = difference &amp;lt;= 125;
    }
    serialize_bool( stream, sixBits );
    if ( sixBits )
    {
        serialize_int( stream, difference, 62, 125 );
        if ( Stream::IsReading )
        {
            current = previous + difference;
        }
        previous = current;
        return true;
    }

    // [126,MaxObjects+1] 
    serialize_int( stream, difference, 126, MaxObjects + 1 );
    if ( Stream::IsReading )
    {
        current = previous + difference;
    }
    previous = current;
    return true;
}

template &amp;lt;typename Stream&amp;gt; 
bool serialize_scene_d( Stream &amp;amp; stream, Scene &amp;amp; scene )
{
Â    int previous_index = -1;
    
    if ( Stream::IsWriting )
    {
        for ( int i = 0; i &amp;lt; MaxObjects; ++i )
        {
            if ( !scene.objects[i].send )
            {
                continue;
            }
            write_object_index( stream, previous_index, i );
            write_object( stream, scene.objects[i] );
        }
        write_object_index( stream, previous_index, MaxObjects );
    }
    else
    {
        while ( true )
        {
            int index; 
            read_object_index( stream, previous_index, index );
            if ( index == MaxObjects )
            {
                break;
            }
            read_object( stream, scene.objects[index] );
        }
    }
    return true;
}
&lt;/pre&gt;
&lt;p&gt;But what about the worst case? Won&amp;rsquo;t we spent more bits when indices are &amp;gt;= +126 apart than on an absolute index? Yes we do, but how many of these worst case indices fit in an array of size 4096? Just 32. It&amp;rsquo;s nothing to worry about.&lt;/p&gt;
&lt;h2 id=&#34;protocol-ids-crc32-and-serialization-checks&#34;&gt;Protocol IDs, CRC32 and Serialization Checks&lt;/h2&gt;
&lt;p&gt;We are nearly at the end of this article, and you can see by now that we are sending a completely unattributed binary stream. It&amp;rsquo;s essential that read and write match perfectly, which is of course why the serialize functions are so great, it&amp;rsquo;s hard to desync something when you unify read and write.&lt;/p&gt;
&lt;p&gt;But accidents happen, and when they do this system can seem like a stack of cards. What if you somehow desync read and write? How can you debug this? What if somebody tries to connect to your latest server code with an old version of your client?&lt;/p&gt;
&lt;p&gt;One technique to protect against this is to include a protocol id in your packet. For example, it could be a combination of a unique number for your game, plus the hash of your protocol version and a hash of your game data. Now if a packet comes in from an incompatible game version, it&amp;rsquo;s automatically discarded because the protocol ids don&amp;rsquo;t match:&lt;/p&gt;
&lt;pre&gt;
[protocol id] (64bits)
(packet data)
&lt;/pre&gt;
&lt;p&gt;The next level of protection is to pass a CRC32 over your packet and include that in the header.Â This lets you pick up corrupt packets (these do happen, remember that the IP checksum is just 16 bits&amp;hellip;). Now your packet header looks like this:&lt;/p&gt;
&lt;pre&gt;
[protocol id] (64bits)
[crc32] (32bits)
(packet data)
&lt;/pre&gt;
&lt;p&gt;At this point you may be wincing. Wait. I have to take 8+4 = 12 bytes of overhead per-packet just to implement my own checksum and protocol id? Well actually, &lt;em&gt;you don&amp;rsquo;t&lt;/em&gt;. You can take a leaf out of how IPv4 does their checksum, and make the protocol id a &lt;strong&gt;magical prefix&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This means you don&amp;rsquo;t actually send it, and rely on the fact that if the CRC32 is calculated as if the packet were prefixed by the protocol id, then the CRC32 will be incorrect if the sender does not have the same protocol id asÂ the receiver, thus saving 8 bytes per-packet:&lt;/p&gt;
&lt;pre&gt;
&lt;del&gt;[protocol id] (64bits)&lt;/del&gt;   // not actually sent, but used to calc crc32
[crc32] (32bits)
(packet data)
&lt;/pre&gt;
&lt;p&gt;One final technique, perhaps as much a check against programmer error on your part and malicious senders (although redundant once you encrypt and sign your packet) is the &lt;em&gt;serialization check&lt;/em&gt;. Basically, somewhere mid-packet, either before or after a complicated serialization section, just write out a known 32 bit integer value, and check that it reads back in on the other side with the same value. If the serialize check value is incorrectÂ &lt;em&gt;abort read and discard the packet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I like to do this between sections of my packet as I write them, so at least I know which part of my packet serialization has desynced read and write as I&amp;rsquo;m developing my protocol. Another cool trick I like to use is to always serialize a protocol check at the very end of the packet, to detect accidental packet truncation (which happens more often than you would think).&lt;/p&gt;
&lt;p&gt;Now the packet looks something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;del&gt;[protocol id] (64bits)&lt;/del&gt;   // not actually sent, but used to calc crc32
[crc32] (32bits)
(packet data)
[end of packet serialize check] (32 bits)
&lt;/pre&gt;
&lt;p&gt;This is great packet structure to use during development.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE&lt;/strong&gt;: &lt;a href=&#34;https://gafferongames.com/post/packet_fragmentation_and_reassembly/&#34;&gt;Packet Fragmentation and Reassembly&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Reading and Writing Packets</title>
      <link>https://gafferongames.com/post/reading_and_writing_packets/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/reading_and_writing_packets/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, Iâm &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/building-a-game-network-protocol/&#34;&gt;Building a Game Network Protocol&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this article we&amp;rsquo;re going to explore how AAA multiplayer games like first person shooters read and write packets. We&amp;rsquo;ll start with text based formats then move into binary hand-coded binary formats and bitpacking.&lt;/p&gt;
&lt;p&gt;At the end of this article and the next, you should understand exactly how to implement your own packet read and write the same way the pros do it.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Consider a web server. It listens forÂ requests, does some work asynchronously and sends responses back to clients. Itâs stateless and generally not real-time, although a fast response time is great. Web servers are most often IO bound.&lt;/p&gt;
&lt;p&gt;Game server are different. They&amp;rsquo;re a headless version of the game running in the cloud. As such they are stateful and CPU bound. The traffic patterns are different too. Instead of infrequent request/response from tens of thousands of clients, a game server has far fewer clients, but processes a continuous stream of input packets sent from each client 60 times per-second, and broadcasts out the state of the world to clients 10, 20 or even 60 times per-second.&lt;/p&gt;
&lt;p&gt;And this state is &lt;strong&gt;huge&lt;/strong&gt;. Thousands of objects with hundreds of properties each. Game network programmers spend a lot of their time optimizing exactly how this state is sent over the network with crazy bit-packing tricks, hand-coded binary formats and delta encoding.&lt;/p&gt;
&lt;p&gt;What would happen if we just encoded this world state as XML?&lt;/p&gt;
&lt;pre&gt;&amp;lt;world_update world_time=&#34;0.0&#34;&amp;gt;
  &amp;lt;object id=&#34;1&#34; class=&#34;player&#34;&amp;gt;
    &amp;lt;property name=&#34;position&#34; value=&#34;(0,0,0)&#34;&amp;lt;/property&amp;gt;
    &amp;lt;property name=&#34;orientation&#34; value=&#34;(1,0,0,0)&#34;&amp;lt;/property&amp;gt;
    &amp;lt;property name=&#34;velocity&#34; value=&#34;(10,0,0)&#34;&amp;lt;/property&amp;gt;
    &amp;lt;property name=&#34;health&#34; value=&#34;100&#34;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;property name=&#34;weapon&#34; value=&#34;110&#34;&amp;gt;&amp;lt;/property&amp;gt;
    ... 100s more properties per-object ...
 &amp;lt;/object&amp;gt;
 &amp;lt;object id=&#34;100&#34; class=&#34;grunt&#34;&amp;gt;
   &amp;lt;property name=&#34;position&#34; value=&#34;(100,100,0)&#34;&amp;lt;/property&amp;gt;
   &amp;lt;property name=&#34;health&#34; value=&#34;10&#34;&amp;lt;/property&amp;gt;
 &amp;lt;/object&amp;gt;
 &amp;lt;object id=&#34;110&#34; class=&#34;weapon&#34;&amp;gt;
   &amp;lt;property type=&#34;semi-automatic&#34;&amp;gt;&amp;lt;/property&amp;gt;
   &amp;lt;property ammo_in_clip=&#34;8&#34;&amp;gt;&amp;lt;/property&amp;gt;
   &amp;lt;property round_in_chamber=&#34;true&#34;&amp;gt;&amp;lt;/property&amp;gt;
 &amp;lt;/object&amp;gt;
 ... 1000s more objects ...
&amp;lt;/world_update&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Pretty verbose&amp;hellip; it&amp;rsquo;s hard to see how this would be practical for a large world.&lt;/p&gt;
&lt;p&gt;JSON is a bit more compact:&lt;/p&gt;
&lt;pre&gt;
{
  &#34;world_time&#34;: 0.0,
  &#34;objects&#34;: {
    1: {
      &#34;class&#34;: &#34;player&#34;,
      &#34;position&#34;: &#34;(0,0,0)&#34;,
      &#34;orientation&#34;: &#34;(1,0,0,0)&#34;,
      &#34;velocity&#34;: &#34;(10,0,0)&#34;,
      &#34;health&#34;: 100,
      &#34;weapon&#34;: 110
    }
    100: {
      &#34;class&#34;: &#34;grunt&#34;,
      &#34;position&#34;: &#34;(100,100,0)&#34;,
      &#34;health&#34;: 10
    }
    110: {
      &#34;class&#34;: &#34;weapon&#34;,
      &#34;type: &#34;semi-automatic&#34;
      &#34;ammo_in_clip&#34;: 8,
      &#34;round_in_chamber&#34;: 1 
    }
    // etc...
  }
}
&lt;/pre&gt;
&lt;p&gt;But it still suffers from the same problem: the description of the data is larger than the data itself. What if instead of fully describing the world state in each packet, we split it up into two parts?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A schema that describes the set of object classes and properties per-class, &lt;strong&gt;sent only once&lt;/strong&gt; when a client connects to the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data sent rapidly from server to client, &lt;strong&gt;which is encoded relative to the schema&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The schema could look something like this:&lt;/p&gt;
&lt;pre&gt;{
  &#34;classes&#34;: {
    0: &#34;player&#34; {
      &#34;properties&#34;: {
        0: {
          &#34;name&#34;: &#34;position&#34;,
          &#34;type&#34;: &#34;vec3f&#34;
        }
        1: {
          &#34;name&#34;: &#34;orientation&#34;,
          &#34;type&#34;: &#34;quat4f&#34;
        }
        2: {
          &#34;name&#34;: &#34;velocity&#34;,
          &#34;type&#34;: &#34;vec3f&#34;
        }
        3: {
          &#34;name&#34;: &#34;health&#34;,
          &#34;type&#34;: &#34;float&#34;
        }
        4: {
          &#34;name&#34;: &#34;weapon&#34;,
          &#34;type&#34;: &#34;object&#34;, 
        }
      }
    }
    1: &#34;grunt&#34;: {
      &#34;properties&#34;: {
        0: {
          &#34;name&#34;: &#34;position&#34;,
          &#34;type&#34;: &#34;vec3f&#34;
        }
        1: {
          &#34;name&#34;: &#34;health&#34;,
          &#34;type&#34;: &#34;float&#34;
        }
      }
    }
    2: &#34;weapon&#34;: {
      &#34;properties&#34;: {
        0: {
          &#34;name&#34;: &#34;type&#34;,
          &#34;type&#34;: &#34;enum&#34;,
          &#34;enum_values&#34;: [ &#34;revolver&#34;, &#34;semi-automatic&#34; ]
        }
        1: {
          &#34;name&#34;: &#34;ammo_in_clip&#34;,
          &#34;type&#34;: &#34;integer&#34;,
          &#34;range&#34;: &#34;0..9&#34;,
        }
        2: {
          &#34;name&#34;: &#34;round_in_chamber&#34;,
          &#34;type&#34;: &#34;integer&#34;,
          &#34;range&#34;: &#34;0..1&#34;
        }
      }
    }  
  }
}&lt;/pre&gt;
&lt;p&gt;The schema is quite big, but that&amp;rsquo;s beside the point. It&amp;rsquo;s sent only once, and now the clientÂ knows the set of classes in the game world and the number, name, type and range of properties per-class.&lt;/p&gt;
&lt;p&gt;With this knowledge we can make the rapidly sent portion of the world state much more compact:&lt;/p&gt;
&lt;pre&gt;
{
  &#34;world_time&#34;: 0.0,
  &#34;objects&#34;: {
    1: [0,&#34;(0,0,0)&#34;,&#34;(1,0,0,0)&#34;,&#34;(10,0,0)&#34;,100,110],
    100: [1,&#34;(100,100,0)&#34;,10],
    110: [2,1,8,1]
  }
}
&lt;/pre&gt;
&lt;p&gt;And we can compress it even further by switching to a custom text format:&lt;/p&gt;
&lt;pre&gt;
0.0
1:0,0,0,0,1,0,0,0,10,0,0,100,110
100:1,100,100,0,10
110:2,1,8,1
&lt;/pre&gt;
&lt;p&gt;As you can see, itâs much more about what you &lt;strong&gt;donât send&lt;/strong&gt; than what you do.&lt;/p&gt;
&lt;h2 id=&#34;the-inefficiencies-of-text&#34;&gt;The Inefficiencies of Text&lt;/h2&gt;
&lt;p&gt;Weâve made good progress on our text format so far, moving from a highly attributed stream that fully describes the data (more description than actual data) to an unattributed text format that&amp;rsquo;s an order of magnitude more efficient.&lt;/p&gt;
&lt;p&gt;But there are inherent inefficiencies when using text format for packets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We are most often sending data in the range &lt;strong&gt;A-Z&lt;/strong&gt;, &lt;strong&gt;a-z&lt;/strong&gt; and &lt;strong&gt;0-1&lt;/strong&gt;, plus a few other symbols. This wastes the remainder of the &lt;strong&gt;0-255&lt;/strong&gt; range for each character sent. From an information theory standpoint, this is an inefficient encoding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The text representation of integer values are in the general case much less efficient than the binary format. For example, in text format the worst case unsigned 32 bit integer &lt;strong&gt;4294967295&lt;/strong&gt; takes 10 bytes, but in binary format it takes just four.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In text, even the smallest numbers in &lt;strong&gt;0-9&lt;/strong&gt; range require at least one byte, but in binary, smaller values like &lt;strong&gt;0, 11, 31, 100&lt;/strong&gt; can be sent with fewer than 8 bits if we know their range ahead of time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If an integer value is negative, you have to spend a whole byte on &lt;strong&gt;&amp;rsquo;-&amp;rsquo;&lt;/strong&gt; to indicate that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floating point numbers waste one byte specifying the decimal point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The text representation of numerical values are variable length: &lt;strong&gt;â5â&lt;/strong&gt;, &lt;strong&gt;â12345â&lt;/strong&gt;, &lt;strong&gt;â3.141593â. &lt;/strong&gt;Because of thisÂ we need to spend one byte on a separator after each value so we know when it ends.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Newlines &lt;strong&gt;&amp;rsquo;\n&amp;rsquo;&lt;/strong&gt; or some other separator are required to distinguish between the set of variables belonging to one object and the next. When you have thousands of objects, this really adds up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, if we wish to optimize any further, it&amp;rsquo;s necessary to switch to a binary format.&lt;/p&gt;
&lt;h2 id=&#34;switching-to-a-binary-format&#34;&gt;Switching to a Binary Format&lt;/h2&gt;
&lt;p&gt;In the web world there are some really great libraries that read and write binary formats like &lt;a href=&#34;http://bjson.org&#34;&gt;BJSON&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt;, &lt;a href=&#34;https://google.github.io/flatbuffers/&#34;&gt;Flatbuffers&lt;/a&gt;, &lt;a href=&#34;https://thrift.apache.org&#34;&gt;Thrift&lt;/a&gt;, &lt;a href=&#34;https://capnproto.org&#34;&gt;Capân Proto&lt;/a&gt; and &lt;a href=&#34;http://msgpack.org/index.html&#34;&gt;MsgPack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In manay cases, these libraries are great fit for building your game network protocol. But in the fast-paced world of first person shooters where efficiency is paramount, a hand-tuned binary protocol is still the gold standard.&lt;/p&gt;
&lt;p&gt;There are a few reasons for this. Web binary formats are designed for situations where versioning of data is &lt;em&gt;extremely&lt;/em&gt; important. If you upgrade your backend, older clients should be able to keep talking to it with the old format. Data formats are also expected to be language agnostic. A backend written in Golang should be able to talk with a web client written in JavaScript and other server-side components written in Python or Java.&lt;/p&gt;
&lt;p&gt;Game servers are completely different beasts. The client and server are almost alwaysÂ written in the same language (C++), and versioning is much simpler. If a client with an incompatible version tries to connect, that connection is simply rejected. There&amp;rsquo;s simply no need for compatibility across different versions.&lt;/p&gt;
&lt;p&gt;So if you donât need versioning and you donât need cross-language support what are the benefits for these libraries? Convenience. Ease of use. Not needing to worry about creating, testing and debugging your own binary format.&lt;/p&gt;
&lt;p&gt;But this convenience is offset by the fact that these libraries are less efficient and less flexible than a binary protocol we can roll ourselves. So while I encourage you to evaluate these libraries and see if they suit your needs, for the rest of this article, we&amp;rsquo;re going to move forward with a custom binary protocol.&lt;/p&gt;
&lt;h2 id=&#34;getting-started-with-a-binary-format&#34;&gt;Getting Started with a Binary Format&lt;/h2&gt;
&lt;p&gt;One option for creating a custom binary protocol is to use the in-memory format of your data structures in C/C++ as the over-the-wire format. People often start here, so although I donât recommend this approach, lets explore it for a while before we poke holes in it.&lt;/p&gt;
&lt;p&gt;First define theÂ set of packets, typically as a union of structs:&lt;/p&gt;
&lt;pre&gt;
struct Packet
{
    enum PacketTypeEnum { PACKET_A, PACKET_B, PACKET_C };

    uint8_t packetType;
 
    union
    {
        struct PacketA
        {
            int x,y,z;
        } a;

        struct PacketB
        {
            int numElements;
            int elements[MaxElements];
        } b;

        struct PacketC
        {
            bool x;
            short y;
            int z;
        } c;
    }; 
};
&lt;/pre&gt;
&lt;p&gt;When writing the packet, set the first byte in the packet to the packet type number (0, 1 or 2). Then depending on the packet type, memcpy the appropriate union struct into the packet.Â On read do the reverse: read in the first byte, then according to the packet type, copyÂ the packet data toÂ the corresponding struct.&lt;/p&gt;
&lt;p&gt;It couldnât get simpler. So why do most games avoid this approach?&lt;/p&gt;
&lt;p&gt;The first reason is that different compilers and platforms provide different packing of structs. If you go this routeÂ youâll spend a lot of time with &lt;strong&gt;#pragma pack&lt;/strong&gt; trying to make sure that different compilers andÂ different platforms lay out the structures in memory exactly the same way.&lt;/p&gt;
&lt;p&gt;The next one is endianness. Most computers are mostly &lt;a href=&#34;https://en.wikipedia.org/wiki/Endianness#Little-endian&#34;&gt;little endian&lt;/a&gt; these days but historically some architectures like PowerPC were &lt;a href=&#34;https://en.wikipedia.org/wiki/Endianness#Big-endian&#34;&gt;big endian&lt;/a&gt;. If you need to support communication between little endian and big endian machines, the memcpy the struct in and out of the packet approach simply wonât work. At minimum you need to write a function to swap bytes between host and network byte order on read and write for each variable in your struct.&lt;/p&gt;
&lt;p&gt;There are other issues as well. If a struct contains pointers you canât just serialize that value over the network and expect a valid pointer on the other side. Also, if you have variable sized structures, such as an array of 32 elements, but most of the time itâs empty or only has a few elements, it&amp;rsquo;s wasteful to always send the array at worst case size. A better approach would support a variable length encoding that only sends the actual number of elements in the array.&lt;/p&gt;
&lt;p&gt;But ultimately, what really drives a stake into the heart of this approach is &lt;strong&gt;security&lt;/strong&gt;. Itâs a &lt;em&gt;massive&lt;/em&gt; security risk to take data coming in over the network and trust it, and that&amp;rsquo;s exactly what you do if you just copy a block of memory sent over the network into your struct. Wheee! What if somebody constructs a malicious &lt;strong&gt;PacketB&lt;/strong&gt; and sends it to you with &lt;strong&gt;numElements&lt;/strong&gt; = 0xFFFFFFFF?&lt;/p&gt;
&lt;p&gt;You should, no you &lt;em&gt;must&lt;/em&gt;, at minimum do some sort of per-field checking that values are in range vs. blindly accepting what is sent to you. This is why the memcpy struct approach is rarely used in professional games.&lt;/p&gt;
&lt;h2 id=&#34;read-and-write-functions&#34;&gt;Read and Write Functions&lt;/h2&gt;
&lt;p&gt;The next level of sophistication is read and write functions per-packet.&lt;/p&gt;
&lt;p&gt;Start with the following simple operations:&lt;/p&gt;
&lt;pre&gt;
void WriteInteger( Buffer &amp;amp; buffer, uint32_t value );
void WriteShort( Buffer &amp;amp; buffer, uint16_t value );
void WriteChar( Buffer &amp;amp; buffer, uint8_t value );

uint32_t ReadInteger( Buffer &amp;amp; buffer );
uint16_t ReadShort( Buffer &amp;amp; buffer );
uint8_t ReadByte( Buffer &amp;amp; buffer );
&lt;/pre&gt;
&lt;p&gt;TheseÂ operate on a structure which keeps track of the current position:&lt;/p&gt;
&lt;pre&gt;
struct Buffer
{
    uint8_t * data;     // pointer to buffer data
    int size;           // size of buffer data (bytes)
    int index;          // index of next byte to be read/written
};
&lt;/pre&gt;
&lt;p&gt;The write integer function looks something like this:&lt;/p&gt;
&lt;pre&gt;
void WriteInteger( Buffer &amp;amp; buffer, uint32_t value )
{
    assert( buffer.index + 4 &amp;lt;= size );
#ifdef BIG_ENDIAN
    *((uint32_t*)(buffer.data+buffer.index)) = bswap( value ); 
#else // #ifdef BIG_ENDIAN
    *((uint32_t*)(buffer.data+buffer.index)) = value; 
#endif // #ifdef BIG_ENDIAN
    buffer.index += 4;
}
&lt;/pre&gt;
&lt;p&gt;And the read integer function looks like this:&lt;/p&gt;
&lt;pre&gt;
uint32_t ReadInteger( Buffer &amp;amp; buffer )
{
    assert( buffer.index + 4 &amp;lt;= size );
    uint32_t value;
#ifdef BIG_ENDIAN
    value = bswap( *((uint32_t*)(buffer.data+buffer.index)) );
#else // #ifdef BIG_ENDIAN
    value = *((uint32_t*)(buffer.data+buffer.index));
#endif // #ifdef BIG_ENDIAN
    buffer.index += 4;
    return value;
}
&lt;/pre&gt;
&lt;p&gt;Now, instead of copying across packet data in and out of structs, we implement read and write functions for each packet type:&lt;/p&gt;
&lt;pre&gt;
struct PacketA
{
    int x,y,z;

    void Write( Buffer &amp;amp; buffer )
    {
        WriteInteger( buffer, x );
        WriteInteger( buffer, y );
        WriteInteger( buffer, z );
    }

    void Read( Buffer &amp;amp; buffer )
    {
        ReadInteger( buffer, x );
        ReadInteger( buffer, y );
        ReadInteger( buffer, z ); 
    }
};

struct PacketB
{
    int numElements;
    int elements[MaxElements];

    void Write( Buffer &amp;amp; buffer )
    {
        WriteInteger( buffer, numElements );
        for ( int i = 0; i &amp;lt; numElements; ++i )
            WriteInteger( buffer, elements[i] );
    }

    void Read( Buffer &amp;amp; buffer )
    {
        ReadInteger( buffer, numElements );
        for ( int i = 0; i &amp;lt; numElements; ++i )
            ReadInteger( buffer, elements[i] );
    }
};

struct PacketC
{
    bool x;
    short y;
    int z;

    void Write( Buffer &amp;amp; buffer )
    {
        WriteByte( buffer, x );
        WriteShort( buffer, y );
        WriteInt( buffer, z );
    }

    void Read( Buffer &amp;amp; buffer )
    {
        ReadByte( buffer, x );
        ReadShort( buffer, y );
        ReadInt( buffer, z );
    }
};
&lt;/pre&gt;
&lt;p&gt;When reading and writing packets, start the packet with a byte specifying the packet type via ReadByte/WriteByte, then according to the packet type, call the read/write on the corresponding packet struct in the union.&lt;/p&gt;
&lt;p&gt;Now we have a system that allows machines with different endianness to communicate and supports variable length encoding of elements.&lt;/p&gt;
&lt;h2 id=&#34;bitpacking&#34;&gt;Bitpacking&lt;/h2&gt;
&lt;p&gt;What if we have a value in the range [0,1000] we really only need 10 bits to represent all possible values.Â Wouldn&amp;rsquo;t it be nice if we could write just 10 bits, instead of rounding up to 16? What about boolean values? It would be nice to send these as one bit instead of 8!&lt;/p&gt;
&lt;p&gt;One wayÂ to implement this is to manually organize your C++ structures into packed integers with bitfields and union tricks, such as grouping all bools together into one integer type via bitfield and serializing them as a group. But this is tedious and error prone and thereâs no guarantee that different C++ compilers pack bitfields in memory exactly the same way.&lt;/p&gt;
&lt;p&gt;A much more flexible way that trades a small amount of CPU on packet read and write for convenience is a &lt;strong&gt;bitpacker&lt;/strong&gt;. This isÂ code that reads and writes non-multiples of 8 bits to a buffer.&lt;/p&gt;
&lt;h2 id=&#34;writing-bits&#34;&gt;Writing Bits&lt;/h2&gt;
&lt;p&gt;Many people write bitpackers that work at the byte level. This means they flush bytes to memory as they are filled. This is simpler to code, butÂ theÂ ideal is to read and writeÂ words at a time, because modern machines are optimized to work this way instead of farting across a buffer at byte level like itâs 1985.&lt;/p&gt;
&lt;p&gt;If you want to write 32 bits at a time, you&amp;rsquo;ll need a scratch word twice that size, eg. uint64_t. The reason is that you need the top half for overflow. For example,Â if you have justÂ written a value 30 bits long into the scratchÂ buffer, then write another value that is 10 bits long you need somewhere to store 30 + 10 = 40 bits.&lt;/p&gt;
&lt;pre&gt;
uint64_t scratch;
int scratch_bits;
int word_index;
uint32_t * buffer;
&lt;/pre&gt;
&lt;p&gt;When we start writing with the bitpacker, all these variables are cleared to zero except &lt;strong&gt;buffer&lt;/strong&gt; which points to theÂ start of the packet we are writing to. Because we&amp;rsquo;re accessing this packet data at a word level, not byte level, make sure packet buffers lengths are a multiple of 4 bytes.&lt;/p&gt;
&lt;p&gt;Letâs say we want to write 3 bits followed by 10 bits, then 24. Our goal is to pack this tightly in the scratch buffer and flush that out to memory, 32 bits at a time. Note that 3 + 10 + 24 = 37. We have to handle this case where the total number of bits donât evenly divide into 32. This is actually the &lt;em&gt;common case&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At the first step, write the 3 bits to &lt;strong&gt;scratch&lt;/strong&gt; like this:&lt;/p&gt;
&lt;pre&gt;xxx&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;scratch_bits&lt;/strong&gt; is now 3.&lt;/p&gt;
&lt;p&gt;Next, write 10 bits:&lt;/p&gt;
&lt;pre&gt;yyyyyyyyyyxxx&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;scratch_bits&lt;/strong&gt; is now 13 (3+10).&lt;/p&gt;
&lt;p&gt;Next write 24 bits:&lt;/p&gt;
&lt;pre&gt;zzzzzzzzzzzzzzzzzzzzzzzzyyyyyyyyyyxxx&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;scratch_bits&lt;/strong&gt; is now 37 (3+10+24). Weâre straddling the 32 bit word boundary in our 64 bit &lt;strong&gt;scratch&lt;/strong&gt; variable and have 5 bits in the upper 32 bits (overflow). Flush the lower 32 bits of &lt;strong&gt;scratch&lt;/strong&gt; to memory, advance &lt;strong&gt;word_index&lt;/strong&gt; by one, shift &lt;strong&gt;scratch&lt;/strong&gt; right by 32 and subtract 32 from &lt;strong&gt;scratch_bits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scratch&lt;/strong&gt;Â now looks like this:&lt;/p&gt;
&lt;pre&gt;zzzzz&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ve finished writing bits but we still have dataÂ in scratch that&amp;rsquo;s not flushed to memory. For this data to be included in the packet we need to make sure to flush any remaining bits in &lt;strong&gt;scratch&lt;/strong&gt;Â to memory at the end of writing.&lt;/p&gt;
&lt;p&gt;When we flush a word to memory it is converted to little endian byte order. To see why this is important consider what happensÂ if we flush bytesÂ to memory in big endian order:&lt;/p&gt;
&lt;pre&gt;DCBA000E&lt;/pre&gt;
&lt;p&gt;Since we fill bits in the wordÂ from right to left, the last byte in the packet E is actually on the right.Â If we try to send this buffer in a packet of 5 bytes (the actual amount of data we have to send) the packet catches 0 for the last byte instead of E. Ouch!&lt;/p&gt;
&lt;p&gt;But when we write to memory in little endian order, bytes are reversed back out in memory like this:&lt;/p&gt;
&lt;pre&gt;ABCDE000&lt;/pre&gt;
&lt;p&gt;And we can write 5 bytes to the network and catch E at the end. Et voilÃ !&lt;/p&gt;
&lt;h2 id=&#34;reading-bits&#34;&gt;Reading Bits&lt;/h2&gt;
&lt;p&gt;To read the bitpacked data, start with the buffer sent over the network:&lt;/p&gt;
&lt;pre&gt;ABCDE&lt;/pre&gt;
&lt;p&gt;The bit reader has the followingÂ state:&lt;/p&gt;
&lt;pre&gt;
uint64_t scratch;
int scratch_bits;
int total_bits;
int num_bits_read;
int word_index;
uint32_t * buffer;
&lt;/pre&gt;
&lt;p&gt;To start all variables are cleared to zero except &lt;strong&gt;total_bits&lt;/strong&gt; which is set to the size of the packet as bytes * 8, and &lt;strong&gt;buffer&lt;/strong&gt; which points to the start of the packet.&lt;/p&gt;
&lt;p&gt;The user requests a read of 3 bits. Since &lt;strong&gt;scratch_bits&lt;/strong&gt; is zero, itâs time to read in the first word. Read in the word to &lt;strong&gt;scratch&lt;/strong&gt;, shifted leftÂ by &lt;strong&gt;scratch_bits&lt;/strong&gt; (0). Add 32 to &lt;strong&gt;scratch_bits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The value of &lt;strong&gt;scratch&lt;/strong&gt; is now:&lt;/p&gt;
&lt;pre&gt;zzzzzzzzzzzzzzzzzzzyyyyyyyyyyxxx&lt;/pre&gt;
&lt;p&gt;Read off the low 3 bits, giving the expected value of:&lt;/p&gt;
&lt;pre&gt;xxx&lt;/pre&gt;
&lt;p&gt;Shift &lt;strong&gt;scratch&lt;/strong&gt; to the right 3 bits and subtract 3 from &lt;strong&gt;scratch_bits&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;zzzzzzzzzzzzzzzzzzzyyyyyyyyyy&lt;/pre&gt;
&lt;p&gt;Read off another 10 bits in the same way, giving the expected value of:&lt;/p&gt;
&lt;pre&gt;yyyyyyyyyy&lt;/pre&gt;
&lt;p&gt;Scratch now looks like:&lt;/p&gt;
&lt;pre&gt;zzzzzzzzzzzzzzzzzzz&lt;/pre&gt;
&lt;p&gt;The next read asks for 24 bits but &lt;strong&gt;scratch_bits&lt;/strong&gt; is only 19 (=32-10-3).&lt;/p&gt;
&lt;p&gt;Itâs time to read in the next word. Shifting the word in memory left by &lt;strong&gt;scratch_bits&lt;/strong&gt; (19) and or it on top of &lt;strong&gt;scratch&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now we have all the bits necessary for z in &lt;strong&gt;scratch&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;zzzzzzzzzzzzzzzzzzzzzzzz&lt;/pre&gt;
&lt;p&gt;Read off 24 bits and shiftÂ &lt;strong&gt;scratch&lt;/strong&gt;Â right by 24. &lt;strong&gt;scratch&lt;/strong&gt; is now all zeros.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re done!&lt;/p&gt;
&lt;h2 id=&#34;beyond-bitpacking&#34;&gt;Beyond Bitpacking&lt;/h2&gt;
&lt;p&gt;Reading and writing integer values into a packet by specifying the number of bits to read/write is not the most user friendly option.&lt;/p&gt;
&lt;p&gt;Consider this example:&lt;/p&gt;
&lt;pre&gt;
const int MaxElements = 32;

struct PacketB
{
    int numElements;
    int elements[MaxElements];

    void Write( BitWriter &amp;amp; writer )
    {
        WriteBits( writer, numElements, 6 );
        for ( int i = 0; i &amp;lt; numElements; ++i )
            WriteBits( writer, elements[i] );
    }

    void Read( BitReader &amp;amp; reader )
    {
        ReadBits( reader, numElements, 6 );
        for ( int i = 0; i &amp;lt; numElements; ++i )
            ReadBits( reader, elements[i] );
    }
};
&lt;/pre&gt;
&lt;p&gt;This code looks fine at first glance, but letâs assume that some time later you, or somebody else on your team, increases &lt;strong&gt;MaxElements&lt;/strong&gt; from 32 to 200 but forget to update the number of bits required to &lt;strong&gt;7&lt;/strong&gt;. Now the high bit of &lt;strong&gt;numElements&lt;/strong&gt; are being silently truncated on send. It&amp;rsquo;s pretty hard to track something like this down after the fact.&lt;/p&gt;
&lt;p&gt;The simplest option is to just turn it around and define the maximum number of elements in terms of the number of bits sent:&lt;/p&gt;
&lt;pre&gt;
const int MaxElementBits = 7;
const int MaxElements = ( 1 &amp;lt;&amp;lt; MaxElementBits ) - 1;
&lt;/pre&gt;
&lt;p&gt;Another option is to get fancy and work out the number of bits required at compile time:&lt;/p&gt;
&lt;pre&gt;
template &amp;lt;uint32_t x&amp;gt; struct PopCount
{
    enum { a = x - ( ( x &amp;gt;&amp;gt; 1 ) &amp;amp; 0x55555555 ),
           b = ( ( ( a &amp;gt;&amp;gt; 2 ) &amp;amp; 0x33333333 ) + ( a &amp;amp; 0x33333333 ) ),
           c = ( ( ( b &amp;gt;&amp;gt; 4 ) + b ) &amp;amp; 0x0f0f0f0f ),
           d = c + ( c &amp;gt;&amp;gt; 8 ),
           e = d + ( d &amp;gt;&amp;gt; 16 ),
    result = e &amp;amp; 0x0000003f }; 
};

template &amp;lt;uint32_t x&amp;gt; struct Log2
{
    enum { a = x | ( x &amp;gt;&amp;gt; 1 ),
           b = a | ( a &amp;gt;&amp;gt; 2 ),
           c = b | ( b &amp;gt;&amp;gt; 4 ),
           d = c | ( c &amp;gt;&amp;gt; 8 ),
           e = d | ( d &amp;gt;&amp;gt; 16 ),
           f = e &amp;gt;&amp;gt; 1,
    result = PopCount&amp;lt;f&amp;gt;::result };
};

template &amp;lt;int64_t min, int64_t max&amp;gt; struct BitsRequired
{
    static const uint32_t result = 
        ( min == max ) ? 0 : ( Log2&amp;lt;uint32_t(max-min)&amp;gt;::result + 1 );
};

#define BITS_REQUIRED( min, max ) BitsRequired&amp;lt;min,max&amp;gt;::result
&lt;/pre&gt;
&lt;p&gt;Now you canât mess up the number of bits, and you can specify non-power of two maximum values and itÂ everything works out.&lt;/p&gt;
&lt;pre&gt;
const int MaxElements = 32;
const int MaxElementBits = BITS_REQUIRED( 0, MaxElements );
&lt;/pre&gt;
&lt;p&gt;But be carefulÂ when array sizes aren&amp;rsquo;t a power of two! In the example above &lt;strong&gt;MaxElements&lt;/strong&gt; is 32, so &lt;strong&gt;MaxElementBits&lt;/strong&gt; is 6. This seems fine because all values in [0,32] fit in 6 bits. The problem is that there are additional values within 6 bits that are &lt;em&gt;outside&lt;/em&gt; our array bounds: [33,63]. AnÂ attacker can use this to construct a malicious packet that corrupts memory!&lt;/p&gt;
&lt;p&gt;This leads to the &lt;em&gt;inescapable&lt;/em&gt; conclusion that itâs not enough to just specify the number of bits required when reading and writing a value,Â we must also check that it is within the valid range: [min,max]. This way if a value is outside of the expected range we can detect that and abort read.&lt;/p&gt;
&lt;p&gt;I used to implement this using C++ exceptions, but when I profiled, I found itÂ to be incredibly slow. In my experience, itâs much faster to take one of two approaches: set a flagÂ on the bit reader that it should abort, or return false fromÂ read functions on failure. But now, in order to be completely safe on read you must to check for error on every read operation.&lt;/p&gt;
&lt;pre&gt;
const int MaxElements = 32;
const int MaxElementBits = BITS_REQUIRED( 0, MaxElements );

struct PacketB
{
    int numElements;
    int elements[MaxElements];

    void Write( BitWriter &amp;amp; writer )
    {
        WriteBits( writer, numElements, MaxElementBits );
        for ( int i = 0; i &amp;lt; numElements; ++i )
        {
            WriteBits( writer, elements[i], 32 );
        }
    }

    void Read( BitReader &amp;amp; reader )
    {
        ReadBits( reader, numElements, MaxElementBits );
        
        if ( numElements &amp;gt; MaxElements )
        {
            reader.Abort();
            return;
        }
        
        for ( int i = 0; i &amp;lt; numElements; ++i )
        {
            if ( reader.IsOverflow() )
                break;

            ReadBits( buffer, elements[i], 32 );
        }
    }
};
&lt;/pre&gt;
&lt;p&gt;If you miss any of these checks, you expose yourself to buffer overflows and infinite loops when reading packets. Clearly you donât want this to be a manual step when writing a packet read function. &lt;em&gt;You want it to be automatic&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/serialization_strategies/&#34;&gt;Serialization Strategies&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>State Synchronization</title>
      <link>https://gafferongames.com/post/state_synchronization/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/state_synchronization/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/networked-physics/&#34;&gt;Networked Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/snapshot_compression/&#34;&gt;previous article&lt;/a&gt; we discussed techniques for compressing snapshots.&lt;/p&gt;
&lt;p&gt;In this article we round out our discussion of networked physics strategies with &lt;strong&gt;state synchronization&lt;/strong&gt;, the third and final strategy in this article series.&lt;/p&gt;
&lt;h2 id=&#34;state-synchronization&#34;&gt;State Synchronization&lt;/h2&gt;
&lt;p&gt;What is state synchronization? The basic idea is that, somewhat like deterministic lockstep, we run the simulation on both sides but, &lt;em&gt;unlike&lt;/em&gt; deterministic lockstep, we don&amp;rsquo;t just send input, we send both input &lt;u&gt;and&lt;/u&gt; state.&lt;/p&gt;
&lt;p&gt;This gives state synchronization interesting properties. Because we send state, we don&amp;rsquo;t need perfect determinism to stay in sync, and because the simulation runs on both sides, objects continue moving forward between updates.&lt;/p&gt;
&lt;p&gt;This lets us approach state synchronization differently to snapshot interpolation. Instead of sending state updates for every object in each packet, we can now send updates for only a few, and if we&amp;rsquo;re smart about how we select the objects for each packet, we can save bandwidth by concentrating updates on the most important objects.&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s the catch? State synchronization is an approximate and lossy synchronization strategy. In practice, this means you&amp;rsquo;ll spend a lot of time tracking down sources of extrapolation divergence and pops. But other than that, it&amp;rsquo;s a quick and easy strategy to get started with.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the state sent over the network per-object:&lt;/p&gt;
&lt;pre&gt;struct StateUpdate
{
    int index;
    vec3f position;
    quat4f orientation;
    vec3f linear_velocity;
    vec3f angular_velocity;
};
&lt;/pre&gt;
&lt;p&gt;Unlike snapshot interpolation, we&amp;rsquo;re not just sending visual quantities like position and orientation, we&amp;rsquo;re also sending &lt;em&gt;non-visual&lt;/em&gt; state such as linear and angular velocity. Why is this?&lt;/p&gt;
&lt;p&gt;The reason is that state synchronization runs the simulation on both sides, so it&amp;rsquo;s &lt;em&gt;always extrapolating&lt;/em&gt; from the last state update applied to each object. If linear and angular velocity aren&amp;rsquo;t synchronized, this extrapolation is done with incorrect velocities, leading to pops when objects are updated.&lt;/p&gt;
&lt;p&gt;While we must send the velocities, there&amp;rsquo;s no point wasting bandwidth sending (0,0,0) over and over while an object is at rest. We can fix this with a trivial optimization, like so:&lt;/p&gt;
&lt;pre&gt;void serialize_state_update( Stream &amp;amp; stream, 
                             int &amp;amp; index, 
                             StateUpdate &amp;amp; state_update )
{
    serialize_int( stream, index, 0, NumCubes - 1 );
    serialize_vector( stream, state_update.position );
    serialize_quaternion( stream, state_update.orientation );
    bool at_rest = stream.IsWriting() ? state_update.AtRest() : false;    
    serialize_bool( stream, at_rest );
    if ( !at_rest )
    {
        serialize_vector( stream, state_update.linear_velocity );
        serialize_vector( stream, state_update.angular_velocity );
    }
    else if ( stream.IsReading() )
    {
        state_update.linear_velocity = vec3f(0,0,0);
        state_update.angular_velocity = vec3f(0,0,0);
    }
}
&lt;/pre&gt;
&lt;p&gt;What you see above is a &lt;em&gt;serialize function&lt;/em&gt;. It&amp;rsquo;s a trick I like to use to unify packet read and write. I like it because it&amp;rsquo;s expressive while at the same time it&amp;rsquo;s difficult to desync read and write. You can read more about them &lt;a href=&#34;https://gafferongames.com/post/serialization_strategies/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;packet-structure&#34;&gt;Packet Structure&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s look at the overall structure of packets being sent:&lt;/p&gt;
&lt;pre&gt;const int MaxInputsPerPacket = 32;
const int MaxStateUpdatesPerPacket = 64;

struct Packet
{
    uint32_t sequence;
    Input inputs[MaxInputsPerPacket];
    int num_object_updates;
    StateUpdate state_updates[MaxStateUpdatesPerPacket];
};
&lt;/pre&gt;
&lt;p&gt;First we include a sequence number in each packet so we can determine out of order, lost or duplicate packets. I recommend you run the simulation at the same framerate on both sides (for example 60HZ) and in this case the sequence number can work double duty as the frame number.&lt;/p&gt;
&lt;p&gt;Input is included in each packet because it&amp;rsquo;s needed for extrapolation. Like deterministic lockstep we send multiple redundant inputs so in the case of packet loss it&amp;rsquo;s very unlikely that an input gets dropped. Unlike deterministic lockstep, if don&amp;rsquo;t have the next input we don&amp;rsquo;t stop the simulation and wait for it, we continue extrapolating forward with the last input received.&lt;/p&gt;
&lt;p&gt;Next you can see that we only send a maximum of 64 state updates per-packet. Since we have a total of 901 cubes in the simulation so we need some way to select the n most important state updates to include in each packet. We need some sort of prioritization scheme.&lt;/p&gt;
&lt;p&gt;To get started each frame walk over all objects in your simulation and calculate their current priority. For example, in the cube simulation I calculate priority for the player cube as 1000000 because I always want it to be included in every packet, and for interacting (red cubes) I give them a higher priority of 100 while at rest objects have priority of 1.&lt;/p&gt;
&lt;p&gt;Unfortunately if you just picked objects according to their current priority each frame you&amp;rsquo;d only ever send red objects while in a katamari ball and white objects on the ground would never get updated. We need to take a slightly different approach, one that prioritizes sending important objects while also &lt;em&gt;distributing&lt;/em&gt; updates across all objects in the simulation.&lt;/p&gt;
&lt;h2 id=&#34;priority-accumulator&#34;&gt;Priority Accumulator&lt;/h2&gt;
&lt;p&gt;You can do this with a priority accumulator. This is an array of float values, one value per-object, that is remembered from frame to frame. Instead of taking the immediate priority value for the object and sorting on that, each frame we add the current priority for each object to its priority accumulator value then sort objects in order from largest to smallest priority accumulator value. The first n objects in this sorted list are the objects you should send that frame.&lt;/p&gt;
&lt;p&gt;You could just send state updates for all n objects but typically you have some maximum bandwidth you want to support like 256kbit/sec. Respecting this bandwidth limit is easy. Just calculate how large your packet header is and how many bytes of preamble in the packet (sequence, # of objects in packet and so on) and work out conservatively the number of bytes remaining in your packet while staying under your bandwidth target.&lt;/p&gt;
&lt;p&gt;Then take the n most important objects according to their priority accumulator values and as you construct the packet, walk these objects in order and measure if their state updates will fit in the packet. If you encounter a state update that doesn&amp;rsquo;t fit, skip over it and try the next one. After you serialize the packet, reset the priority accumulator to zero for objects that fit but leave the priority accumulator value alone for objects that didn&amp;rsquo;t. This way objects that don&amp;rsquo;t fit are first in line to be included in the next packet.&lt;/p&gt;
&lt;p&gt;The desired bandwidth can even be adjusted on the fly. This makes it really easy to adapt state synchronization to changing network conditions, for example if you detect the connection is having difficulty you can reduce the amount of bandwidth sent (congestion avoidance) and the quality of state synchronization scales back automatically. If the network connection seems like it should be able to handle more bandwidth later on then you can raise the bandwidth limit.&lt;/p&gt;
&lt;h2 id=&#34;jitter-buffer&#34;&gt;Jitter Buffer&lt;/h2&gt;
&lt;p&gt;The priority accumulator covers the sending side, but on the receiver side there is much you need to do when applying these state updates to ensure that you don&amp;rsquo;t see divergence and pops in the extrapolation between object updates.&lt;/p&gt;
&lt;p&gt;The very first thing you need to consider is that network jitter exists. You don&amp;rsquo;t have any guarantee that packets you sent nicely spaced out 60 times per-second arrive that way on the other side. What happens in the real world is you&amp;rsquo;ll typically receive two packets one frame, 0 packets the next, 1, 2, 0 and so on because packets tend to clump up across frames. To handle this situation you need to implement a jitter buffer for your state update packets. If you fail to do this you&amp;rsquo;ll have a poor quality extrapolation and pops in stacks of objects because objects in different state update packets are slightly out of phase with each other with respect to time.&lt;/p&gt;
&lt;p&gt;All you do in a jitter buffer is hold packets before delivering them to the application at the correct time as indicated by the sequence number (frame number) in the packet. The delay you need to hold packets for in this buffer is a much smaller amount of time relative to interpolation delay for snapshot interpolation but it&amp;rsquo;s the same basic idea. You just need to delay packets just enough (say 4-5 frames @ 60HZ) so that they come out of the buffer properly spaced apart.&lt;/p&gt;
&lt;h2 id=&#34;applying-state-updates&#34;&gt;Applying State Updates&lt;/h2&gt;
&lt;p&gt;Once the packet comes out of the jitter how do you apply state updates? My recommendation is that you should snap the physics state hard. This means you apply the values in the state update directly to the simulation.&lt;/p&gt;
&lt;p&gt;I recommend against trying to apply some smoothing between the state update and the current state at the simulation level. This may sound counterintuitive but the reason for this is that the simulation extrapolates from the state update so you want to make sure it extrapolates from a valid physics state for that object rather than some smoothed, total bullshit made-up one. This is especially important when you are networking large stacks of objects.&lt;/p&gt;
&lt;p&gt;Surprisingly, without any smoothing the result is already pretty good:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_uncompressed.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_uncompressed.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;As you can see it&amp;rsquo;s already looking quite good and barely any bandwidth optimization has been performed. Contrast this with the first video for snapshot interpolation which was at 18mbit/sec and you can see that using the simulation to extrapolate between state updates is a great way to use less bandwidth.&lt;/p&gt;
&lt;p&gt;Of course we can do a lot better than this and each optimization we do lets us squeeze more state updates in the same amount of bandwidth. The next obvious thing we can do is to apply all the standard quantization compression techniques such as bounding and quantizing position, linear and angular velocity value and using the smallest three compression as described in &lt;a href=&#34;https://gafferongames.com/post/snapshot_compression/&#34;&gt;snapshot compression&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But here it gets a bit more complex. We are extrapolating from those state updates so if we quantize these values over the network then the state that arrives on the right side is slightly different from the left side, leading to a slightly different extrapolation and a pop when the next state update arrives for that object.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_compressed.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_compressed.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;h2 id=&#34;quantize-both-sides&#34;&gt;Quantize Both Sides&lt;/h2&gt;
&lt;p&gt;The solution is to quantize the state on both sides. This means that on both sides before each simulation step you quantize the entire simulation state as if it had been transmitted over the network. Once this is done the left and right side are both extrapolating from quantized state and their extrapolations are very similar.&lt;/p&gt;
&lt;p&gt;Because these quantized values are being fed back into the simulation, you&amp;rsquo;ll find that much more precision is required than snapshot interpolation where they were just visual quantities used for interpolation. In the cube simulation I found it necessary to have 4096 position values per-meter, up from 512 with snapshot interpolation, and a whopping 15 bits per-quaternion component in smallest three (up from 9). Without this extra precision significant popping occurs because the quantization forces physics objects into penetration with each other, fighting against the simulation which tries to keep the objects out of penetration. I also found that softening the constraints and reducing the maximum velocity which the simulation used to push apart penetrating objects also helped reduce the amount of popping.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_quantize_both_sides.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_quantize_both_sides.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;With quantization applied to both sides you can see the result is perfect once again. It may look visually about the same as the uncompressed version but in fact we&amp;rsquo;re able to fit many more state updates per-packet into the 256kbit/sec bandwidth limit. This means we are better able to handle packet loss because state updates for each object are sent more rapidly. If a packet is lost, it&amp;rsquo;s less of a problem because state updates for those objects are being continually included in future packets.&lt;/p&gt;
&lt;p&gt;Be aware that when a burst of packet loss occurs like 1/4 a second with no packets getting through, and this is inevitable that eventually something like this will happen, you will probably get a different result on the left and the right sides. We have to plan for this. In spite of all effort that we have made to ensure that the extrapolation is as close as possible (quantizing both sides and so on) pops can and will occur if the network stops delivering packets.&lt;/p&gt;
&lt;h2 id=&#34;visual-smoothing&#34;&gt;Visual Smoothing&lt;/h2&gt;
&lt;p&gt;We can cover up these pops with smoothing.&lt;/p&gt;
&lt;p&gt;Remember how I said earlier that you should not apply smoothing at the simulation level because it ruins the extrapolation? What we&amp;rsquo;re going to do for smoothing instead is calculating and maintaining position and orientation error offsets that we reduce over time. Then when we render the cubes in the right side we don&amp;rsquo;t render them at the simulation position and orientation, we render them at the simulation position + error offset, and orientation * orientation error.&lt;/p&gt;
&lt;p&gt;Over time we work to reduce these error offsets back to zero for position error and identity for orientation error. For error reduction I use an exponentially smoothed moving average tending towards zero. So in effect, I multiply the position error offset by some factor each frame (eg. 0.9) until it gets close enough to zero for it to be cleared (thus avoiding denormals). For orientation, I slerp a certain amount (0.1) towards identity each frame, which has the same effect for the orientation error.&lt;/p&gt;
&lt;p&gt;The trick to making this all work is that when a state update comes in you take the current simulation position and add the position error to that, and subtract that from the new position, giving the new position error offset which gives an identical result to the current (smoothed) visual position.&lt;/p&gt;
&lt;p&gt;The same process is then applied to the error quaternion (using multiplication by the conjugate instead of subtraction) and this way you effectively calculate on each state update the new position error and orientation error relative to the new state such that the object appears to have not moved at all. Thus state updates are smooth and have no immediate visual effect, and the error reduction smoothes out any error in the extrapolation over time without the player noticing in the common case.&lt;/p&gt;
&lt;p&gt;I find that using a single smoothing factor gives unacceptable results. A factor of 0.95 is perfect for small jitters because it smooths out high frequency jitter really well, but at the same time it is too slow for large position errors, like those that happen after multiple seconds of packet loss:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_basic_smoothing.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_basic_smoothing.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;The solution I use is two different scale factors at different error distances, and to make sure the transition is smooth I blend between those two factors linearly according to the amount of positional error that needs to be reduced. In this simulation, having 0.95 for small position errors (25cms or less) while having a tighter blend factor of 0.85 for larger distances (1m error or above) gives a good result. The same strategy works well for orientation using the dot product between the orientation error and the identity matrix. I found that in this case a blend of the same factors between dot 0.1 and 0.5 works well.&lt;/p&gt;
&lt;p&gt;The end result is smooth error reduction for small position and orientation errors combined with a tight error reduction for large pops. As you can see above you don&amp;rsquo;t want to drag out correction of these large pops, they need to be fast and so they&amp;rsquo;re over quickly otherwise they&amp;rsquo;re really disorienting for players, but at the same time you want to have really smooth error reduction when the error is small hence the adaptive error reduction approach works really well.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_adaptive_smoothing.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/state_synchronization_adaptive_smoothing.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;h2 id=&#34;delta-compression&#34;&gt;Delta Compression&lt;/h2&gt;
&lt;p&gt;Even though I would argue the result above is probably good enough already it is possible to improve the synchronization considerably from this point. For example to support a world with larger objects or more objects being interacted with. So lets work through some of those techniques and push this technique as far as it can go.&lt;/p&gt;
&lt;p&gt;There is an easy compression that can be performed. Instead of encoding absolute position, if it is within a range of the player cube center, encode position as a relative offset to the player center position. In the common cases where bandwidth is high and state updates need to be more frequent (katamari ball) this provides a large win.&lt;/p&gt;
&lt;p&gt;Next, what if we do want to perform some sort of delta encoding for state synchronization? We can but it&amp;rsquo;s quite different in this case than it is with snapshots because we&amp;rsquo;re not including every cube in every packet, so we can&amp;rsquo;t just track the most recent packet received and say, OK all these state updates in this packet are relative to packet X.&lt;/p&gt;
&lt;p&gt;What you actually have to do is per-object update keep track of the packet that includes the base for that update. You also need to keep track of exactly the set of packets received so that the sender knows which packets are valid bases to encode relative to. This is reasonably complicated and requires a bidirectional ack system over UDP. Such a system is designed for exactly this sort of situation where you need to know exactly which packets definitely got through. You can find a tutorial on how to implement this in &lt;a href=&#34;https://gafferongames.com/post/reliability_and_flow_control/&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So assuming that you have an ack system you know with packet sequence numbers get through. What you do then is per-state update write one bit if the update is relative or absolute, if absolute then encode with no base as before, otherwise if relative send the 16 bit sequence number per-state update of the base and then encode relative to the state update data sent in that packet. This adds 1 bit overhead per-update as well as 16 bits to identify the sequence number of the base per-object update. Can we do better?&lt;/p&gt;
&lt;p&gt;Yes. In turns out that of course you&amp;rsquo;re going to have to buffer on the send and receive side to implement this relative encoding and you can&amp;rsquo;t buffer forever. In fact, if you think about it you can only buffer up a couple of seconds before it becomes impractical and in the common case of moving objects you&amp;rsquo;re going to be sending the updates for same object frequently (katamari ball) so practically speaking the base sequence will only be from a short time ago.&lt;/p&gt;
&lt;p&gt;So instead of sending the 16 bit sequence base per-object, send in the header of the packet the most recent acked packet (from the reliability ack system) and per-object encode the offset of the base sequence relative to that value using 5 bits. This way at 60 packets per-second you can identify an state update with a base half a second ago. Any base older than this is unlikely to provide a good delta encoding anyway because it&amp;rsquo;s old, so in that case just drop back to absolute encoding for that update.&lt;/p&gt;
&lt;p&gt;Now lets look at the type of objects that are going to have these absolute encodings rather than relative. They&amp;rsquo;re the objects at rest. What can we do to make them as efficient as possible? In the case of the cube simulation one bad result that can occur is that a cube comes to rest (turns grey) and then has its priority lowered significantly. If that very last update with the position of that object is missed due to packet loss, it can take a long time for that object to have its at rest position updated.&lt;/p&gt;
&lt;p&gt;We can fix this by tracking objects which have recently come to rest and bumping their priority until an ack comes back for a packet they were sent in. Thus they are sent at an elevated priority compared with normal grey cubes (which are at rest and have not moved) and keep resending at that elevated rate until we know that update has been received, thus &amp;ldquo;committing&amp;rdquo; that grey cube to be at rest at the correct position.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s really about it for this technique. Without anything fancy it&amp;rsquo;s already pretty good, and on top of that another order of magnitude improvement is available with delta compression, at the cost of significant complexity!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Snapshot Compression</title>
      <link>https://gafferongames.com/post/snapshot_compression/</link>
      <pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/snapshot_compression/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/networked-physics/&#34;&gt;Networked Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/snapshot_interpolation/&#34;&gt;previous article&lt;/a&gt; we sent snapshots of the entire simulation 10 times per-second over the network and interpolated between them to reconstruct a view of the simulation on the other side.&lt;/p&gt;
&lt;p&gt;The problem with a low snapshot rate like 10HZ is that interpolation between snapshots adds interpolation delay on top of network latency. At 10 snapshots per-second, the minimum interpolation delay is 100ms, and a more practical minimum considering network jitter is 150ms. If protection against one or two lost packets in a row is desired, this blows out to 250ms or 350ms delay.&lt;/p&gt;
&lt;p&gt;This is not an acceptable amount of delay for most games, but when the physics simulation is as unpredictable as ours, the only way to reduce it is to increase the packet send rate. Unfortunately, increasing the send rate also increases bandwidth. So what we&amp;rsquo;re going to do in this article is work through every possible bandwidth optimization &lt;em&gt;(that I can think of at least)&lt;/em&gt; until we get bandwidth under control.&lt;/p&gt;
&lt;p&gt;Our target bandwidth is &lt;strong&gt;256 kilobits per-second&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;starting-point--60hz&#34;&gt;Starting Point @ 60HZ&lt;/h1&gt;
&lt;p&gt;Life is rarely easy, and the life of a network programmer, even less so. As network programmers we&amp;rsquo;re often tasked with the impossible, so in that spirit, let&amp;rsquo;s increase the snapshot send rate from 10 to 60 snapshots per-second and see exactly how far away we are from our target bandwidth.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_uncompressed.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_uncompressed.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;That&amp;rsquo;s a &lt;em&gt;LOT&lt;/em&gt; of bandwidth: &lt;strong&gt;17.37 megabits per-second!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break it down and see where all the bandwidth is going.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the per-cube state sent in the snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct CubeState
    {
        bool interacting;
        vec3f position;
        vec3f linear_velocity;
        quat4f orientation;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;rsquo;s the size of each field:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;quat orientation: &lt;b&gt;128 bits&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;vec3 linear_velocity: &lt;b&gt;96 bits&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;vec3 position: &lt;b&gt;96 bits&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;bool interacting: &lt;b&gt;1 bit&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives a total of 321 bits bits per-cube (or 40.125 bytes per-cube).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do a quick calculation to see if the bandwidth checks out. The scene has 901 cubes so &lt;strong&gt;901*40.125 = 36152.625&lt;/strong&gt; bytes of cube data per-snapshot. 60 snapshots per-second so &lt;strong&gt;36152.625 * 60 = 2169157.5&lt;/strong&gt; bytes per-second. Add in packet header estimate: &lt;strong&gt;2169157.5 + 32*60 = 2170957.5&lt;/strong&gt;. Convert bytes per-second to megabits per-second: &lt;strong&gt;2170957.5 * 8 / ( 1000 * 1000 ) = 17.38mbps&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Everything checks out. There&amp;rsquo;s no easy way around this, we&amp;rsquo;re sending a hell of a lot of bandwidth, and we have to reduce that to something around 1-2% of it&amp;rsquo;s current bandwidth to hit our target of 256 kilobits per-second.&lt;/p&gt;
&lt;p&gt;Is this even possible? &lt;em&gt;Of course it is!&lt;/em&gt; Let&amp;rsquo;s get started :)&lt;/p&gt;
&lt;h2 id=&#34;optimizing-orientation&#34;&gt;Optimizing Orientation&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll start by optimizing orientation because it&amp;rsquo;s the largest field. (When optimizing bandwidth it&amp;rsquo;s good to work in the order of greatest to least potential gain where possible&amp;hellip;)&lt;/p&gt;
&lt;p&gt;Many people when compressing a quaternion think: &amp;ldquo;I know. I&amp;rsquo;ll just pack it into 8.8.8.8 with one 8 bit signed integer per-component!&amp;rdquo;. Sure, that works, but with a bit of math you can get much better accuracy with fewer bits using a trick called the &amp;ldquo;smallest three&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;How does the smallest three work? Since we know the quaternion represents a rotation its length must be 1, so x^2+y^2+z^2+w^2 = 1. We can use this identity to drop one component and reconstruct it on the other side. For example, if you send x,y,z you can reconstruct w = sqrt( 1 - x^2 - y^2 - z^2 ). You might think you need to send a sign bit for w in case it is negative, but you don&amp;rsquo;t, because you can make w always positive by negating the entire quaternion if w is negative (in quaternion space (x,y,z,w) and (-x,-y,-z,-w) represent the same rotation.)&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t always drop the same component due to numerical precision issues. Instead, find the component with the largest absolute value and encode its index using two bits [0,3] (0=x, 1=y, 2=z, 3=w), then send the index of the largest component and the smallest three components over the network (hence the name). On the other side use the index of the largest bit to know which component you have to reconstruct from the other three.&lt;/p&gt;
&lt;p&gt;One final improvement. If v is the absolute value of the largest quaternion component, the next largest possible component value occurs when two components have the same absolute value and the other two components are zero. The length of that quaternion (v,v,0,0) is 1, therefore v^2 + v^2 = 1, 2v^2 = 1, v = 1/sqrt(2). This means you can encode the smallest three components in [-0.707107,+0.707107] instead of [-1,+1] giving you more precision with the same number of bits.&lt;/p&gt;
&lt;p&gt;With this technique I&amp;rsquo;ve found that minimum sufficient precision for my simulation is 9 bits per-smallest component. This gives a result of 2 + 9 + 9 + 9 = 29 bits per-orientation (down from 128 bits).&lt;/p&gt;
&lt;video controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_compressed_orientation.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_compressed_orientation.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;This optimization reduces bandwidth by over 5 megabits per-second, and I think if you look at the right side, you&amp;rsquo;d be hard pressed to spot any artifacts from the compression.&lt;/p&gt;
&lt;h2 id=&#34;optimizing-linear-velocity&#34;&gt;Optimizing Linear Velocity&lt;/h2&gt;
&lt;p&gt;What should we optimize next? It&amp;rsquo;s a tie between linear velocity and position. Both are 96 bits. In my experience position is the harder quantity to compress so let&amp;rsquo;s start here.&lt;/p&gt;
&lt;p&gt;To compress linear velocity we need to bound its x,y,z components in some range so we don&amp;rsquo;t need to send full float values. I found that a maximum speed of 32 meters per-second is a nice power of two and doesn&amp;rsquo;t negatively affect the player experience in the cube simulation. Since we&amp;rsquo;re really only using the linear velocity as a &lt;em&gt;hint&lt;/em&gt; to improve interpolation between position sample points we can be pretty rough with compression. 32 distinct values per-meter per-second provides acceptable precision.&lt;/p&gt;
&lt;p&gt;Linear velocity has been bounded and quantized and is now three integers in the range [-1024,1023]. That breaks down as follows: [-32,+31] (6 bits) for integer component and multiply 5 bits fraction precision. I hate messing around with sign bits so I just add 1024 to get the value in range [0,2047] and send that instead. To decode on receive just subtract 1024 to get back to signed integer range before converting to float.&lt;/p&gt;
&lt;p&gt;11 bits per-component gives 33 bits total per-linear velocity. Just over 1/3 the original uncompressed size!&lt;/p&gt;
&lt;p&gt;We can do even better than this because most cubes are stationary. To take advantage of this we just write a single bit &amp;ldquo;at rest&amp;rdquo;. If this bit is 1, then velocity is implicitly zero and is not sent. Otherwise, the compressed velocity follows after the bit (33 bits). Cubes at rest now cost just 127 bits, while cubes that are moving cost one bit more than they previously did: 159 + 1 = 160 bits.&lt;/p&gt;
&lt;video controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_at_rest_flag.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_at_rest_flag.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;But why are we sending linear velocity at all? In the &lt;a href=&#34;http://gafferongames.com/networked-physics/snapshots-and-interpolation/&#34;&gt;previous article&lt;/a&gt; we decided to send it because it improved the quality of interpolation at 10 snapshots per-second, but now that we&amp;rsquo;re sending 60 snapshots per-second is this still necessary? As you can see below the answer is &lt;em&gt;no&lt;/em&gt;.&lt;/p&gt;
&lt;video controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_no_velocity.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_no_velocity.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Linear interpolation is good enough at 60HZ. This means we can avoid sending linear velocity entirely. Sometimes the best bandwidth optimizations aren&amp;rsquo;t about optimizing what you send, they&amp;rsquo;re about what you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; send.&lt;/p&gt;
&lt;h2 id=&#34;optimizing-position&#34;&gt;Optimizing Position&lt;/h2&gt;
&lt;p&gt;Now we have only position to compress. We&amp;rsquo;ll use the same trick we used for linear velocity: bound and quantize. I chose a position bound of [-256,255] meters in the horizontal plane (xy) and since in the cube simulation the floor is at z=0, I chose a range of [0,32] meters for z.&lt;/p&gt;
&lt;p&gt;Now we need to work out how much precision is required. With experimentation I found that 512 values per-meter (roughly 2mm precision) provides enough precision. This gives position x and y components in [-131072,+131071] and z components in range [0,16383]. That&amp;rsquo;s 18 bits for x, 18 bits for y and 14 bits for z giving a total of 50 bits per-position (originally 96).&lt;/p&gt;
&lt;p&gt;This reduces our cube state to 80 bits, or just 10 bytes per-cube.&lt;/p&gt;
&lt;p&gt;This is approximately 1/4 of the original cost. Definite progress!&lt;/p&gt;
&lt;video controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_compressed_position.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_compressed_position.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Now that we&amp;rsquo;ve compressed position and orientation we&amp;rsquo;ve run out of simple optimizations. Any further reduction in precision results in unacceptable artifacts.&lt;/p&gt;
&lt;h2 id=&#34;delta-compression&#34;&gt;Delta Compression&lt;/h2&gt;
&lt;p&gt;Can we optimize further? The answer is yes, but only if we embrace a completely new technique: &lt;strong&gt;delta compression&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Delta compression sounds mysterious. Magical. Hard. Actually, it&amp;rsquo;s not hard at all. Here&amp;rsquo;s how it works: the left side sends packets to the right like this: &amp;ldquo;This is snapshot 110 encoded relative to snapshot 100&amp;rdquo;. The snapshot being encoded relative to is called the baseline. How you do this encoding is up to you, there are many fancy tricks, but the basic, big order of magnitude win comes when you say: &amp;ldquo;Cube n in snapshot 110 is the same as the baseline. One bit: Not changed!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;To implement delta encoding it is of course essential that the sender only encodes snapshots relative to baselines that the other side has received, otherwise they cannot decode the snapshot. Therefore, to handle packet loss the receiver has to continually send &amp;ldquo;ack&amp;rdquo; packets back to the sender saying: &amp;ldquo;the most recent snapshot I have received is snapshot n&amp;rdquo;. The sender takes this most recent ack and if it is more recent than the previous ack updates the baseline snapshot to this value. The next time a packet is sent out the snapshot is encoded relative to this more recent baseline. This process happens continuously such that the steady state becomes the sender encoding snapshots relative to a baseline that is roughly RTT (round trip time) in the past.&lt;/p&gt;
&lt;p&gt;There is one slight wrinkle: for one round trip time past initial connection the sender doesn&amp;rsquo;t have any baseline to encode against because it hasn&amp;rsquo;t received an ack from the receiver yet. I handle this by adding a single flag to the packet that says: &amp;ldquo;this snapshot is encoded relative to the initial state of the simulation&amp;rdquo; which is known on both sides. Another option if the receiver doesn&amp;rsquo;t know the initial state is to send down the initial state using a non-delta encoded path, eg. as one large data block, and once that data block has been received delta encoded snapshots are sent first relative to the initial baseline in the data block, then eventually converge to the steady state of baselines at RTT.&lt;/p&gt;
&lt;video controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_delta_not_changed.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_delta_not_changed.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;As you can see above this is a big win. We can refine this approach and lock in more gains but we&amp;rsquo;re not going to get another order of magnitude improvement past this point. From now on we&amp;rsquo;re going to have to work pretty hard to get a number of small, cumulative gains to reach our goal of 256 kilobits per-second.&lt;/p&gt;
&lt;h2 id=&#34;incremental-improvements&#34;&gt;Incremental Improvements&lt;/h2&gt;
&lt;p&gt;First small improvement. Each cube that isn&amp;rsquo;t sent costs 1 bit (not changed). There are 901 cubes so we send 901 bits in each packet even if no cubes have changed. At 60 packets per-second this adds up to 54kbps of bandwidth. Seeing as there are usually significantly less than 901 changed cubes per-snapshot in the common case, we can reduce bandwidth by sending only changed cubes with a cube index [0,900] identifying which cube it is. To do this we need to add a 10 bit index per-cube to identify it.&lt;/p&gt;
&lt;p&gt;There is a cross-over point where it is actually more expensive to send indices than not-changed bits. With 10 bit indices, the cost of indexing is 10*n bits. Therefore it&amp;rsquo;s more efficient to use indices if we are sending 90 cubes or less (900 bits). We can evaluate this per-snapshot and send a single bit in the header indicating which encoding we are using: 0 = indexing, 1 = changed bits. This way we can use the most efficient encoding for the number of changed cubes in the snapshot.&lt;/p&gt;
&lt;p&gt;This reduces the steady state bandwidth when all objects are stationary to around 15 kilobits per-second. This bandwidth is composed entirely of our own packet header (uint16 sequence, uint16 base, bool initial) plus IP and UDP headers (28 bytes).&lt;/p&gt;
&lt;p&gt;Next small gain. What if we encoded the cube index relative to the previous cube index? Since we are iterating across and sending changed cube indices in-order: cube 0, cube 10, cube 11, 50, 52, 55 and so on we could easily encode the 2nd and remaining cube indices relative to the previous changed index, e.g.: +10, +1, +39, +2, +3. If we are smart about how we encode this index offset we should be able to, on average, represent a cube index with less than 10 bits.&lt;/p&gt;
&lt;p&gt;The best encoding depends on the set of objects you interact with. If you spend a lot of time moving horizontally while blowing cubes from the initial cube grid then you hit lots of +1s. If you move vertically from initial state you hit lots of +30s (sqrt(900)). What we need then is a general purpose encoding capable of representing statistically common index offsets with less bits.&lt;/p&gt;
&lt;p&gt;After a small amount of experimentation I came up with this simple encoding:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;[1,8] =&amp;gt; 1 + 3 (4 bits)&lt;/li&gt;
    &lt;li&gt;[9,40] =&amp;gt; 1 + 1 + 5 (7 bits)&lt;/li&gt;
    &lt;li&gt;[41,900] =&amp;gt; 1 + 1 + 10 (12 bits)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice how large relative offsets are actually more expensive than 10 bits. It&amp;rsquo;s a statistical game. The bet is that we&amp;rsquo;re going to get a much larger number of small offsets so that the win there cancels out the increased cost of large offsets. It works. With this encoding I was able to get an average of 5.5 bits per-relative index.&lt;/p&gt;
&lt;p&gt;Now we have a slight problem. We can no longer easily determine whether changed bits or relative indices are the best encoding. The solution I used is to run through a mock encoding of all changed cubes on packet write and count the number of bits required to encode relative indices. If the number of bits required is larger than 901, fallback to changed bits.&lt;/p&gt;
&lt;p&gt;Here is where we are so far, which is a significant improvement:&lt;/p&gt;
&lt;video controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_delta_relative_index.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_delta_relative_index.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Next small improvement. Encoding position relative to (offset from) the baseline position. Here there are a lot of different options. You can just do the obvious thing, eg. 1 bit relative position, and then say 8-10 bits per-component if all components have deltas within the range provided by those bits, otherwise send the absolute position (50 bits).&lt;/p&gt;
&lt;p&gt;This gives a decent encoding but we can do better. If you think about it then there will be situations where one position component is large but the others are small. It would be nice if we could take advantage of this and send these small components using less bits.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a statistical game and the best selection of small and large ranges per-component depend on the data set. I couldn&amp;rsquo;t really tell looking at a noisy bandwidth meter if I was making any gains so I captured the position vs. position base data set and wrote it to a text file for analysis.&lt;/p&gt;
&lt;p&gt;I wrote a short ruby script to find the best encoding with a greedy search. The best bit-packed encoding I found for the data set works like this: 1 bit small per delta component followed by 5 bits if small [-16,+15] range, otherwise the delta component is in [-256,+255] range and is sent with 9 bits. If any component delta values are outside the large range, fallback to absolute position. Using this encoding I was able to obtain on average 26.1 bits for changed positions values.&lt;/p&gt;
&lt;h2 id=&#34;delta-encoding-smallest-three&#34;&gt;Delta Encoding Smallest Three&lt;/h2&gt;
&lt;p&gt;Next I figured that relative orientation would be a similar easy big win. Problem is that unlike position where the range of the position offset is quite small relative to the total position space, the change in orientation in 100ms is a much larger percentage of total quaternion space.&lt;/p&gt;
&lt;p&gt;I tried a bunch of stuff without good results. I tried encoding the 4D vector of the delta orientation directly and recomposing the largest component post delta using the same trick as smallest 3. I tried calculating the relative quaternion between orientation and base orientation, and since I knew that w would be large for this (rotation relative to identity) I could avoid sending 2 bits to identify the largest component, but in turn would need to send one bit for the sign of w because I don&amp;rsquo;t want to negate the quaternion. The best compression I could find using this scheme was only 90% of the smallest three. Not very good.&lt;/p&gt;
&lt;p&gt;I was about to give up but I run some analysis over the smallest three representation. I found that 90% of orientations in the smallest three format had the same largest component index as their base orientation 100ms ago. This meant that it could be profitable to delta encode the smallest three format directly. What&amp;rsquo;s more I found that there would be no additional precision loss with this method when reconstructing the orientation from its base. I exported the quaternion values from a typical run as a data set in smallest three format and got to work trying the same multi-level small/large range per-component greedy search that I used for position.&lt;/p&gt;
&lt;p&gt;The best encoding found was: 5-8, meaning [-16,+15] small and [-128,+127] large. One final thing: as with position the large range can be extended a bit further by knowing that if the component value is not small the value cannot be in the [-16,+15] range. I leave the calculation of how to do this as an exercise for the reader. Be careful not to collapse two values onto zero.&lt;/p&gt;
&lt;p&gt;The end result is an average of 23.3 bits per-relative quaternion. That&amp;rsquo;s 80.3% of the absolute smallest three.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s just about it but there is one small win left. Doing one final analysis pass over the position and orientation data sets I noticed that 5% of positions are unchanged from the base position after being quantized to 0.5mm resolution, and 5% of orientations in smallest three format are also unchanged from base.&lt;/p&gt;
&lt;p&gt;These two probabilities are mutually exclusive, because if both are the same then the cube would be unchanged and therefore not sent, meaning a small statistical win exists for 10% of cube state if we send one bit for position changing, and one bit for orientation changing. Yes, 90% of cubes have 2 bits overhead added, but the 10% of cubes that save 20+ bits by sending 2 bits instead of 23.3 bit orientation or 26.1 bits position make up for that providing a small overall win of roughly 2 bits per-cube.&lt;/p&gt;
&lt;video controls=&#34;controls&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_delta_end_result.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/snapshot_compression_delta_end_result.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;As you can see the end result is pretty good.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s about as far as I can take it using traditional hand-rolled bit-packing techniques. You can find source code for my implementation of all compression techniques mentioned in this article &lt;a href=&#34;https://gist.github.com/gafferongames/bb7e593ba1b05da35ab6&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to get even better compression using a different approach. Bit-packing is inefficient because not all bit values have equal probability of 0 vs 1. No matter how hard you tune your bit-packer a context aware arithmetic encoding can beat your result by more accurately modeling the probability of values that occur in your data set. This &lt;a href=&#34;https://github.com/rygorous/gaffer_net/blob/master/main.cpp&#34;&gt;implementation&lt;/a&gt; by Fabian Giesen beat my best bit-packed result by 25%.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also possible to get a much better result for delta encoded orientations using the previous baseline orientation values to estimate angular velocity and predict future orientations rather than delta encoding the smallest three representation directly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/state_synchronization/&#34;&gt;State Synchronization&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Snapshot Interpolation</title>
      <link>https://gafferongames.com/post/snapshot_interpolation/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/snapshot_interpolation/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/networked-physics/&#34;&gt;Networked Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/deterministic_lockstep/&#34;&gt;previous article&lt;/a&gt; we networked a physics simulation using deterministic lockstep. Now, in this article we&amp;rsquo;re going to network the same simulation with a completely different technique: &lt;strong&gt;snapshot interpolation&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;While deterministic lockstep is very efficient in terms of bandwidth, it&amp;rsquo;s not always possible to make your simulation deterministic. Floating point determinism across platforms is &lt;a href=&#34;https://gafferongames.com/post/floating_point_determinism/&#34;&gt;hard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, as the player counts increase, deterministic lockstep becomes problematic: you can&amp;rsquo;t simulate frame n until you receive input from &lt;em&gt;all&lt;/em&gt; players for that frame, so players end up waiting for the most lagged player. Because of this, I recommend deterministic lockstep for 2-4 players at most.&lt;/p&gt;
&lt;p&gt;So if your simulation is not deterministic or you want higher player counts then you need a different technique. Snapshot interpolation fits the bill nicely. It is in many ways the polar opposite of deterministic lockstep: instead of running two simulations, one on the left and one on the right, and using perfect determinism and synchronized inputs keep them in sync, snapshot interpolation doesn&amp;rsquo;t run any simulation on the right side at all!&lt;/p&gt;
&lt;h2 id=&#34;snapshots&#34;&gt;Snapshots&lt;/h2&gt;
&lt;p&gt;Instead, we capture a &lt;strong&gt;snapshot&lt;/strong&gt; of all relevant state from the simulation on the left and transmit it to the right, then on the right side we use those snapshots to reconstruct a visual approximation of the simulation, all without running the simulation itself.&lt;/p&gt;
&lt;p&gt;As a first pass, let&amp;rsquo;s send across the state required to render each cube:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct CubeState
    {
        bool interacting;
        vec3f position;
        quat4f orientation;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;ve worked out by now that the cost of this technique is increased bandwidth usage. Greatly increased bandwidth usage. Hold on to your neckbeards, because a snapshot contains the visual state for the entire simulation. With a bit of math we can see that each cube serializes down to 225 bits or 28.1 bytes. Since there are 900 cubes in our simulation that means each snapshot is roughly 25 kilobytes. That&amp;rsquo;s pretty big!&lt;/p&gt;
&lt;p&gt;At this point I would like everybody to relax, take a deep breath, and imagine we live in a world where I can actually send a packet this large 60 times per-second over the internet and not have everything explode. Imagine I have FIOS &lt;em&gt;(I do)&lt;/em&gt;, or I&amp;rsquo;m sitting over a backbone link to another computer that is also on the backbone. Imagine I live in South Korea. Do whatever you need to do to suspend disbelief, but most of all, don&amp;rsquo;t worry, because I&amp;rsquo;m going to spend the entire next article showing you how to optimize snapshot bandwidth.&lt;/p&gt;
&lt;p&gt;When we send snapshot data in packets, we include at the top a 16 bit sequence number. This sequence number starts at zero and increases with each packet sent. We use this sequence number on receive to determine if the snapshot in a packet is newer or older than the most recent snapshot received. If it&amp;rsquo;s older then it&amp;rsquo;s thrown away.&lt;/p&gt;
&lt;p&gt;Each frame we just render the most recent snapshot received on the right:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_60pps_jitter.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_60pps_jitter.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;Look closely though, and even though we&amp;rsquo;re sending the data as rapidly as possible (one packet per-frame) you can still see hitches on the right side. This is because the internet makes no guarantee that packets sent 60 times per-second arrive nicely spaced 1/60 of a second apart. Packets are jittered. Some frames you receive two snapshot packets. Other frames you receive none.&lt;/p&gt;
&lt;h1 id=&#34;jitter-and-hitches&#34;&gt;Jitter and Hitches&lt;/h1&gt;
&lt;p&gt;This is actually a really common thing when you first start networking. You start out playing your game over LAN and notice you can just slam out packets really fast (60pps) and most of the time your game looks great because over the LAN those packets actually do tend to arrive at the same rate they were sent&amp;hellip; and then you start trying to play your game over wireless or the internet and you start seeing hitches. Don&amp;rsquo;t worry. There are ways to handle this!&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s look at how much bandwidth we&amp;rsquo;re sending with this naive approach. Each packet is 25312.5 bytes plus 28 bytes for IP + UDP header and 2 bytes for sequence number. That&amp;rsquo;s 25342.5 bytes per-packet and at 60 packets per-second this gives a total of 1520550 bytes per-second or 11.6 megabit/sec. Now there are certainly internet connections out there that can support that amount of traffic&amp;hellip; but since, let&amp;rsquo;s be honest, we&amp;rsquo;re not really getting a lot of benefit blasting packets out 60 times per-second with all the jitter, let&amp;rsquo;s pull it back a bit and send only 10 snapshots per-second:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_no_interpolation.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_no_interpolation.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;You can see how this looks above. Not so great on the right side but at least we&amp;rsquo;ve reduced bandwidth by a factor of six to around 2 megabit/sec. We&amp;rsquo;re definitely headed in the right direction.&lt;/p&gt;
&lt;h2 id=&#34;linear-interpolation&#34;&gt;Linear Interpolation&lt;/h2&gt;
&lt;p&gt;Now for the trick with snapshots. What we do is instead of immediately rendering snapshot data received is that we buffer snapshots for a short amount of time in an interpolation buffer. This interpolation buffer holds on to snapshots for a period of time such that you have not only the snapshot you want to render but also, statistically speaking, you are very likely to have the next snapshot as well. Then as the right side moves forward in time we interpolate between the position and orientation for the two slightly delayed snapshots providing the illusion of smooth movement. In effect, we&amp;rsquo;ve traded a small amount of added latency for smoothness.&lt;/p&gt;
&lt;p&gt;You may be surprised at just how good it looks with linear interpolation @ 10pps:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_linear_interpolation.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_linear_interpolation.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;Look closely though and you can see some artifacts on the right side. The first is a subtle position jitter when the player cube is hovering in the air. This is your brain detecting 1st order discontinuity at the sample points of position interpolation. The other artifact occurs when a bunch of cubes are in a katamari ball, you can see a sort of &amp;ldquo;pulsing&amp;rdquo; as the speed of rotation increases and decreases. This occurs because attached cubes interpolate linearly between two sample points rotating around the player cube, effectively interpolating &lt;em&gt;through&lt;/em&gt; the player cube as they take the shortest linear path between two points on a circle.&lt;/p&gt;
&lt;h2 id=&#34;hermite-interpolation&#34;&gt;Hermite Interpolation&lt;/h2&gt;
&lt;p&gt;I find these artifacts unacceptable but I don&amp;rsquo;t want to increase the packet send rate to fix them. Let&amp;rsquo;s see what we can do to make it look better at the same send rate instead. One thing we can try is upgrading to a more accurate interpolation scheme for position, one that interpolates between position samples while considering the linear velocity at each sample point.&lt;/p&gt;
&lt;p&gt;This can be done with an &lt;a href=&#34;http://en.wikipedia.org/wiki/Hermite_interpolation&#34;&gt;hermite spline&lt;/a&gt; (pronounced &amp;ldquo;air-mitt&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;Unlike other splines with control points that affect the curve indirectly, the hermite spline is guaranteed to pass through the start and end points while matching the start and end velocities. This means that velocity is smooth across sample points and cubes in the katamari ball tend to rotate around the cube rather than interpolate through it at speed.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_hermite_interpolation.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_hermite_interpolation.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;Above you can see hermite interpolation for position @ 10pps. Bandwidth has increased slightly because we need to include linear velocity with each cube in the snapshot, but we&amp;rsquo;re able to significantly increase the quality at the same send rate. I can no longer see any artifacts. Go back and compare this with the raw, non-interpolated 10pps version. It really is amazing that we&amp;rsquo;re able to reconstruct the simulation with this level of quality at such a low send rate.&lt;/p&gt;
&lt;p&gt;As an aside, I found it was not necessary to perform higher order interpolation for orientation quaternions to get smooth interpolation. This is great because I did a lot of research into exactly interpolating between orientation quaternions with a specified angular velocity at sample points and it seemed difficult. All that was needed to achieve an acceptable result was to switch from linear interpolation + normalize (nlerp) to spherical linear interpolation (slerp) to ensure constant angular speed for orientation interpolation.&lt;/p&gt;
&lt;p&gt;I believe this is because cubes in the simulation tend to have mostly constant angular velocity while in the air and large angular velocity changes occur only discontinuously when collisions occur. It could also be because orientation tends to change slowly while in the air vs. position which changes rapidly relative to the number of pixels affected on screen. Either way, it seems that slerp is good enough and that&amp;rsquo;s great because it means we don&amp;rsquo;t need to send angular velocity in the snapshot.&lt;/p&gt;
&lt;h2 id=&#34;handling-real-world-conditions&#34;&gt;Handling Real World Conditions&lt;/h2&gt;
&lt;p&gt;Now we have to deal with packet loss. After the discussion of UDP vs. TCP in the previous article I&amp;rsquo;m sure you can see why we would never consider sending snapshots over TCP.&lt;/p&gt;
&lt;p&gt;Snapshots are time critical but unlike inputs in deterministic lockstep snapshots don&amp;rsquo;t need to be reliable. If a snapshot is lost we can just skip past it and interpolate towards a more recent snapshot in the interpolation buffer. We don&amp;rsquo;t ever want to stop and wait for a lost snapshot packet to be resent. This is why you should always use UDP for sending snapshots.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll let you in on a secret. Not only were the linear and hermite interpolation videos above recorded at a send rate of 10 packets per-second, they were also recorded at 5% packet loss with +/- 2 frames of jitter @ 60fps. How I handled packet loss and jitter for those videos is by simply ensuring that snapshots are held in the interpolation buffer for an appropriate amount of time before interpolation.&lt;/p&gt;
&lt;p&gt;My rule of thumb is that the interpolation buffer should have enough delay so that I can lose two packets in a row and still have something to interpolate towards. Experimentally I&amp;rsquo;ve found that the amount of delay that works best at 2-5% packet loss is 3X the packet send rate. At 10 packets per-second this is 300ms. I also need some extra delay to handle jitter, which in my experience is typically only one or two frames @ 60fps, so the interpolation videos above were recorded with a delay of 350ms.&lt;/p&gt;
&lt;p&gt;Adding 350 milliseconds delay seems like a lot. And it is. But, if you try to skimp you end up hitching for 1/10th of a second each time a packet is lost. One technique that people often use to hide the delay added by the interpolation buffer in other areas (such as FPS, flight simulator, racing games and so on) is to use extrapolation. But in my experience, extrapolation doesn&amp;rsquo;t work very well for rigid bodies because their motion is non-linear and unpredictable. Here you can see an extrapolation of 200ms, reducing overall delay from 350 ms to just 150ms:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_extrapolation.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/snapshot_interpolation_10pps_extrapolation.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;Problem is it&amp;rsquo;s just not very good. The reason is that the extrapolation doesn&amp;rsquo;t know anything about the physics simulation. Extrapolation doesn&amp;rsquo;t know about collision with the floor so cubes extrapolate down through the floor and then spring back up to correct. Prediction doesn&amp;rsquo;t know about the spring force holding the player cube up in the air so it the cube moves slower initially upwards than it should and has to snap to catch up. It also doesn&amp;rsquo;t know anything about collision and how collision response works, so the cube rolling across the floor and other cubes are also mispredicted. Finally, if you watch the katamari ball you&amp;rsquo;ll see that the extrapolation predicts the attached cubes as continuing to move along their tangent velocity when they should rotate with the player cube.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You could conceivably spend a great deal of time to improve the quality of this extrapolation and make it aware of various movement modes for the cubes. You could take each cube and make sure that at minimum the cube doesn&amp;rsquo;t go through the floor. You could add some approximate collision detection or response using bounding spheres between cubes. You could even take the cubes in the katamari ball and make them predict motion to rotate around with the player cube.&lt;/p&gt;
&lt;p&gt;But even if you do all this there will still be misprediction because you simply can&amp;rsquo;t accurately match a physics simulation with an approximation. If your simulation is mostly linear motion, eg. fast moving planes, boats, space ships &amp;ndash; you may find that a simple extrapolation works well for short time periods (50-250ms or so), but in my experience as soon as objects start colliding with other non-stationary objects, extrapolation starts to break down.&lt;/p&gt;
&lt;p&gt;How can we reduce the amount of delay added for interpolation? 350ms still seems unacceptable and we can&amp;rsquo;t use extrapolation to reduce this delay without adding a lot of inaccuracy. The solution is simple: &lt;em&gt;increase the send rate!&lt;/em&gt; If we send 30 snapshots per-second we can get the same amount of packet loss protection with a delay of 150ms. 60 packets per-second needs only 85ms.&lt;/p&gt;
&lt;p&gt;In order to increase the send rate we&amp;rsquo;re going to need some pretty good bandwidth optimizations. But don&amp;rsquo;t worry, there&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; we can do to optimize bandwidth. So much so that there was too much stuff to fit in this article and I had to insert an extra unplanned article just to cover all of it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE&lt;/strong&gt;: &lt;a href=&#34;https://gafferongames.com/post/snapshot_compression/&#34;&gt;Snapshot Compression&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Deterministic Lockstep</title>
      <link>https://gafferongames.com/post/deterministic_lockstep/</link>
      <pubDate>Sat, 29 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/deterministic_lockstep/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/networked-physics/&#34;&gt;Networked Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/introduction_to_networked_physics/&#34;&gt;previous article&lt;/a&gt; we explored the physics simulation we&amp;rsquo;re going to network in this article series. In this article specifically, we&amp;rsquo;re going to network this physics simulation using &lt;strong&gt;deterministic lockstep&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Deterministic lockstep is a method of networking a system from one computer to another by sending only the &lt;em&gt;inputs&lt;/em&gt; that control that system, rather than the &lt;em&gt;state&lt;/em&gt; of that system. In the context of networking a physics simulation, this means we send across a small amount of input, while avoiding sending state like position, orientation, linear velocity and angular velocity per-object.&lt;/p&gt;
&lt;p&gt;The benefit is that bandwidth is proportional to the size of the input, not the number of objects in the simulation. Yes, with deterministic lockstep you can network a physics simulation of one million objects with the same bandwidth as just one.&lt;/p&gt;
&lt;p&gt;While this sounds great in theory, in practice it&amp;rsquo;s difficult to implement deterministic lockstep because most physics simulations are not deterministic. Differences in floating point behavior between compilers, OS&amp;rsquo;s and even instruction sets make it almost impossible to guarantee determinism for floating point calculations.&lt;/p&gt;
&lt;h2 id=&#34;determinism&#34;&gt;Determinism&lt;/h2&gt;
&lt;p&gt;Determinism means that given the same initial condition and the same set of inputs your simulation gives exactly the same result. And I do mean &lt;em&gt;exactly&lt;/em&gt; the same result.&lt;/p&gt;
&lt;p&gt;Not close. Not near enough. &lt;strong&gt;Exactly the same&lt;/strong&gt;. Exact down to the bit-level. So exact, you could take a checksum of your entire physics state at the end of each frame and it would be identical.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_desync.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_desync.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;Above you can see a simulation that is &lt;em&gt;almost&lt;/em&gt; deterministic. The simulation on the left is controlled by the player. The simulation on the right has exactly the same inputs applied with a two second delay starting from the same initial condition. Both simulations step forward with the same delta time (a necessary precondition to ensure exactly the same result) and both simulations apply the same inputs. Notice how after the smallest divergence the simulation gets further and further out of sync. This simulation is &lt;strong&gt;non-deterministic&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s going on is that the physics engine I&amp;rsquo;m using (&lt;a href=&#34;http://www.ode.org/&#34;&gt;Open Dynamics Engine&lt;/a&gt;) uses a random number generator inside its solver to randomize the order of constraint processing to improve stability. It&amp;rsquo;s open source. Take a look and see! Unfortunately this breaks determinism because the simulation on the left processes constraints in a different order to the simulation on the right, leading to slightly different results.&lt;/p&gt;
&lt;p&gt;Luckily all that is required to make ODE deterministic on the same machine, with the same complied binary and on the same OS (is that enough qualifications?) is to set its internal random seed to the current frame number before running the simulation via dSetRandomSeed. Once this is done ODE gives exactly the same result and the left and right simulations stay in sync.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;And now a word of warning. Even though the simulation above is deterministic on the same machine, that does &lt;em&gt;not&lt;/em&gt; necessarily mean it would also be deterministic across different compilers, a different OS or different machine architectures (eg. PowerPC vs. Intel). In fact, it&amp;rsquo;s probably not even deterministic between debug and release builds due to floating point optimizations.&lt;/p&gt;
&lt;p&gt;Floating point determinism is a complicated subject and there&amp;rsquo;s no silver bullet.&lt;/p&gt;
&lt;p&gt;For more information please refer to this &lt;a href=&#34;https://gafferongames.com/post/floating_point_determinism/&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;networking-inputs&#34;&gt;Networking Inputs&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s get down to implementation.&lt;/p&gt;
&lt;p&gt;Our example physics simulation is driven by keyboard input: arrow keys apply forces to make the player cube move, holding space lifts the cube up and blows other cubes around, and holding &amp;lsquo;z&amp;rsquo; enables katamari mode.&lt;/p&gt;
&lt;p&gt;How can we network these inputs? Must we send the entire state of the keyboard? No. It&amp;rsquo;s not necessary to send the entire keyboard state, only the state of the keys that affect the simulation. What about key press and release events then? No. This is also not a good strategy. We need to ensure that exactly the same input is applied on the right side, at exactly the same time, so we can&amp;rsquo;t just send &amp;lsquo;key pressed&amp;rsquo;, and &amp;lsquo;key released&amp;rsquo; events over TCP.&lt;/p&gt;
&lt;p&gt;What we do instead is represent the input with a struct and at the beginning of each simulation frame on the left side, sample this struct from the keyboard:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct Input
    {
        bool left;
        bool right;
        bool up;
        bool down;
        bool space;
        bool z;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we send that input from the left simulation to the right simulation in a way that the simulation on the right side knows that the input belongs to frame n.&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s the key part: the simulation on the right can only simulate frame n when it has the input for that frame. If it doesn&amp;rsquo;t have the input, it has to wait.&lt;/p&gt;
&lt;p&gt;For example, if you were sending across using TCP you could simply send the inputs and nothing else, and on the other side you could read the packets coming in, and each input received corresponds to one frame for the simulation to step forward. If no input arrives for a given render frame, the right side can&amp;rsquo;t advance forward, it has to wait for the next input to arrive.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s move forward with TCP, you&amp;rsquo;ve disabled &lt;a href=&#34;http://en.wikipedia.org/wiki/Nagle&#39;s_algorithm&#34;&gt;Nagle&amp;rsquo;s Algorithm&lt;/a&gt;, and you&amp;rsquo;re sending inputs from the left to the right simulation once per-frame (60 times per-second).&lt;/p&gt;
&lt;p&gt;Here it gets a little complicated. Since we can&amp;rsquo;t simulate forward unless we have the input for the next frame, it&amp;rsquo;s not enough to just take whatever inputs arrive over the network and then run the simulation on inputs as they arrive because the result would be very jittery. Data sent across the network at 60HZ doesn&amp;rsquo;t typically arrive nicely spaced, 1/60th of a second between each packet.&lt;/p&gt;
&lt;p&gt;If you want this sort of behavior, you have to implement it yourself.&lt;/p&gt;
&lt;h2 id=&#34;playout-delay-buffer&#34;&gt;Playout Delay Buffer&lt;/h2&gt;
&lt;p&gt;Such a device is called a playout delay buffer.&lt;/p&gt;
&lt;p&gt;Unfortunately, the subject of playout delay buffers is a patent minefield. I would not advise searching for &amp;ldquo;playout delay buffer&amp;rdquo; or &amp;ldquo;adaptive playout delay&amp;rdquo; while at work. But in short, what you want to do is buffer packets for a short amount of time so they &lt;em&gt;appear&lt;/em&gt; to be arriving at a steady rate even though in reality they arrive somewhat jittered.&lt;/p&gt;
&lt;p&gt;What you&amp;rsquo;re doing here is similar to what Netflix does when you stream a video. You pause a little bit initially so you have a buffer in case some packets arrive late and then once the delay has elapsed video frames are presented spaced the correct time apart. If your buffer isn&amp;rsquo;t large enough then the video playback will be hitchy. With deterministic lockstep your simulation behaves exactly the same way: showing hitches when the buffer isn&amp;rsquo;t large enough to smooth out the jitter. Of course, the cost of increasing the buffer size is additional latency, so you can&amp;rsquo;t just buffer your way out of all problems. At some point the user says enough! That&amp;rsquo;s too much latency added. No sir, I will &lt;em&gt;not&lt;/em&gt; play your game with 1 second of extra delay :)&lt;/p&gt;
&lt;p&gt;My playout delay buffer implementation is really simple. You add inputs to it indexed by frame, and when the very first input is received, it stores the current local time on the receiver machine and from that point on delivers packets assuming they should play at that time + 100ms. You&amp;rsquo;ll likely need to something more complex for a real world situation, perhaps something that handles clock drift, and detecting when the simulation should slightly speed up or slow down to maintain a nice amount of buffering safety (being &amp;ldquo;adaptive&amp;rdquo;) while minimizing overall latency, but this is reasonably complicated and probably worth an article in itself.&lt;/p&gt;
&lt;p&gt;The goal is that under average conditions the playout delay buffer provides a steady stream of inputs for frame n, n+1, n+2 and so on, nicely spaced 1/60th of a second apart with no drama. In the worst case the time arrives for frame n and the input hasn&amp;rsquo;t arrived yet it returns null and the simulation is forced to wait. If packets get bunched up and delivered late, it&amp;rsquo;s possibly to have multiple inputs ready to dequeue per-frame. In this case I limit to 4 simulated frames per-render frame so the simulation has a chance to catch up, but doesn&amp;rsquo;t simulate for so long that it falls further behind, aka. the &amp;ldquo;spiral of death&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;is-tcp-good-enough&#34;&gt;Is TCP good enough?&lt;/h2&gt;
&lt;p&gt;Using this playout buffer strategy and sending inputs across TCP we ensure that all inputs arrive reliably and in-order. This is convenient, and after all, TCP is designed for exactly this situation: reliable-ordered data.&lt;/p&gt;
&lt;p&gt;In fact, It&amp;rsquo;s a common thing out there on the Internet for pundits to say stuff like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/gamedev/comments/1tvbe0/is_it_just_me_or_is_networking_really_hard/&#34;&gt;If you need reliable-ordered, you can&amp;rsquo;t do better than TCP!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://thoughtstreams.io/glyph/your-game-doesnt-need-udp-yet/&#34;&gt;Your game doesn&amp;rsquo;t need UDP (yet)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I&amp;rsquo;m here to tell you this kind of thinking is &lt;strong&gt;dead wrong&lt;/strong&gt;.&lt;/p&gt;
&lt;video autoplay preload=&#34;auto&#34; loop=&#34;true&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_tcp_100ms_1pc.mp4&#34; type=&#34;video/mp4&#34;/&gt;
&lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_tcp_100ms_1pc.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;Above you can see the simulation networked using deterministic lockstep over TCP at 100ms latency and 1% packet loss. If you look closely on the right side you can see hitches every few seconds. What&amp;rsquo;s happening here is that each time a packet is lost, TCP has to wait RTT*2 while it is resent (actually it can be much worse, but I&amp;rsquo;m being generous&amp;hellip;). The hitches happen because with deterministic lockstep the right simulation can&amp;rsquo;t simulate frame n without input n, so it has to pause to wait for input n to be resent!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s not all. It gets significantly worse as latency and packet loss increase. Here is the same simulation networked using deterministic lockstep over TCP at 250ms latency and 5% packet loss:&lt;/p&gt;
&lt;video autoplay preload=&#34;auto&#34; loop=&#34;true&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_tcp_250ms_5pc.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_tcp_250ms_5pc.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;Now I will concede that if you have no packet loss and/or a very small amount of latency then you very well may get acceptable results with TCP. But please be aware that if you use TCP it behaves &lt;em&gt;terribly&lt;/em&gt; under bad network conditions.&lt;/p&gt;
&lt;h2 id=&#34;can-we-do-better-than-tcp&#34;&gt;Can we do better than TCP?&lt;/h2&gt;
&lt;p&gt;Can we beat TCP at its own game. Reliable-ordered delivery?&lt;/p&gt;
&lt;p&gt;The answer is an emphatic &lt;b&gt;YES&lt;/b&gt;. But &lt;em&gt;only&lt;/em&gt; if we change the rules of the game.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the trick. We need to ensure that all inputs arrive reliably and in order. But if we send inputs in UDP packets, some of those packets will be lost. What if, instead of detecting packet loss after the fact and resending lost packets, we redundantly include &lt;em&gt;all inputs&lt;/em&gt; in each UDP packet until we know for sure the other side has received them?&lt;/p&gt;
&lt;p&gt;Inputs are very small (6 bits). Let&amp;rsquo;s say we&amp;rsquo;re sending 60 inputs per-second (60fps simulation) and round trip time we know is going the be somewhere in 30-250ms range. Let&amp;rsquo;s say just for fun that it could be up to 2 seconds worst case and at this point we&amp;rsquo;ll time out the connection (screw that guy). This means that on average we only need to include between 2-15 frames of input and worst case we&amp;rsquo;ll need 120 inputs. Worst case is 120*6 = 720 bits. That&amp;rsquo;s only 90 bytes of input! That&amp;rsquo;s totally reasonable.&lt;/p&gt;
&lt;p&gt;We can do even better. It&amp;rsquo;s not common for inputs to change every frame. What if when we send our packet instead we start with the sequence number of the most recent input, and the 6 bits of the first (oldest) input, and the number of un-acked inputs. Then as we iterate across these inputs to write them to the packet we can write a single bit (1) if the next input is different to the previous, and (0) if the input is the same. So if the input is different from the previous frame we write 7 bits (rare). If the input is identical we write just one (common). Where inputs change infrequently this is a big win and in the worst case this really isn&amp;rsquo;t that bad. 120 bits of extra data sent. Just 15 bytes overhead worst case.&lt;/p&gt;
&lt;p&gt;Of course another packet is required from the right simulation to the left so the left side knows which inputs have been received. Each frame the right simulation reads input packets from the network before adding them to the playout delay buffer and keeps track of the most recent input it has received and sends this back to the left as an &amp;ldquo;ack&amp;rdquo; or acknowledgment for inputs.&lt;/p&gt;
&lt;p&gt;When the left side receives this ack it discards any inputs older than the most recent received input. This way we have only a small number of inputs in flight proportional to the round trip time between the two simulations.&lt;/p&gt;
&lt;h2 id=&#34;flawless-victory&#34;&gt;Flawless Victory&lt;/h2&gt;
&lt;p&gt;We have beaten TCP by changing the rules of the game.&lt;/p&gt;
&lt;p&gt;Instead of &amp;ldquo;implementing 95% of TCP on top of UDP&amp;rdquo; we have implemented something &lt;em&gt;totally different&lt;/em&gt; and better suited to our requirements. A protocol that redundantly sends inputs because we know they are small, so we never have to wait for retransmission.&lt;/p&gt;
&lt;p&gt;So exactly how much better is this approach than sending inputs over TCP?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look&amp;hellip;&lt;/p&gt;
&lt;video autoplay preload=&#34;auto&#34; loop=&#34;true&#34; width=&#34;100%&#34;&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_udp_2sec_25pc.mp4&#34; type=&#34;video/mp4&#34;/&gt;
  &lt;source src=&#34;http://gafferongames.com/videos/deterministic_lockstep_udp_2sec_25pc.webm&#34; type=&#34;video/webm&#34;/&gt;
&lt;/video&gt;
&lt;p&gt;The video above shows deterministic lockstep synchronized over UDP using this technique with &lt;strong&gt;2 seconds&lt;/strong&gt; of latency and &lt;strong&gt;25% packet loss&lt;/strong&gt;. Imagine how awful TCP would look under these conditions.&lt;/p&gt;
&lt;p&gt;So in conclusion, even where TCP should have the most advantage, in the only networking model that relies on reliable-ordered data, we can still easily whip its ass with a simple protocol built on top of UDP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/snapshot_interpolation/&#34;&gt;Snapshot Interpolation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Networked Physics</title>
      <link>https://gafferongames.com/post/introduction_to_networked_physics/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/introduction_to_networked_physics/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to the first article in &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/networked-physics/&#34;&gt;Networked Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this article series we&amp;rsquo;re going to network a physics simulation three different ways: deterministic lockstep, snapshot interpolation and state synchronization.&lt;/p&gt;
&lt;p&gt;But before we get to this, let&amp;rsquo;s spend some time exploring the physics simulation weâre going to network in this article series:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cube.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cube.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Here Iâve setup a simple simulation of a cube in the open source physics engine &lt;a href=&#34;http://www.ode.org&#34;&gt;ODE&lt;/a&gt;. The player moves around by applying forces at its center of mass. The physics simulation takes this linear motion and calculates friction as the cube collides with the ground, inducing a rolling and tumbling motion.&lt;/p&gt;
&lt;p&gt;This is why I chose a cube instead a sphere. I &lt;em&gt;want&lt;/em&gt; this complex, unpredictable motion because rigid bodies in general move in interesting ways according to their shape.&lt;/p&gt;
&lt;h2 id=&#34;an-interactive-world&#34;&gt;An Interactive World&lt;/h2&gt;
&lt;p&gt;Networked physics get interesting when the player interacts with other physically simulated objects, &lt;em&gt;especially&lt;/em&gt; when those objects push back and affect the motion of the player.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s add some more cubes to the simulation:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cubes_roll.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cubes_roll.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;When the player interacts with a cube it turns red. When that cube comes to rest it turns back to grey (non-interacting).&lt;/p&gt;
&lt;p&gt;While itâs cool to roll around and interact with other cubes, what I really wanted was a way to push &lt;em&gt;lots&lt;/em&gt; of cubes around. What I came up with is this:&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cubes_blow.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cubes_blow.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;As you can see, interactions arenât just direct. Red cubes pushed around by the player turn other cubes they touch red as well. This way, interactions fan out to cover all affected objects.&lt;/p&gt;
&lt;h2 id=&#34;a-complicated-case&#34;&gt;A Complicated Case&lt;/h2&gt;
&lt;p&gt;I also wanted a very complex coupled motion between the player and non-player cubes such they become one system: a group of rigid bodies joined together by constraints.&lt;/p&gt;
&lt;p&gt;To implement this I thought it would be cool if the player could roll around and create a ball of cubes, like in one of my favorite games &lt;a href=&#34;https://en.wikipedia.org/wiki/Katamari_Damacy&#34;&gt;Katamari Damacy&lt;/a&gt;.&lt;/p&gt;
&lt;video preload=&#34;auto&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; width=&#34;100%&#34;&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cubes_katamari.mp4&#34; type=&#34;video/mp4&#34; /&gt;
&lt;source src=&#34;http://gafferongames.com/videos/the_physics_simulation_cubes_katamari.webm&#34; type=&#34;video/webm&#34; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Cubes within a certain distance of the player have a force applied towards the center of the cube. These cubes remain physically simulated while in the katamari ball, they are not just âstuckâ to the player like in the original game.&lt;/p&gt;
&lt;p&gt;This is a very difficult situation for networked physics!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/deterministic_lockstep/&#34;&gt;Deterministic Lockstep&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Collision Response and Coulomb Friction</title>
      <link>https://gafferongames.com/post/collision_response_and_coulomb_friction/</link>
      <pubDate>Sun, 24 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/collision_response_and_coulomb_friction/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt;. Welcome to &lt;a href=&#34;https://gafferongames.com/categories/virtual-go/&#34;&gt;&lt;strong&gt;Virtual Go&lt;/strong&gt;&lt;/a&gt;, my project to create a physically accurate computer simulation of a Go board and stones.&lt;/p&gt;
&lt;p&gt;So far in this series, we have mathematically defined the go stone, rendered it, determined how it moves and rotates, and discussed how its shape affects how it responds to collisions.&lt;/p&gt;
&lt;p&gt;Now in this article we reach our first milestone:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A go stone bouncing and coming to rest on the go board&lt;/strong&gt;.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/board-side-on-swirling-wood-grain.jpg&#34; alt=&#34;stones at rest on board&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;We&amp;rsquo;re going do this using a technique called &lt;a href=&#34;https://en.wikipedia.org/wiki/Collision_response#Impulse-Based_Contact_Model&#34;&gt;impulse-based collision response&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The concept is simple. To handle a collision we apply an impulse, an instantaneous change in momentum, at the point of impact to make the go stone bounce.&lt;/p&gt;
&lt;h2 id=&#34;linear-collision-response&#34;&gt;Linear Collision Response&lt;/h2&gt;
&lt;p&gt;We now pick up where we left off at the end of the &lt;a href=&#34;https://gafferongames.com/post/go_stone_vs_go_board/&#34;&gt;collision detection article&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/contact-point-linear.png&#34; alt=&#34;contact point linear&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;We have a contact point and a contact normal for the collision.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by calculating a collision response impulse without rotation.&lt;/p&gt;
&lt;p&gt;First, take the dot product of the linear momentum of the go stone with the contact normal. If this value is less than zero, it means the go stone is moving towards the go board, and we need to apply an impulse.&lt;/p&gt;
&lt;p&gt;To calculate the impulse we need the concept of &amp;rsquo;elasticity&amp;rsquo;. If the collision is perfectly elastic, the go stone bounces off the board without losing any energy:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/linear-collision-response-elastic.png&#34; alt=&#34;linear collision response elastic&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;If the collision is inelastic then the go stone loses all its vertical motion post-collision and slides along the surface of the board:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/linear-collision-response-inelastic.png&#34; alt=&#34;linear collision response inelastic&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;What we really want is something in between:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/linear-collision-response-coefficient-of-restitution.png&#34; alt=&#34;linear collision response coefficient of restitution&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;To support this we introduce a new concept called the &amp;lsquo;coefficient of restitution&amp;rsquo;. When this value is 1 the collision is perfectly elastic, when it is 0 the collision is inelastic. At 0.5, it&amp;rsquo;s halfway between.&lt;/p&gt;
&lt;p&gt;This gives the following formula:&lt;/p&gt;
&lt;p&gt;[latex]j = -( 1 + e ) \boldsymbol{p} \cdot \boldsymbol{n}[/latex]&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;j is the magnitude of the collision impulse&lt;/li&gt;
&lt;li&gt;e is the coefficient of restitution [0,1]&lt;/li&gt;
&lt;li&gt;p is the linear momentum of the go stone&lt;/li&gt;
&lt;li&gt;n in the contact normal for the collision&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the direction of the collision impulse is &lt;u&gt;always&lt;/u&gt; along the contact normal, so to apply the impulse just multiply the contact normal by j and add it to the linear momentum vector.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code that does this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    void ApplyLinearCollisionImpulse( StaticContact &amp;amp; contact, float e )
    {
        float mass = contact.rigidBody-&amp;gt;mass;
        float d = dot( contact.rigidBody-&amp;gt;linearMomentum, contact.normal );
        float j = max( - ( 1 + e ) * d, 0 );
        contact.rigidBody-&amp;gt;linearMomentum += j * contact.normal;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;rsquo;s the result:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/kveh3fgPg6I&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Now the stone is definitely bouncing, but in the real world stones don&amp;rsquo;t usually hit the board perfectly flat like this. In the common case, they hit at an angle and the collision makes the stone rotate.&lt;/p&gt;
&lt;h2 id=&#34;collision-response-with-rotation&#34;&gt;Collision Response With Rotation&lt;/h2&gt;
&lt;p&gt;To capture this effect we need to calculate collision response with rotation.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/collision-response-rotation.png&#34; alt=&#34;collision response rotation&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Above you can see the effect that we want. If a stone were to collide with the board like this, we know from experience that it would rotate in response.&lt;/p&gt;
&lt;p&gt;We start by calculating the velocity of the stone at the contact point, and take the dot product of this vs. the contact normal to check if the stone is moving towards the board. This is necessary because when the stone is rotating, different points on the stone have different velocities.&lt;/p&gt;
&lt;p&gt;Next, we apply a collision impulse along the contact normal with magnitude j except this impulse is applied at the contact point instead of the center of mass of the stone. This gives the collision response its rotational effect.&lt;/p&gt;
&lt;p&gt;Here is the general equation for the magnitude of this collision impulse.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/impulse-j-general-case.png&#34; alt=&#34;impulse j general case&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;You can find a derivation of this result on &lt;a href=&#34;https://en.wikipedia.org/wiki/Collision_response#Impulse-Based_Reaction_Model&#34;&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Understandably this is quite complex, but in our case the go board never moves, so we can simplify the equation by assigning zero velocity and infinite mass to the second body. This leads to the following, simpler equation:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;todo: need a solution to convert across all the latex equations&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[latex]j = \dfrac{ -( 1 + e ) \boldsymbol{v} \cdot \boldsymbol{n} } { m^{-1} + ( \boldsymbol{I^{-1}} ( \boldsymbol{r} \times \boldsymbol{n} ) \times \boldsymbol{r} ) \cdot \boldsymbol{n} }[/latex]&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;j is the magnitude of the collision impulse&lt;/li&gt;
&lt;li&gt;e is the coefficient of restitution [0,1]&lt;/li&gt;
&lt;li&gt;n in the contact normal for the collision&lt;/li&gt;
&lt;li&gt;v is the the go stone velocity at the contact point&lt;/li&gt;
&lt;li&gt;r is the contact point minus the center of the go stone&lt;/li&gt;
&lt;li&gt;I is the inertia tensor of the go stone&lt;/li&gt;
&lt;li&gt;m is the mass of the go stone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the result of our collision response with rotational effects:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/SCckKzO_280&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, collision response working properly and induces rotation when the go stone hits the board at an angle. It is also able to handle the stone hitting the board while rotating.&lt;/p&gt;
&lt;h2 id=&#34;coulomb-friction&#34;&gt;Coulomb Friction&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t often get to see friction-less collisions in the real world so the video above looks a bit strange. To get realistic behavior out of the go stone, we need to add friction.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll model sliding friction using the Coulomb friction model.&lt;/p&gt;
&lt;p&gt;In this model, the friction impulse is proportional the magnitude of the normal impulse j and is limited by a friction cone defined by the coefficient of friction u:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/coulomb-friction-model.png&#34; alt=&#34;coulomb friction model&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Lower friction coefficient values mean less friction, higher values mean more friction. Typical values for the coefficient of friction are in the range [0,1].&lt;/p&gt;
&lt;p&gt;Calculation of the Coulomb friction impulse is performed much like the calculation of the normal impulse except this time the impulse is in the tangent direction against the direction of sliding.&lt;/p&gt;
&lt;p&gt;Here is the formula for calculating the magnitude of the friction impulse:&lt;/p&gt;
&lt;p&gt;[latex]j_t = \dfrac{ - \boldsymbol{v} \cdot \boldsymbol{t} } { m^{-1} + ( \boldsymbol{I^{-1}} ( \boldsymbol{r} \times \boldsymbol{t} ) \times \boldsymbol{r} ) \cdot \boldsymbol{t} }[/latex]&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;j&lt;sub&gt;t&lt;/sub&gt; is the magnitude of the friction impulse (pre-cone limit)&lt;/li&gt;
&lt;li&gt;u is the coefficient of friction [0,1]&lt;/li&gt;
&lt;li&gt;t in the tangent vector in the direction of sliding&lt;/li&gt;
&lt;li&gt;v is the the go stone velocity at the contact point&lt;/li&gt;
&lt;li&gt;r is the contact point minus the center of the go stone&lt;/li&gt;
&lt;li&gt;I is the inertia tensor of the go stone&lt;/li&gt;
&lt;li&gt;m is the mass of the go stone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which gives the following result:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/XXMBHkjPdzM&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Which looks much more realistic!&lt;/p&gt;
&lt;h2 id=&#34;rolling-friction&#34;&gt;Rolling Friction&lt;/h2&gt;
&lt;p&gt;Due to its shape (and the inertia tensor from the previous article), the go stone really prefers to rotate about axes on the xz plane instead of around the y axis.&lt;/p&gt;
&lt;p&gt;I was able to reproduct this effect in the simulation. Adding a torque that spins go stone around the y axis made it stand up and spin like a coin:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/bF6kHscHbyw&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This is pretty cool and is totally emergent from the shape of the go stone. The only problem is that it spins like this &lt;u&gt;forever&lt;/u&gt;.&lt;/p&gt;
&lt;p&gt;Why is it spinning for so long? Shouldn&amp;rsquo;t coulomb friction handle this for us?&lt;/p&gt;
&lt;p&gt;No. Coulomb friction only handles friction when the two surfaces are sliding relative to each other. Here at the point of contact, the stone is spinning about that point, not sliding, so from coulomb friction point of view, the contact point is stationary and no friction is applied.&lt;/p&gt;
&lt;p&gt;It turns out that sliding friction is just one type of friction and there are &lt;a href=&#34;https://en.wikipedia.org/wiki/Friction&#34;&gt;many others&lt;/a&gt;. What we have in this case is a combination of rolling and spinning friction.&lt;/p&gt;
&lt;p&gt;I had very little patience at this point so I came up with my own hack approximation of spinning and rolling friction that gives me the result that I want: vibrant motion at high energies but slightly damped so the stone slows down, collapses from spinning, wobbles a bit and then come to rest.&lt;/p&gt;
&lt;p&gt;My hack was to apply exponential decay (eg. linearVelocity *= factor [0.9990-0.9999] each frame) to linear and angular velocity. The decay factor was linear interpolated between two key speeds such that there was more damping at low speeds and much less at high speeds. There is no physical basis for this, it&amp;rsquo;s just a hack to get the behavior I want.&lt;/p&gt;
&lt;p&gt;With a bit of tuning, it seems to work reasonably well:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/1eG2xTubRJY&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Rotation &amp; Inertia Tensors</title>
      <link>https://gafferongames.com/post/rotation_and_inertia_tensors/</link>
      <pubDate>Sat, 23 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/rotation_and_inertia_tensors/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt;. Welcome to &lt;a href=&#34;https://gafferongames.com/categories/virtual-go/&#34;&gt;&lt;strong&gt;Virtual Go&lt;/strong&gt;&lt;/a&gt;, my project to create a physically accurate computer simulation of a Go board and stones.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/go_stone_vs_go_board/&#34;&gt;previous article&lt;/a&gt; we detected collision between the go stone and the go board. Now we&amp;rsquo;re working up to calculating collision response so the stone bounces and wobbles before coming to rest on the board.&lt;/p&gt;
&lt;p&gt;But in order to reach this goal we first need to lay some groundwork. It turns out that irregularly shaped objects, like go stones, are easier to rotate about some axes than others and this has a large effect on how they react to collisions.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/placing-a-stone-on-the-board.jpg&#34; alt=&#34;placing a stone on the board&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;This is the reason go stones wobble in such an interesting way when placed on the go board, and why thick go stones wobble differently to thin ones.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s study this effect so we can reproduce it in Virtual Go.&lt;/p&gt;
&lt;h2 id=&#34;rotation-in-3d&#34;&gt;Rotation in 3D&lt;/h2&gt;
&lt;p&gt;Consider the following case in two dimensions:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/rotation-in-2d.png&#34; alt=&#34;rotation in 2d&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;It&amp;rsquo;s easy because there is only one possible axis for rotation around the center of mass: clockwise or counter-clockwise.&lt;/p&gt;
&lt;p&gt;It follows that we can represent the orientation of an object in 2D around its center of mass with a single theta value, angular velocity with a scalar radians per-second, and a scalar &amp;lsquo;moment of inertia&amp;rsquo; that works just like an angular equivalent of mass: how hard it is to rotate that object.&lt;/p&gt;
&lt;p&gt;But when we move to three dimensions suddenly rotation can occur about any axis. Orientation becomes a quaternion, angular velocity a vector, and now for irregular shaped objects like go stones, we need a way to indicate that certain axes of rotation are easier to rotate about than others.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/rotation-in-3d.png&#34; alt=&#34;rotation in 3d&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;But how can we represent an angular mass that depends on the shape of the object and the axis of rotation?&lt;/p&gt;
&lt;h2&gt;Inertia Tensor&lt;/h2&gt;
&lt;p&gt;The solution is to use an &lt;a href=&#34;https://en.wikipedia.org/wiki/Moment_of_inertia#Moment_of_inertia_tensor&#34;&gt;inertia tensor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An inertia tensor is a 3x3 matrix with different rules to a normal matrix. It rotates and translates differently, but otherwise behaves like a 3x3 matrix and is used to transform angular velocity to angular momentum, and the inverse of the inertia tensor transforms angular momentum to angular velocity.&lt;/p&gt;
&lt;p&gt;Now this becomes quite interesting because Newton&amp;rsquo;s laws guarantee that in a perfectly elastic collision angular momentum is conserved but angular velocity is not necessarily.&lt;/p&gt;
&lt;p&gt;Why is this? Because angular velocity now depends on the axis of rotation, so even if the angular momentum has exactly the same magnitude post-collision the angular velocity can be different if the axis of rotation changes and the inertia tensor is non-uniform.&lt;/p&gt;
&lt;p&gt;Because of this we&amp;rsquo;ll switch to angular momentum as the primary quantity in our physics simulation and we&amp;rsquo;ll derive angular velocity from it. For consistency we&amp;rsquo;ll also switch from linear velocity to linear momentum.&lt;/p&gt;
&lt;h2 id=&#34;calculating-the-inertia-tensor&#34;&gt;Calculating The Inertia Tensor&lt;/h2&gt;
&lt;p&gt;Now we need a way to calculate the inertia tensor of our go stone.&lt;/p&gt;
&lt;p&gt;The general case is quite complicated because inertia tensors are capable of representing shapes that are non-symmetrical about the axis of rotation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;todo: yes, need to sort out the latex equations&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[latex]I = \begin{bmatrix} I_{xx} &amp;amp; I_{xy} &amp;amp; I_{xz} \ I_{yx} &amp;amp; I_{yy} &amp;amp; I_{yz} \ I_{zx} &amp;amp; I_{zy} &amp;amp; I_{zz} \end{bmatrix}[/latex]&lt;/p&gt;
&lt;p&gt;For example, think of an oddly shaped object attached to a drill bit off-center and wobbling about crazily as the drill spins. Fantastic. But the good news is that we get to dodge this bullet because we are always rotating about the center of mass of the go stone, our inertia tensor is much simpler:&lt;/p&gt;
&lt;p&gt;[latex]I = \begin{bmatrix} I_{x} &amp;amp; 0 &amp;amp; 0 \ 0 &amp;amp; I_{y} &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; I_{z} \end{bmatrix}[/latex]&lt;/p&gt;
&lt;p&gt;All we need to do in our case is to determine the I&lt;sub&gt;x&lt;/sub&gt;, I&lt;sub&gt;y&lt;/sub&gt; and I&lt;sub&gt;z&lt;/sub&gt; values.&lt;/p&gt;
&lt;p&gt;They represent how difficult it is to rotate the go stone about the x,y and z axes.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/inertia-tensor-ix.png&#34; alt=&#34;inertia tensor x&#34; width=&#34;100%&#34;/&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/inertia-tensor-iy.png&#34; alt=&#34;inertia tensor y&#34; width=&#34;100%&#34;/&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/inertia-tensor-iz.png&#34; alt=&#34;inertia tensor z&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Interestingly, due to symmetry of the go stone, all axes on the xz plane are identical. So really, we only need to calculate I&lt;sub&gt;x&lt;/sub&gt; and I&lt;sub&gt;y&lt;/sub&gt; because I&lt;sub&gt;z&lt;/sub&gt; = I&lt;sub&gt;x&lt;/sub&gt;.&lt;/p&gt;
&lt;h2 id=&#34;numerical-integration&#34;&gt;Numerical Integration&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first calculate the inertia tensor via numerical integration.&lt;/p&gt;
&lt;p&gt;To do this we just need to know is how difficult it is rotate a point about an axis.&lt;/p&gt;
&lt;p&gt;Once we know this we can approximate the moment of inertia of a go stone by breaking it up into a discrete number of points and summing up the moments of inertia of all these points.&lt;/p&gt;
&lt;p&gt;It turns out that the difficulty of rotating a point mass about an axis is proportional to the &lt;em&gt;square&lt;/em&gt; of the distance of that point from the axis and the mass of the point. [latex]I = mr^2[/latex]. This is quite interesting because it indicates that the distribution of mass has a significant effect on how difficult it is to rotate an object about an axis.&lt;/p&gt;
&lt;p&gt;One consequence of this is that a hollow pipe is actually more difficult to rotate than a solid pipe of the same mass. Of course, this is not something we deal with in real life often, because a solid pipe of the same material would be much heavier, and therefore harder to rotate due to increased mass, but if you could find a second material of lower density such that the solid pipe was exactly the same mass as the hollow pipe, you would be able to observe this effect. Obscure.&lt;/p&gt;
&lt;p&gt;In our case we know the go stone is solid not hollow, and we can go one step further and assume that the go stone has completely uniform density throughout. This means if we know the mass of the go stone we can divide it by the volume of the go stone to find its density. Then we can divide space around the go stone into a grid, and using this density we can assign a mass to each point in the grid proportional to the density of the go stone.&lt;/p&gt;
&lt;p&gt;Now integration is just a triple for loop summing up the moments of inertia for points that are inside the go stone. This gives us an approximation of the inertia tensor for the go stone that becomes more accurate the more points we use.&lt;/p&gt;
&lt;h2 id=&#34;interpreting-the-inertia-tensor&#34;&gt;Interpreting The Inertia Tensor&lt;/h2&gt;
&lt;p&gt;A size 33 japanese go stone has width 22mm and height 9.2mm:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/clam-shell-stone-size-33.jpg&#34; alt=&#34;size 33 go stone&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Using our point-based approximation to calculate its inertia tensor gives the following result:&lt;/p&gt;
&lt;p&gt;[latex]I = \begin{bmatrix} 0.177721 &amp;amp; 0 &amp;amp; 0 \ 0 &amp;amp; 0.304776 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 0.177721 \end{bmatrix}[/latex]&lt;/p&gt;
&lt;p&gt;As expected, I&lt;sub&gt;x&lt;/sub&gt; = I&lt;sub&gt;z&lt;/sub&gt; due to the symmetry of the go stone.&lt;/p&gt;
&lt;p&gt;The inertia tensor indicates that its much harder to rotate the go stone about the y axis than axes on the xz plane.&lt;/p&gt;
&lt;p&gt;Why is this?&lt;/p&gt;
&lt;p&gt;You can see looking top-down at the go stone when rotating about the y axis a ring of mass around the edge of the stone is multiplied by a large r&lt;sup&gt;2&lt;/sup&gt; and is therefore difficult to rotate.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/top-down-y-rotation.png&#34; alt=&#34;top down y rotation&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Contrast this with the rotation about the z axis, which has a much smaller portion of mass far away from the axis:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/top-down-z-rotation.png&#34; alt=&#34;top down z rotation&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;As you can see the distribution of mass around the axis tends to dominate the inertia tensor due to the r&lt;sup&gt;2&lt;/sup&gt; term. The same mass, twice the distance from the axis, is four times more difficult to rotate!&lt;/p&gt;
&lt;h2&gt;Closed Form Solution&lt;/h2&gt;
&lt;p&gt;Exact equations are known for the moments of inertia of many &lt;a href=&#34;http://www.livephysics.com/physical-constants/mechanics-pc/moment-inertia-uniform-objects/&#34;&gt;common objects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With a bit of math we can calculate closed form solutions for the moments of inertia of a go stone.&lt;/p&gt;
&lt;p&gt;To determine the exact equation for I&lt;sub&gt;y&lt;/sub&gt; we start with the moment of inertia for a solid disc:&lt;/p&gt;
&lt;p&gt;[latex]I = 1/2mr^2[/latex]&lt;/p&gt;
&lt;p&gt;Then we integrate again, effectively summing up the moments of inertia of an infinite number of thin discs making up the top half of the go stone.&lt;/p&gt;
&lt;p&gt;This leads to the following integral:&lt;/p&gt;
&lt;p&gt;[latex]\int_0^{h/2} (r^2-(y+r-h/2)^2)^2,dy[/latex]&lt;/p&gt;
&lt;p&gt;With a little help from &lt;a href=&#34;http://wolframalpha.com&#34;&gt;Wolfram Alpha&lt;/a&gt; we get the following result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    float CalculateIy( const Biconvex &amp;amp; biconvex )
    {
        const float h = height;
        const float r = biconvex.GetSphereRadius();
        const float h2 = h * h;
        const float h3 = h2 * h;
        const float h4 = h3 * h;
        const float h5 = h4 * h;
        const float r2 = r * r;
        const float r3 = r2 * r;
        const float r4 = r3 * r;
        return pi * p * 
            ( 1/480.0f * h3 * 
              ( 3*h2 - 30*h*r + 80*r2 ) );
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plugging in the values for a size 33 stone, we get 0.303588 which is close to the approximate solution 0.304776.&lt;/p&gt;
&lt;p&gt;Verifying exact solutions against numeric ones is a fantastic way to check your calculations.&lt;/p&gt;
&lt;p&gt;Can &lt;u&gt;you&lt;/u&gt; derive the equation for I&lt;sub&gt;x&lt;/sub&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/collision_response_and_coulomb_friction/&#34;&gt;Collision Response and Coulomb Friction&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Go Stone vs. Go Board</title>
      <link>https://gafferongames.com/post/go_stone_vs_go_board/</link>
      <pubDate>Fri, 22 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/go_stone_vs_go_board/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt;. Welcome to &lt;a href=&#34;https://gafferongames.com/categories/virtual-go/&#34;&gt;&lt;strong&gt;Virtual Go&lt;/strong&gt;&lt;/a&gt;, my project to create a physically accurate computer simulation of a Go board and stones.&lt;/p&gt;
&lt;p&gt;In this series so far we&amp;rsquo;ve defined the shape of a go stone, rendered it using 3D graphics hardware and simulated how it moves in three dimensions.&lt;/p&gt;
&lt;p&gt;Our next goal is for the go stone to bounce and come to rest on the go board.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/corner-with-slate-and-shell-stones.jpg&#34; alt=&#34;slate and shell go stones&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Understandably, this is quite complicated, so in this article we&amp;rsquo;ll focus on the first step: detecting collisions between a go stone and the go board.&lt;/p&gt;
&lt;h2 id=&#34;voronoi-regions-and-the-minkowski-difference&#34;&gt;Voronoi Regions and The Minkowski Difference&lt;/h2&gt;
&lt;p&gt;First, lets assume that the go board is axis aligned and does not move.&lt;/p&gt;
&lt;p&gt;Next, because go stones are small relative to the go board, we can break down collision detection into regions which are treated differently.&lt;/p&gt;
&lt;p&gt;The common case is with the primary surface, the actual playing surface of the go board, so lets start by looking top-down at the go board and breaking it up into 2D voronoi regions.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/voronoi-regions.png&#34; alt=&#34;voronoi regions&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Each voronoi region corresponds to a subspace where all points (x,z) in that region map to the same nearest feature on the go board. This gives us one region that maps points to the top surface of the go board, four regions that map to the sides, and four corner regions.&lt;/p&gt;
&lt;p&gt;If we were testing an infinitely small point against the go board, this would be enough, but we are colliding a go stone of a certain width and height.&lt;/p&gt;
&lt;p&gt;One simple way to incorporate the dimensions of the go stone is to offset the regions from the edge of the go board by the the go stone&amp;rsquo;s bounding sphere radius.&lt;/p&gt;
&lt;p&gt;This creates something like a poor man&amp;rsquo;s version of a minkowski difference:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/minkowski-difference.png&#34; alt=&#34;minkowski difference&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;We can now test the center of the go stone against these regions to quickly to categorize the type of &lt;i&gt;&lt;u&gt;potential&lt;/u&gt;&lt;/i&gt; collision.&lt;/p&gt;
&lt;h2 id=&#34;go-board-collision-cases&#34;&gt;Go Board Collision Cases&lt;/h2&gt;
&lt;p&gt;Although the go board has nine different regions there only three unique types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primary&lt;/li&gt;
&lt;li&gt;Edge&lt;/li&gt;
&lt;li&gt;Corner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Primary is the common case.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/board-primary-case.png&#34; alt=&#34;primary collision&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;It&amp;rsquo;s also the easiest to handle. The only possible collision is between the stone and the playing surface of the go board.&lt;/p&gt;
&lt;p&gt;Since the go board rests on the floor and cannot move we do not need to worry about collisions with the bottom surface. This means that we can consider the go board to be infinitely thick. This is extremely useful because it removes the possibility of fast moving go stones tunneling vertically through the board.&lt;/p&gt;
&lt;p&gt;Next is the edge case. This is more complicated because there is more than one way to collide in edge regions. Tests must be done between the go stone and the top plane, the side plane, and the side edge.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/board-side-case.png&#34; alt=&#34;side collision&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The corner case is more complicated still. Potential collisions include the top plane, the two side planes, the side edges adjacent to the corner, the vertical corner edge, and the corner point.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/board-corner-case.png&#34; alt=&#34;corner collision&#34; width=&#34;100%&#34;/&gt;
&lt;h2 id=&#34;go-stone-collision-cases&#34;&gt;Go Stone Collision Cases&lt;/h2&gt;
&lt;p&gt;When a go stone collides with another object there are three collision cases.&lt;/p&gt;
&lt;p&gt;The first is a collision on the top surface of the biconvex. This corresponds to a collision with a portion of the &lt;u&gt;bottom&lt;/u&gt; sphere that generated the go stone.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-collision-top.png&#34; alt=&#34;biconvex collision top&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Next is the bottom surface of the biconvex. This corresponds to the &lt;u&gt;top&lt;/u&gt; sphere.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-collision-bottom.png&#34; alt=&#34;biconvex collision bottom&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Finally, the collision point can be on the circle ring at the intersection of the two sphere surfaces.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-collision-side.png&#34; alt=&#34;biconvex collision side&#34; width=&#34;100%&#34;/&gt;
&lt;h2 id=&#34;separating-axis-test-sat&#34;&gt;Separating Axis Test (SAT)&lt;/h2&gt;
&lt;p&gt;We have 3 ways a stone can collide with any convex object, and 9 different regions that must be treated differently when testing vs. the go board. Within each region we have up to 7 different features on the go board that must be tested against 3 different features on the go stone.&lt;/p&gt;
&lt;p&gt;This is all rather complicated. How can we simplify it?&lt;/p&gt;
&lt;p&gt;The solution is to use the &lt;a href=&#34;https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169&#34;&gt;separating axis test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea is that if we can find a plane that separates the stone and the board then they must not be colliding. This gives us a robust way of thinking about collision detection and makes testing for collision between objects more general and less prone to combinatorial explosion.&lt;/p&gt;
&lt;h2 id=&#34;calculating-the-support&#34;&gt;Calculating The Support&lt;/h2&gt;
&lt;p&gt;In order to use the separating axis test we must first write a function that determines the support of the go stone.&lt;/p&gt;
&lt;p&gt;The support is the projection of an object on to an axis. This can be difficult to think about in 3D, but for me it makes it easier to think of the axis not as a line, but as the normal of a plane.&lt;/p&gt;
&lt;p&gt;Then what we are really asking is: given this plane normal, what two planes from either side tightly bound the object like book-ends on a shelf?&lt;/p&gt;
&lt;p&gt;To calculate the support of a biconvex solid we must consider two cases.&lt;/p&gt;
&lt;p&gt;The first is when the go stone is vertical relative to the axis. Here it is reasonably easy. To calculate the support you simply calculate the intersection of the supports of the spheres used to generate the go stone. This makes a nice sort of intuitive sense seeing as the go stone is itself the intersection of two spheres.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-support-1.png&#34; alt=&#34;biconvex support case 1&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;Unfortunately, this technique breaks down when the stone is horizontal relative to the axis because it fails to exclude the portion of the spheres that don&amp;rsquo;t contribute to the biconvex solid.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-support-wrong.png&#34; alt=&#34;biconvex support wrong&#34; width=&#34;50%&#34;/&gt;
&lt;p&gt;What you need to do instead is to calculate the support of the circle edge.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-support-correct.png&#34; alt=&#34;biconvex support correct&#34; width=&#34;50%&#34;/&gt;
&lt;p&gt;The tricky part is detecting when the transition between these two cases occur. Here&amp;rsquo;s a diagram I created a while back when I first tried to work this out. If you look closely you can see the exact point where my head exploded:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-support-head-explode.jpg&#34; alt=&#34;head explode&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;And here&amp;rsquo;s a visualization of the end result:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/_fkLcJPJ6Wg&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Now we are ready to continue with the SAT for detecting collisions.&lt;/p&gt;
&lt;h2 id=&#34;primary-case&#34;&gt;Primary Case&lt;/h2&gt;
&lt;p&gt;With this support we can use a one-sided variant of the SAT to detect collision with the primary surface. We&amp;rsquo;re doing one-sided because we&amp;rsquo;re treating the go board as &amp;lsquo;infinitely thick&amp;rsquo; to avoid tunneling in the common case.&lt;/p&gt;
&lt;p&gt;First, we take the normal of the primary surface which is (0,1,0) and find the support for the go stone using this normal as the axis: s&lt;sub&gt;1&lt;/sub&gt; and s&lt;sub&gt;2&lt;/sub&gt;.&lt;/p&gt;
&lt;p&gt;Next, we calculate the projection of the board surface along the normal: t&lt;/p&gt;
&lt;p&gt;Then, if s&lt;sub&gt;1&lt;/sub&gt; &amp;lt;= t then the go stone is colliding with the go board:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/br3wVa0CIis&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately, we detect the collision after the go stone has already penetrated the go board. There are many solutions for this problem: &lt;a href=&#34;http://jitter-physics.com/wordpress/?tag=continuous-collision-detection&#34;&gt;continuous collision detection&lt;/a&gt;, and &lt;a href=&#34;http://jitter-physics.com/wordpress/?tag=continuous-collision-detection&#34;&gt;speculative contacts&lt;/a&gt; being interesting avenues I may explore later on.&lt;/p&gt;
&lt;p&gt;But for now I just do the simplest and most pragmatic thing I can think of.&lt;/p&gt;
&lt;p&gt;I just push the stone out of the board along the axis.&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/98YB1ZE9gfQ&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;After I push the stone out, I recalculate the nearest point between the stone and board and use this as the contact point.&lt;/p&gt;
&lt;h2 id=&#34;edge-and-corner-cases&#34;&gt;Edge and Corner Cases&lt;/h2&gt;
&lt;p&gt;The primary surface case is easy because only one axis needs to be tested, but in corner and edge regions multiple axes must be tested for collision.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/multiple-axes-SAT.png&#34; alt=&#34;multiple axis SAT&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;This is where the SAT really starts to shine. Now instead of combinatorial explosion testing each of the features of the go stone vs. each of the features on the go board, we flatten both the go stone and the go board into support and test for collision one axis at a time.&lt;/p&gt;
&lt;p&gt;The separating axis test as applied as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test all features in the region and determine if there is any separating axis&lt;/li&gt;
&lt;li&gt;If a separating axis exists then the go stone is not colliding with the board&lt;/li&gt;
&lt;li&gt;Otherwise the stone must be colliding with the board&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the stone is colliding we must now work out what direction to push the stone out. I thought about this for a while and tried to come up with a simple pattern that worked.&lt;/p&gt;
&lt;p&gt;First, I tried pushing the stone out along the axis with the greatest amount of penetration, but this breaks down pretty severely in the case where a go stone approaches the go board from the side:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/multiple-axes-push-out-most-penetration.png&#34; alt=&#34;push out most penetration&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Next, I thought that perhaps I could use the previous position of the go stone and try to determine the direction that the stone is approaching from. But then I thought about go stones that were rotating rapidly and how this wouldn&amp;rsquo;t always be correct. Then I started thinking about corner and edge cases, and the longer I thought the more this approach seemed too complicated, like I was trying to invent my own half-assed continuous collision detection method that would probably only work half the time and be almost impossible to test.&lt;/p&gt;
&lt;p&gt;In the end I settled on the simplest solution I could come up with: push the go stone out along the axis with the &lt;u&gt;least&lt;/u&gt; amount of penetration.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/multiple-axes-push-out-least-penetration.png&#34; alt=&#34;push out least penetration&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;This seems counter-intuitive at first, but it has some nice parallels with other physical laws. Nature is lazy and always takes the shortest path. Nature does the &lt;em&gt;least amount of work&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We should probably do the same :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/rotation_and_inertia_tensors/&#34;&gt;Rotation and Inertia Tensors&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>How The Go Stone Moves</title>
      <link>https://gafferongames.com/post/how_the_go_stone_moves/</link>
      <pubDate>Thu, 21 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/how_the_go_stone_moves/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt;. Welcome to &lt;a href=&#34;https://gafferongames.com/categories/virtual-go/&#34;&gt;&lt;strong&gt;Virtual Go&lt;/strong&gt;&lt;/a&gt;, my project to create a physically accurate computer simulation of a Go board and stones.&lt;/p&gt;
&lt;p&gt;In previous articles we mathematically defined the shape of a go stone and tessellated its shape so it can be drawn with 3D graphics hardware.&lt;/p&gt;
&lt;p&gt;Now we want to make the go stone move, obeying Newton&amp;rsquo;s laws of motion so the simulation is physically accurate. The stone should be accelerated by gravity and fall downwards. I also want the stone to rotate so it tumbles as it falls through the air.&lt;/p&gt;
&lt;h2 id=&#34;the-rigid-body-assumption&#34;&gt;The Rigid Body Assumption&lt;/h2&gt;
&lt;p&gt;Try biting down on a go stone and you&amp;rsquo;ll agree: go stones are very, very hard.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/slate-and-shell-corner-up-close.jpg&#34; alt=&#34;slate and shell go stones&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Golf balls are pretty hard too, but if you look at a golf ball being hit by a club in super-slow motion, you&amp;rsquo;ll see that it deforms considerably during impact.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/golf-ball-compression-during-impact.jpg&#34; alt=&#34;golf ball compression during impact&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The same thing happens to all objects in the real world to some degree. Nothing is truly rigid. No real material is so hard that it never deforms.&lt;/p&gt;
&lt;p&gt;But this is not the real world. This is Virtual Go :) It&amp;rsquo;s a simulation and here we are free to make whatever assumptions we want. And the smartest simplification we can make at this point is to assume that the go stone is perfectly rigid and does not deform under any circumstance.&lt;/p&gt;
&lt;p&gt;This is known as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Rigid_body&#34;&gt;rigid body&lt;/a&gt; assumption.&lt;/p&gt;
&lt;h2 id=&#34;working-in-three-dimensions&#34;&gt;Working in Three Dimensions&lt;/h2&gt;
&lt;p&gt;Because the go stones are rigid, all we need to represent their current position is the position of the center. As the center moves, so does the rest of the stone.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-rigid-body-center-P.png&#34; alt=&#34;biconvex go stone rigid body center&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;We&amp;rsquo;ll represent this position using a three dimensional vector &lt;b&gt;P&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s define the axes so we know what the x,y,z components of P mean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Positive x is to the right&lt;/li&gt;
&lt;li&gt;Positive y is up&lt;/li&gt;
&lt;li&gt;Positive z is into the screen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what is known as a left-handed coordinate system. So called because I can use the fingers on my left hand to point out each positive axis direction without breaking them.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/coordinate-systems-left-and-right-handed.png&#34; alt=&#34;left and right handed coordinate systems&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;I&amp;rsquo;ve chosen a left-handed coordinate system purely on personal preference. Also, I&amp;rsquo;m left-handed and I like my fingers :)&lt;/p&gt;
&lt;h2 id=&#34;linear-motion&#34;&gt;Linear Motion&lt;/h2&gt;
&lt;p&gt;Now we want to make the stone move.&lt;/p&gt;
&lt;p&gt;To do this we need the concept of velocity. Velocity is also a vector but it&amp;rsquo;s not a point like P. Think of it more like a direction and a length. The direction of the velocity vector is the direction the stone is moving and the length is the speed it&amp;rsquo;s moving in some unit per-second. Here I&amp;rsquo;ll use centimeters per-second because go stones are small.&lt;/p&gt;
&lt;p&gt;For example, if we the stone to move to the right at a rate of 5 centimeters per-second then the velocity vector is (5,0,0).&lt;/p&gt;
&lt;p&gt;To make the stone move, all we have to do is add the velocity to the position once per-second:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/d7H8MSrOBko&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;While this works, it&amp;rsquo;s not particularly exciting. We&amp;rsquo;d like the stone to move much more smoothly. Instead of updating once per-second, let&amp;rsquo;s update 60 times per-second or 60 fps (frames per-second). Rather than taking one big step, we&amp;rsquo;ll take 60 smaller steps per-second, each step being 1/60 of the velocity.&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/yK_Zh2u3D0w&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;You can generalize this to any framerate with the concept of delta time or &amp;ldquo;dt&amp;rdquo;. To calculate delta time invert frames per second: dt = 1/fps and you have the amount of time per-frame in seconds. Next, multiply velocity by delta time and you have the change in position per-frame.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    const float fps = 60.0f;
    const float dt = 1 / fps;
    while ( !quit )
    {
        stone.rigidBody.position += stone.rigidBody.velocity * dt;
        RenderStone( stone );
        UpdateDisplay();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is actually a very simple type of &lt;a href=&#34;https://en.wikipedia.org/wiki/Euler_method&#34;&gt;numerical integration&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;gravitational-acceleration&#34;&gt;Gravitational Acceleration&lt;/h2&gt;
&lt;p&gt;Next we want to add gravity.&lt;/p&gt;
&lt;p&gt;To do this we need to change velocity each frame by some amount downwards due to gravity. Change in velocity is known as acceleration. Gravity provides a constant acceleration of 9.8 meters per-second, per-second, or in our case, 98 centimeters per-second, per-second because we&amp;rsquo;re working in centimeters.&lt;/p&gt;
&lt;p&gt;Acceleration due to gravity is also a vector. Since gravity pulls objects down, the acceleration vector is (0,-98,0). Remember, +y axis is up, so -y is down.&lt;/p&gt;
&lt;p&gt;So how much does gravity accelerate the go stone in 1/60th of a second? Well, 98 * 1/60 = 1.633&amp;hellip; Hey wait. This is exactly what we did with velocity to get position!&lt;/p&gt;
&lt;p&gt;Yes it is. It&amp;rsquo;s exactly the same. Acceleration integrates to velocity just like velocity integrates to position. And both are multiplied by dt to find the amount to add per-frame, where dt = 1/fps.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    float gravity = 9.8f * 10;
    float fps = 60.0f;
    float dt = 1 / fps;
    while ( !quit )
    {
        stone.rigidBody.velocity += vec3f( 0, -gravity, 0 ) * dt;
        stone.rigidBody.position += stone.rigidBody.velocity * dt;
        RenderStone( stone );
        UpdateDisplay();
    }    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;rsquo;s the result:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/nIMK8V6b84I&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, now that we&amp;rsquo;ve added acceleration due to gravity the go stone moves in a parabola just like it does in the real world when it&amp;rsquo;s thrown.&lt;/p&gt;
&lt;h2 id=&#34;angular-motion&#34;&gt;Angular Motion&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s make the stone rotate!&lt;/p&gt;
&lt;p&gt;First we have to define how we represent the orientation of the stone. For this we&amp;rsquo;ll use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation&#34;&gt;quaternion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we need the angular equivalent of velocity known as&amp;hellip; wait for it&amp;hellip; angular velocity. This too is a vector aka a direction and a length. It&amp;rsquo;s direction is the axis of rotation and the length is the rate of rotation in radians per-second. One full rotation is 2&lt;em&gt;pi radians or 360 degrees so if the length of the angular velocity vector is 2&lt;/em&gt;pi the object rotates around the axis once per-second.&lt;/p&gt;
&lt;p&gt;Because we&amp;rsquo;re using a left handed coordinate system the direction of rotation is clockwise about the positive axis. You can remember this by sticking your thumb of your left hand in the direction of the axis of rotation and curling your fingers. The direction your fingers curl is the direction of rotation. Notice if you do the same thing with your right hand the rotation is the other way.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/rotation-direction-hand-thumb.png&#34; alt=&#34;rotation direction left and right hands&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;How do we integrate orientation from angular velocity? Orientation is a quaternion and angular velocity is a vector. We can&amp;rsquo;t just add them together.&lt;/p&gt;
&lt;p&gt;The solution requires a reasonably solid understanding of quaternion math and how it relates to complex numbers. Long story short, we need to convert our angular velocity into a quaternion form and then we can integrate that just like we integrate any other vector. For a full derivation of this result please refer to &lt;a href=&#34;https://fgiesen.wordpress.com/2012/08/24/quaternion-differentiation/&#34;&gt;this excellent article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the code I use to convert angular velocity into quaternion form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    inline quat4f AngularVelocityToSpin( quat4f orientation, vec3f angularVelocity )
    {
        const float x = angularVelocity.x();
        const float y = angularVelocity.y();
        const float z = angularVelocity.z();
        return 0.5f * quat4f( 0, x, y, z ) * 
            orientation;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And once I have this spin quaternion, I can integrate it to find the change in the orientation quaternion just like any other vector.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    const float fps = 60.0f;
    const float dt = 1 / fps;
    while ( !quit )
    {
        quat4f spin = AngularVelocityToSpin( 
            stone.rigidBody.orientation, 
            stone.rigidBody.angularVelocity );
        stone.rigidBody.orientation += spin * iteration_dt;
        stone.rigidBody.orientation = normalize( stone.rigidBody.orientation );
        RenderStone( stone );
        UpdateDisplay();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only difference is that after integration I renormalize the quaternion to ensure it doesn&amp;rsquo;t drift from unit length, otherwise it stops representing a rotation.&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/sR4G-_wIeuc&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Yep. That go stone is definitely rotating.&lt;/p&gt;
&lt;h2 id=&#34;why-quaternions&#34;&gt;Why Quaternions?&lt;/h2&gt;
&lt;p&gt;Graphics cards typically represent rotations with matrices, so why are we using quaternions when calculating physics instead of 4x4 matrices? Aren&amp;rsquo;t we bucking the trend a bit here?&lt;/p&gt;
&lt;p&gt;Not really. There are many good reasons to work with quaternions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s easier to integrate angular velocity using a quaternion than a 3x3 matrix&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normalizing a quaternion is faster than orthonormalizing a 3x3 matrix&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s really easy to interpolate between two quaternions&lt;/li&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll still use matrices but as a secondary quantity. This means that each frame after we integrate we convert the quaternion into a 3x3 rotation matrix and combine it with the position into a 4x4 rigid body matrix and its inverse like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    mat4f RigidBodyMatrix( vec3f position, 
                           quat4f rotation )
    {
        mat4f matrix;
        rotation.toMatrix( matrix );
        matrix.value.w = simd4f_create( position.x(), 
                                        position.y(), 
                                        position.z(), 
                                        1 );
        return matrix;
    }

    mat4f RigidBodyInverse( const mat4f &amp;amp; matrix )
    {
        mat4f inverse = matrix;
        vec4f translation = matrix.value.w;
        inverse.value.w = simd4f_create(0,0,0,1);
        simd4x4f_transpose_inplace( &amp;amp;inverse.value );
        vec4f x = matrix.value.x;
        vec4f y = matrix.value.y;
        vec4f z = matrix.value.z;
        inverse.value.w = 
            simd4f_create( -dot( x, translation ),
                           -dot( y, translation ),
                           -dot( z, translation ),
                           1.0f );
        return inverse;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now whenever we transform vectors want to go in/out of stone body space we&amp;rsquo;ll use this matrix and its inverse. It&amp;rsquo;s the best of both worlds.&lt;/p&gt;
&lt;h2 id=&#34;bringing-it-all-together&#34;&gt;Bringing It All Together&lt;/h2&gt;
&lt;p&gt;The best thing about rigid body motion is that you can calculate linear and angular motion separately and combine them together and it just works.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the final code with linear and angular motion combined:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const float gravity = 9.8f * 10;
const float fps = 60.0f;
const float dt = 1 / fps;

while ( !quit )
{
    stone.rigidBody.velocity += vec3f( 0, -gravity, 0 ) * dt;

    stone.rigidBody.position += stone.rigidBody.velocity * dt;

    quat4f spin = 
        AngularVelocityToSpin( 
            stone.rigidBody.orientation, 
            stone.rigidBody.angularVelocity );

    stone.rigidBody.orientation += spin * dt;
    stone.rigidBody.orientation = normalize( stone.rigidBody.orientation );

    RenderStone( stone );

    UpdateDisplay();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the end result:&lt;/p&gt;
&lt;div class=&#34;video_container&#34;&gt;
&lt;iframe src=&#34;//www.youtube.com/embed/gmZGktbTAGA&#34; 
frameborder=&#34;0&#34; allowfullscreen class=&#34;video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;I think this is fairly convincing. The go stone is moving quite realistically!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/go_stone_vs_go_board/&#34;&gt;Go Stone vs. Go Board&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Tessellating The Go Stone</title>
      <link>https://gafferongames.com/post/tessellating_the_go_stone/</link>
      <pubDate>Wed, 20 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/tessellating_the_go_stone/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt;. Welcome to &lt;a href=&#34;https://gafferongames.com/categories/virtual-go/&#34;&gt;&lt;strong&gt;Virtual Go&lt;/strong&gt;&lt;/a&gt;, my project to create a physically accurate computer simulation of a Go board and stones.&lt;/p&gt;
&lt;p&gt;In this article we want to draw the go stone using &lt;a href=&#34;http://www.opengl.org&#34;&gt;OpenGL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately we can&amp;rsquo;t just tell the graphics card, &amp;ldquo;Hey! Please draw the intersection of two spheres with radius r and d apart with a bevel torus r&lt;sub&gt;1&lt;/sub&gt; and r&lt;sub&gt;2&lt;/sub&gt;!&amp;rdquo;, because modern 3D graphics cards work by drawing triangles. We have to take our mathematical definition of the go stone and turn it into a set of triangles that the graphics card can render.&lt;/p&gt;
&lt;p&gt;This is called tessellation and there are several different ways to do it.&lt;/p&gt;
&lt;h2 id=&#34;longitude-and-lattitude&#34;&gt;Longitude And Lattitude&lt;/h2&gt;
&lt;p&gt;The first way that I tried was to consider sphere rendering like a globe with longitude/latitude. I started with a ring around the &amp;rsquo;equator&amp;rsquo; of the go stone, stepping these rings up to the top of the sphere like the north pole on a globe.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/naive-tesselation-side-view.gif&#34; alt=&#34;naive tesselation side view&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Unfortunately, just like longitude/latitude on a globe, tessellating this way leads to very distorted mapping around the pole and a lot of wasted triangles:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/inefficient-tesselation-at-pole.gif&#34; alt=&#34;inefficient tesselation at pole&#34; width=&#34;100%&#34;/&gt;
&lt;h2 id=&#34;triangle-subdivision&#34;&gt;Triangle Subdivision&lt;/h2&gt;
&lt;p&gt;The next method is triangle subdivision. You start with an approximate shape then subdivide each triangle into four smaller triangles recursively like this:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/sphere-tessellation.gif&#34; alt=&#34;sphere tessellation&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Since the go stone only needs the top 1/3 or 1/4 of a sphere, I didn&amp;rsquo;t want to subdivide a whole sphere only to throw most of it away. So I designed my own subdivision algorithm to generate only the top section of a sphere.&lt;/p&gt;
&lt;p&gt;After some trial and error I found that a pentagon plus a center vertex at the pole of the sphere was a good initial generator that minimized the distortion that occurs during subdivision. The only tricky part is that when subdividing you need to keep track of whether the edge is a sphere edge or a circle edge, as the subdivided vertex must be projected differently.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/generating-shape.gif&#34; alt=&#34;generating shape&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;With this technique I was able to generate a much more efficient tessellation:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/regular-tessellation.gif&#34; alt=&#34;regular tessellation&#34; width=&#34;100%&#34;/&gt;
&lt;h2 id=&#34;tessellating-the-bevel&#34;&gt;Tessellating The Bevel&lt;/h2&gt;
&lt;p&gt;Now we need to tesselate the bevel. To do this I take the vertices which form the circle edge at the bottom of the top sphere surface and calculate the angle of each vertex about the y axis. I then use these angles to sweep around the torus ensuring that the torus vertices weld perfectly with the top and bottom sphere sections.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/go-stone-with-bevel.gif&#34; alt=&#34;go stone with bevel&#34; width=&#34;100%&#34;/&gt;
&lt;h2 id=&#34;vertex-welding&#34;&gt;Vertex Welding&lt;/h2&gt;
&lt;p&gt;Due to how recursive subdivision works a lot of duplicate vertices are generated.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d rather not have the graphics card waste time transforming the same vertex over and over, so as I add vertices to the mesh I hash vertex positions into a 3D grid (~1mm cells) and reuse an existing vertex if the position and normals match within some small epsilon value.&lt;/p&gt;
&lt;p&gt;With vertex welding the reduction in vertices is dramatic: 53000 to just 6500.&lt;/p&gt;
&lt;p&gt;For more information on vertex welding please refer to the discussion in &lt;a href=&#34;http://www.amazon.com/Real-Time-Collision-Detection-Interactive-Technology/dp/1558607323/ref=sr_1_1?ie=UTF8&amp;qid=1363029675&amp;sr=8-1&amp;keywords=real+time+collision+detection&#34;&gt;Real-Time Collision Detection&lt;/a&gt; by &lt;a href=&#34;http://realtimecollisiondetection.net/blog/&#34;&gt;Christer Ericson&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/how_the_go_stone_moves/&#34;&gt;How The Go Stone Moves&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Shape of The Go Stone</title>
      <link>https://gafferongames.com/post/shape_of_the_go_stone/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/shape_of_the_go_stone/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt;. Welcome to &lt;a href=&#34;https://gafferongames.com/categories/virtual-go/&#34;&gt;&lt;strong&gt;Virtual Go&lt;/strong&gt;&lt;/a&gt;, my project to create a physically accurate computer simulation of a Go board and stones.&lt;/p&gt;
&lt;p&gt;If you play Go, you know that a biconvex go stone has an interesting wobble when it&amp;rsquo;s placed on the board. This wobble is a direct consequence of its unique shape.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like to reproduce this wobble in Virtual Go, so let&amp;rsquo;s to spend some time studying go stone&amp;rsquo;s shape, so we can capture this wobble and simulate it on a computer :)&lt;/p&gt;
&lt;h2 id=&#34;slate-and-shell&#34;&gt;Slate And Shell&lt;/h2&gt;
&lt;p&gt;In Japan, Go stones are traditionally made out of slate and clam shell.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/slate-and-shell-in-ko.jpg&#34; alt=&#34;slate and shell in ko&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Clam shell stones come in several grades of quality. The highest being yuki or &amp;ldquo;snow&amp;rdquo; grade with fine, regularly spaced lines.&lt;/p&gt;
&lt;p&gt;Go stones also come in different sizes. In general, the thicker the stone, the more expensive it is, as only a small portion of the clam shell is suitable for making them.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/go-stone-side-profile-sizes.png&#34; alt=&#34;go stone side profile sizes&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;At first glance the go stone looks like an ellipse, but side-on you can see this is not the case. This shape is called a &lt;em&gt;biconvex solid&lt;/em&gt;. I find this shape interesting because it is the intersection of two spheres.&lt;/p&gt;
&lt;p&gt;We can study this shape by looking at the intersection of two circles:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex.gif&#34; alt=&#34;biconvex&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;I quickly noticed that by varying the radius of the circles and the distance between their centers, I could generate go stones of different sizes.&lt;/p&gt;
&lt;p&gt;But when creating a go stone I don&amp;rsquo;t really want it to be parameterized this way.&lt;/p&gt;
&lt;p&gt;Instead I&amp;rsquo;d like to say, &amp;ldquo;Hey, I would like a stone of this width and height&amp;rdquo; and have a function that calculates the radius of the circles and how far apart they should be to generate that stone.&lt;/p&gt;
&lt;p&gt;To write this function we first need to do some math:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/biconvex-unknowns.png&#34; alt=&#34;biconvex unknowns&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;First notice that the point Q lies on the generating circle, so the line CQ has length r:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;todo: obviously I have a bunch of work to get the latex equations ported across to Hugo. I&amp;rsquo;m researching different options&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]d + h/2 = r[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]d = r - h/2[/latex]&lt;/p&gt;
&lt;p&gt;The point P is also on the generating circle so the green line CP has length r as well. Using Pythagoras theorem and substituting for d:&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]r^2 = d^2 + (w/2)^2[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]r^2 = ( r - h/2 )^2 + (w/2)^2[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]r^2 = ( h^2/4 - hr + r^2 ) + w^2/4[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]r^2 = h^2/4 - hr + r^2 + w^2/4[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]0 = h^2/4 - hr + 0 + w^2/4[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]hr = h^2/4 + w^2/4[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]r = ( h^2 + w^2 ) / 4h[/latex]&lt;/p&gt;
&lt;p&gt;Which gives us everything we need to write the function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    void calculateBiconvex( float w,  
                            float h, 
                            float &amp;amp; r, 
                            float &amp;amp; d )
    {
        r = ( w*w + h*h ) / ( 4*h );
        d = r - h/2;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can mathematically define a go stone parameterized by its width and height. There is just one problem: the edge is very sharp!&lt;/p&gt;
&lt;p&gt;To make our stone aesthetically pleasing, lets round the edge with a bevel. Otherwise, you might cut yourself virtually when you play with it:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/go-stone-smooth-bevel.jpg&#34; alt=&#34;go stone smooth bevel&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Let&amp;rsquo;s parameterize the bevel by its height b:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/bevel-b.gif&#34; alt=&#34;torus bevel height b&#34; width=&#34;75%&#34;/&gt;
&lt;p&gt;In three dimensions the bevel is actually a torus (donut) around the edge of the go stone. We need to calculate the major and minor radii r&lt;sub&gt;1&lt;/sub&gt; and r&lt;sub&gt;2&lt;/sub&gt; of the torus as a function of b and the dimensions of the go stone:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/bevel-math-1.gif&#34; alt=&#34;bevel math part 1&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;The key to solving this is to realize that if the go stone and the bevel are to match perfectly then the tangent of the two circles must be equal at the point P.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;Update&lt;/em&gt;: A few years later and it occurs to me that it would be even more beautiful if the second derivative matched at this intersection as well. Is this possible in general, or must the generating spheres become to ellipses in order to make this happen? I suspect this is the case. Mathematicians who play Go, &lt;a href=&#34;https://gafferongames.com/contact&#34;&gt;let me know your thoughts&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/virtualgo/bevel-math-2.gif&#34; alt=&#34;bevel math part 2&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;If the tangent is equal then the normal must be equal as well. This means that the center of the bevel circle lies at the intersection of the line CP and the x axis.&lt;/p&gt;
&lt;p&gt;We already know C so if we can find the point P then we can find this intersection point. Once we know the intersection point we can find r&lt;sub&gt;1&lt;/sub&gt; and r&lt;sub&gt;2&lt;/sub&gt;.&lt;/p&gt;
&lt;p&gt;Since P is at the start of the bevel:&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]P_y = b/2[/latex]&lt;/p&gt;
&lt;p&gt;Because P lies on the biconvex circle with center C and radius r we can use the equation of the circle to find x as a function of y:&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]x^2 + y^2 = r^2[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]x = \sqrt{ r^2 - y^2 }[/latex]&lt;/p&gt;
&lt;p&gt;We need y relative to the circle center C, not in go stone coordinates, so we add d and substitute y&amp;rsquo; for y:&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]y&amp;rsquo; = b/2 + d[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]P_x = \sqrt{ r^2 - ( b/2 + d )^2 }[/latex]&lt;/p&gt;
&lt;p&gt;We can now find r&lt;sub&gt;1&lt;/sub&gt; by similar triangles:&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]r_1/P_x = d / ( d + b/2 )[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]r_1 = P_x d / ( d + b/2 )[/latex]&lt;/p&gt;
&lt;p&gt;and q by Pythagoras theorem:&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]q^2 = d^2 + r_1^2[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]q = \sqrt{ d^2 + r_1^2 }[/latex]&lt;/p&gt;
&lt;p&gt;Because line CP has length r and substituting for q:&lt;/p&gt;
&lt;p&gt;[latex size=&amp;ldquo;2&amp;rdquo;]q + r_2 = r[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]r_2 = r - q[/latex]
[latex size=&amp;ldquo;2&amp;rdquo;]r_2 = r - \sqrt{ d^2 + r_1^2 }[/latex]&lt;/p&gt;
&lt;p&gt;Now we have everything we need to write the function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    void calculate_bevel( float r, float d, float b, 
                          float &amp;amp; r1, float &amp;amp; r2 )
    {
        const float y = b/2 + d;
        const float px = sqrt( r*r - y*y );
        r1 = px * d / ( d + b/2 ); 
        r2 = r - sqrt( d*d + r1*r1 );
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can calculate the bevel torus to round off any go stone we create as the intersection of two spheres.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/tessellating_the_go_stone/&#34;&gt;Tessellating The Go Stone&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Virtual Go</title>
      <link>https://gafferongames.com/post/introduction_to_virtual_go/</link>
      <pubDate>Mon, 18 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/introduction_to_virtual_go/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt;. Welcome to &lt;a href=&#34;https://gafferongames.com/categories/virtual-go/&#34;&gt;&lt;strong&gt;Virtual Go&lt;/strong&gt;&lt;/a&gt;, my project to create a physically accurate computer simulation of a Go board and stones.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a professional game programmer with 15 years experience in the game industry. Over the years I&amp;rsquo;ve worked for Irrational Games, Team Bondi, Pandemic Studios, Sony Santa Monica and most recently Respawn Entertainment. During my career I&amp;rsquo;m extremely proud to have worked on such games as &amp;lsquo;Freedom Force&amp;rsquo;, &amp;lsquo;L.A. Noire&amp;rsquo;, &amp;lsquo;Journey&amp;rsquo;, &amp;lsquo;God of War: Ascension&amp;rsquo; and &amp;lsquo;Titanfall&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;In my spare time I&amp;rsquo;m also an avid player of the board game &lt;a href=&#34;https://en.wikipedia.org/wiki/Go_(game)&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gafferongames.com/img/virtualgo/go-board-outside-cafe.jpg&#34; width=&#34;100%&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A personal project I&amp;rsquo;ve always dreamed of combines the things I love: the game of Go, graphics programming, physics simulation and network programming.&lt;/p&gt;
&lt;p&gt;The end result I hope to achieve is a beautiful real-time computer rendering of a go board and stones with photorealistic visuals and the laws of physics defining all interactions between the go stones and the board. To Go players reading this, yes, I do aim to reproduce that unique &amp;lsquo;wobble&amp;rsquo; and feel you are familiar with when placing a stone on the board.&lt;/p&gt;
&lt;p&gt;During the course of this article series I&amp;rsquo;m going to build this project entirely from scratch and include &lt;u&gt;you&lt;/u&gt; in on all the details of building it as a tutorial. I believe in sharing knowledge and my hope is you can follow this project and understand the passion I bring to it and perhaps learn a few things along the way.&lt;/p&gt;
&lt;p&gt;If you already play Go and want to get right in to the details of building the simulation, I would recommend skipping ahead to the next article in the series: &lt;a href=&#34;https://gafferongames.com/post/shape_of_the_go_stone/&#34;&gt;Shape Of The Go Stone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise, if you would like a quick introduction to Go, please read on!&lt;/p&gt;
&lt;h2 id=&#34;the-game-of-go&#34;&gt;The Game of Go&lt;/h2&gt;
&lt;p&gt;Go is a board game that originated in ancient China.&lt;/p&gt;
&lt;p&gt;Today it is played worldwide but has a particularly strong following in China, Japan and Korea. It is not particularly well known in the West, although it has featured in popular culture in the movie &amp;ldquo;A Beautiful Mind&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gafferongames.com/img/virtualgo/old-men-playing-go.jpg&#34; width=&#34;100%&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go is played on a grid with black and white stones. It is played by two people, each taking turns to place a stone of their color at one of the intersection points on the grid. Once placed on the board, stones do not move.&lt;/p&gt;
&lt;p&gt;Each stone on the board has a number of liberties equal to the number of lines radiating out from it on the grid. A stone in the middle of the board has four liberties, a stone on the side has three, a stone in the corner has just two.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gafferongames.com/img/virtualgo/go-board-liberties-9x9.jpg&#34; width=&#34;100%&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the opponent is able to surround all the liberties with stones of the opposite color, the stone is removed from the board.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gafferongames.com/img/virtualgo/capture-stones-9x9.jpg&#34; width=&#34;100%&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When stones of the same color are placed horizontally or vertically next to each other they become logically connected and form a &amp;ldquo;group&amp;rdquo; with its own set of liberties. For example, a group of two stones in the center has 6 liberties, while the same group on the side has only 4.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gafferongames.com/img/virtualgo/go-board-group-of-two-liberties-9x9.jpg&#34; width=&#34;100%&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A group may be captured if all of its liberties are blocked with stones of the opposite color. When a group is captured it is removed from the board as a unit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gafferongames.com/img/virtualgo/capture-groups-of-two-9x9.jpg&#34; width=&#34;100%&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course it is not so easy to surround your opponents stones because they get to place stones too :)&lt;/p&gt;
&lt;p&gt;For example, a single black stone in the center with just one liberty remaining is in a situation known as &amp;ldquo;Atari&amp;rdquo;, but black can escape by extending to form a group of two stones. Now the black group has three liberties and can extend to create more liberties faster than they can be taken away.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gafferongames.com/img/virtualgo/atari-run-away-9x9.jpg&#34; width=&#34;100%&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It follows that it&amp;rsquo;s not really possible to capture all of your opponents stones or for them to capture all of yours. Instead, you must coexist on the board with stones of the other color and find a way to surround more points of territory than your opponent.&lt;/p&gt;
&lt;p&gt;It sounds simple but as you play Go you&amp;rsquo;ll notice beautiful complexity emerging like a fractal: life and death - stones living even though surrounded, liberty races, seki or &amp;ldquo;dual life&amp;rdquo;, the ladder, ko, the snapback, playing under the stones, the monkey jump, the bamboo joint, the tiger mouth.&lt;/p&gt;
&lt;p&gt;So many beautiful properties from such simple rules. Truly an amazing game!&lt;/p&gt;
&lt;p&gt;Please visit &lt;a href=&#34;http://playgo.to/iwtg/en/&#34;&gt;The Interactive Way To Go&lt;/a&gt; if you would like to learn more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/shape_of_the_go_stone/&#34;&gt;Shape of The Go Stone&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Floating Point Determinism</title>
      <link>https://gafferongames.com/post/floating_point_determinism/</link>
      <pubDate>Wed, 24 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/floating_point_determinism/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;a href=&#34;https://gafferongames.com/categories/game-networking/&#34;&gt;&lt;strong&gt;Networking for Game Programmers&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lately I&amp;rsquo;ve been doing some research into networking game physics simulations via deterministic lockstep methods.&lt;/p&gt;
&lt;p&gt;The basic idea is that instead of synchronizing the state of physics objects directly by sending the positions, orientations, velocities etc. over the network, one could synchronize the simulation &lt;em&gt;implicitly&lt;/em&gt; by sending just the player inputs.&lt;/p&gt;
&lt;p&gt;This is a very attractive synchronization strategy because the amount of network traffic depends on the size of the player inputs instead of the amount of physics state in the world. In fact, this strategy has been used for many years in RTS games for precisely this reason; with thousands and thousands of units on the map, they simply have too much state to send over the network.&lt;/p&gt;
&lt;p&gt;Perhaps you have a complex physics simulation with lots of rigid body state, or a cloth or soft body simulation which needs to stay perfectly in sync across two machines because it is gameplay affecting, but you cannot afford to send all the state. It is clear that the only possible solution in this situation is to attempt a deterministic networking strategy.&lt;/p&gt;
&lt;p&gt;But we run into a problem. Physics simulations use floating point calculations, and for one reason or another it is considered &lt;em&gt;very difficult&lt;/em&gt; to get exactly the same result from floating point calculations on two different machines. People even report different results on the same machine from run to run, and between debug and release builds. Other folks say that AMDs give different results to Intel machines, and that SSE results are different from x87. What exactly is going on? Are floating point calculations deterministic or not?&lt;/p&gt;
&lt;p&gt;Unfortunately, the answer is not a simple &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo; but &amp;ldquo;yes, if&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Here is what I have discovered so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your physics simulation is itself deterministic, with a bit of work you should be able to get it to play back a replay of recorded inputs on the same machine and get the exact same result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to get deterministic results for floating calculations across multiple computers provided you use an executable built with the same compiler, run on machines with the same architecture, and perform some platform-specific tricks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is incredibly naive to write arbitrary floating point code in C or C++ and expect it to give exactly the same result across different compilers or architectures, or even the same results across debug and release builds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However with a good deal of work you &lt;u&gt;may&lt;/u&gt; be able to &lt;a href=&#34;http://www.yosefk.com/blog/consistency-how-to-defeat-the-purpose-of-ieee-floating-point.html&#34;&gt;coax&lt;/a&gt; exactly the same floating point results out of different compilers or different machine architectures by using your compilers &amp;ldquo;strict&amp;rdquo; IEEE 754 compliant mode and restricting the set of floating point operations you use. This typically results in significantly lower floating point performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you would like to debate these points or add your own nuance, please &lt;a href=&#34;https://gafferongames.com/contact&#34;&gt;contact&lt;/a&gt; me! I consider this question by no means settled and am very interested in other peoples experiences with deterministic floating point simulations and exactly reproducible floating point calculations. Please contact me especially if you have managed to get binary exact results across different architectures and compilers in real world situations.&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;p&gt;&lt;u&gt;Here are the resources I have discovered in my search so far&amp;hellip;&lt;/u&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;The technology we license to various customers is based on determinism of floating point (in 64-bit mode, even) and has worked that way since the year 2000.
&lt;p&gt;As long as you stick to a single compiler, and a single CPU instruction set, it is possible to make floating point fully deterministic. The specifics vary by platform (i e, different between x86, x64 and PPC).&lt;/p&gt;
&lt;p&gt;You have to make sure that the internal precision is set to 64 bits (not 80, because only Intel implements that), and that the rounding mode is consistent. Furthermore, you have to check this after calls to external DLLs, because many DLLs (Direct3D, printer drivers, sound libraries, etc) will change the precision or rounding mode without setting it back.&lt;/p&gt;
&lt;p&gt;The ISA is IEEE compliant. If your x87 implementation isn&amp;rsquo;t IEEE, it&amp;rsquo;s not x87.&lt;/p&gt;
&lt;p&gt;Also, you can&amp;rsquo;t use SSE or SSE2 for floating point, because it&amp;rsquo;s too under-specified to be deterministic.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Jon Watte, GameDev.net forums&lt;/b&gt;
&lt;a href=&#34;http://www.gamedev.net/community/forums/topic.asp?topic_id=499435&#34;&gt;&lt;a href=&#34;http://www.gamedev.net/community/forums/topic.asp?topic_id=499435&#34;&gt;http://www.gamedev.net/community/forums/topic.asp?topic_id=499435&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;I work at Gas Powered Games and i can tell you first hand that floating point math is deterministic. You just need the same instruction set and compiler and of course the user&#39;s processor adheres to the IEEE754 standard, which includes all of our PC and 360 customers. The engine that runs DemiGod, Supreme Commander 1 and 2 rely upon the IEEE754 standard. Not to mention probably all other RTS peer to peer games in the market. As soon as you have a peer to peer network game where each client broadcasts what command they are doing on what &#39;tick&#39; number and rely on the client computer to figure out the simulation/physical details your going to rely on the determinism of the floating point processor.
&lt;p&gt;At app startup time we call:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_controlfp(_PC_24, _MCW_PC)
_controlfp(_RC_NEAR, _MCW_RC)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, every tick we assert that these fpu settings are still set:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpAssert( (_controlfp(0, 0) &amp;amp;amp; _MCW_PC) == _PC_24 );
gpAssert( (_controlfp(0, 0) &amp;amp;amp; _MCW_RC) == _RC_NEAR );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are some MS API functions that can change the fpu model on you so you need to manually enforce the fpu mode after those calls to ensure the fpu stays the same across machines. The assert is there to catch if anyone has buggered the fpu mode.&lt;/p&gt;
&lt;p&gt;FYI We have the compiler floating point model set to Fast /fp:fast ( but its not a requirement )&lt;/p&gt;
&lt;p&gt;We have never had a problem with the IEEE standard across any PC cpu AMD and Intel with this approach. None of our SupCom or Demigod customers have had problems with their machines either, and we are talking over 1 million customers here (supcom1 + expansion pack). We would have heard if there was a problem with the fpu not having the same results as replays or multiplayer mode wouldn&amp;rsquo;t work at all.&lt;/p&gt;
&lt;p&gt;We did however have problems when using some physics APIs because their code did not have determinism or reproducibility in mind. For example some physics APIS have solvers that take X number of iterations when solving where X can be lower with faster CPUs.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Elijah, Gas Powered Games&lt;/b&gt;&lt;br&gt;
&lt;a href=&#34;http://www.box2d.org/forum/viewtopic.php?f=3&amp;amp;t=1800&#34;&gt;&lt;a href=&#34;http://www.box2d.org/forum/viewtopic.php?f=3&amp;amp;t=1800&#34;&gt;http://www.box2d.org/forum/viewtopic.php?f=3&amp;amp;t=1800&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;If you store replays as controller inputs, they cannot be played back on machines with different CPU architectures, compilers, or optimization settings. In MotoGP, this meant we could not share saved replays between Xbox and PC. It also meant that if we saved a replay from a debug build of the game, it would not work in release builds, or vice versa. This is not always a problem (we never shipped debug builds, after all), but if we ever released a patch, we had to build it using the exact same compiler as the original game. If the compiler had been updated since our original release, and we built a patch using the newer compiler, this could change things around enough that replays saved by the original game would no longer play back correctly.
&lt;p&gt;This is madness! Why don&amp;rsquo;t we make all hardware work the same? Well, we could, if we didn&amp;rsquo;t care about performance. We could say &amp;ldquo;hey Mr. Hardware Guy, forget about your crazy fused multiply-add instructions and just give us a basic IEEE implementation&amp;rdquo;, and &amp;ldquo;hey Compiler Dude, please don&amp;rsquo;t bother trying to optimize our code&amp;rdquo;. That way our programs would run consistently slowly everywhere :-)&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Shawn Hargreaves, MSDN Blog&lt;/b&gt;
&lt;a href=&#34;http://blogs.msdn.com/shawnhar/archive/2009/03/25/is-floating-point-math-deterministic.aspx&#34;&gt;&lt;a href=&#34;http://blogs.msdn.com/shawnhar/archive/2009/03/25/is-floating-point-math-deterministic.aspx&#34;&gt;http://blogs.msdn.com/shawnhar/archive/2009/03/25/is-floating-point-math-deterministic.aspx&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;&#34;Battlezone 2 used a lockstep networking model requiring absolutely identical results on every client, down to the least-significant bit of the mantissa, or the simulations would start to diverge. While this was difficult to achieve, it meant we only needed to send user input across the network; all other game state could be computed locally. During development, we discovered that AMD and Intel processors produced slightly different results for trancendental functions (sin, cos, tan, and their inverses), so we had to wrap them in non-optimized function calls to force the compiler to leave them at single-precision. That was enough to make AMD and Intel processors consistent, but it was definitely a learning experience.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Ken Miller, Pandemic Studios&lt;/b&gt;&lt;br&gt;
&lt;a href=&#34;http://www.box2d.org/forum/viewtopic.php?f=4&amp;amp;t=175&#34;&gt;&lt;a href=&#34;http://www.box2d.org/forum/viewtopic.php?f=4&amp;amp;t=175&#34;&gt;http://www.box2d.org/forum/viewtopic.php?f=4&amp;amp;t=175&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;... In FSW1 when desync is detected in player would be instantly killed by &#34;magic sniper&#34;. :) All that stuff was fixed in FSW2. We just ran precise FP and used Havok FPU libs instead SIMD on PC. Also integer modulo is problem too because C++ standard says it&#39;s &#34;implementation defined&#34; (in case when multiple compilers/platforms are used). In general I liked tools for lockstep we developed, finding desyncs in code on FSW2 was trivial.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Branimir KaradÅ¾iÄ, Pandemic Studios&lt;/b&gt;
&lt;a href=&#34;http://www.google.com/buzz/100111796601236342885/8hDZ655S6x3/Floating-Point-Determinism-Gaffer-on-Games&#34;&gt;http://www.google.com/buzz/100111796601236342885/8hDZ655S6x3/Floating-Point-Determinism-Gaffer-on-Games&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt; I know three main sources of floating point inconsistency pain:
&lt;p&gt;Algebraic compiler optimizations
âComplexâ instructions like multiply-accumulate or sine
x86-specific pain not available on any other platform; not that ~100% of non-embedded devices is a small market share for a pain.&lt;/p&gt;
&lt;p&gt;The good news is that most pain comes from item 3 which can be more or less solved automatically. For the purpose of decision making (âshould we invest energy into FP consistency or is it futile?â), Iâd say that itâs not futile and if you can cite actual benefits youâd get from consistency, then itâs worth the (continuous) effort.&lt;/p&gt;
&lt;p&gt;Summary: use SSE2 or SSE, and if you canât, configure the FP CSR to use 64b intermediates and avoid 32b floats. Even the latter solution works passably in practice, as long as everybody is aware of it.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Yossi Kreinin, Personal Blog&lt;/b&gt;&lt;br&gt;
&lt;a href=&#34;http://www.yosefk.com/blog/consistency-how-to-defeat-the-purpose-of-ieee-floating-point.html&#34;&gt;&lt;a href=&#34;http://www.yosefk.com/blog/consistency-how-to-defeat-the-purpose-of-ieee-floating-point.html&#34;&gt;http://www.yosefk.com/blog/consistency-how-to-defeat-the-purpose-of-ieee-floating-point.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;The short answer is that FP calculations are entirely deterministic, as per the IEEE Floating Point Standard, but that doesn&#39;t mean they&#39;re entirely reproducible across machines, compilers, OS&#39;s, etc.
&lt;p&gt;The long answer to these questions and more can be found in what is probably the best reference on floating point, David Goldberg&amp;rsquo;s What Every Computer Scientist Should Know About Floating Point Arithmetic. Skip to the section on the IEEE standard for the key details.&lt;/p&gt;
&lt;p&gt;Finally, if you are doing the same sequence of floating point calculations on the same initial inputs, then things should be replayable exactly just fine. The exact sequence can change depending on your compiler/os/standard library, so you might get some small errors this way.&lt;/p&gt;
&lt;p&gt;Where you usually run into problems in floating point is if you have a numerically unstable method and you start with FP inputs that are approximately the same but not quite. If your method&amp;rsquo;s stable, you should be able to guarantee reproducibility within some tolerance. If you want more detail than this, then take a look at Goldberg&amp;rsquo;s FP article linked above or pick up an intro text on numerical analysis.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Todd Gamblin, Stack Overflow&lt;/b&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/968435/what-could-cause-a-deterministic-process-to-generate-floating-point-errors&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/968435/what-could-cause-a-deterministic-process-to-generate-floating-point-errors&#34;&gt;http://stackoverflow.com/questions/968435/what-could-cause-a-deterministic-process-to-generate-floating-point-errors&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;The C++ standard does not specify a binary representation for the floating-point types float, double and long double. Although not required by the standard, the implementation of floating point arithmetic used by most C++ compilers conforms to a standard, IEEE 754-1985, at least for types float and double. This is directly related to the fact that the floating point units of modern CPUs also support this standard. The IEEE 754 standard specifies the binary format for floating point numbers, as well as the semantics for floating point operations. Nevertheless, the degree to which the various compilers implement all the features of IEEE 754 varies. This creates various pitfalls for anyone writing portable floating-point code in C++.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;GÃ¼nter Obiltschnig, Cross-Platform Issues with Floating-Point arithmetics in C++&lt;/b&gt;
&lt;a href=&#34;http://www.appinf.com/download/FPIssues.pdf&#34;&gt;&lt;a href=&#34;http://www.appinf.com/download/FPIssues.pdf&#34;&gt;http://www.appinf.com/download/FPIssues.pdf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;Floating-point computations are strongly dependent on the FPU hardware implementation, the compiler and its optimizations, and the system mathematical library (libm). Experiments are usually reproducible only on the same machine with the same system library and the same compiler using the same options.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;STREFLOP Library&lt;/b&gt;
&lt;a href=&#34;http://nicolas.brodu.numerimoire.net/en/programmation/streflop/index.html&#34;&gt;&lt;a href=&#34;http://nicolas.brodu.numerimoire.net/en/programmation/streflop/index.html&#34;&gt;http://nicolas.brodu.numerimoire.net/en/programmation/streflop/index.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;Floating Point (FP) Programming Objectives:
&lt;p&gt;â¢ &lt;b&gt;Accuracy&lt;/b&gt; - Produce results that are âcloseâ to the correct value&lt;/p&gt;
&lt;p&gt;â¢ &lt;b&gt;Reproducibility&lt;/b&gt; - Produce consistent results from one run to the next. From one set of build options to another. From one compiler to another. From one platform to another.&lt;/p&gt;
&lt;p&gt;â¢ &lt;b&gt;Performance&lt;/b&gt; â Produce the most efficient code possible.&lt;/p&gt;
&lt;p&gt;These options usually conflict! Judicious use of compiler options lets you control the tradeoffs.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Intel C++ Compiler: Floating Point Consistency&lt;/b&gt;
&lt;a href=&#34;http://www.nccs.nasa.gov/images/FloatingPoint%5Fconsistency.pdf&#34;&gt;&lt;a href=&#34;http://www.nccs.nasa.gov/images/FloatingPoint%5Fconsistency.pdf&#34;&gt;http://www.nccs.nasa.gov/images/FloatingPoint%5Fconsistency.pdf&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;If strict reproducibility and consistency are important do not change the floating point environment without also using either fp-model strict (Linux or Mac OS*) or /fp:strict (Windows*) option or pragma fenv_access.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Intel C++ Compiler Manual&lt;/b&gt;
&lt;a href=&#34;http://cache-www.intel.com/cd/00/00/34/76/347605_347605.pdf&#34;&gt;http://cache-www.intel.com/cd/00/00/34/76/347605_347605.pdf&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;Under the fp:strict mode, the compiler never performs any optimizations that perturb the accuracy of floating-point computations. The compiler will always round correctly at assignments, typecasts and function calls, and intermediate rounding will be consistently performed at the same precision as the FPU registers. Floating-point exception semantics and FPU environment sensitivity are enabled by default. Certain optimizations, such as contractions, are disabled because the compiler cannot guarantee correctness in every case.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Microsoft Visual C++ Floating-Point Optimization&lt;/b&gt;
&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa289157(VS.71).aspx#floapoint_topic4&#34;&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa289157(VS.71).aspx#floapoint_topic4&#34;&gt;http://msdn.microsoft.com/en-us/library/aa289157(VS.71).aspx#floapoint_topic4&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;Please note that the results of floating point calculations will likely not be exactly the same between PowerPC and Intel, because the PowerPC scalar and vector FPU cores are designed around a fused multiply add operation. The Intel chips have separate multiplier and adder, meaning that those operations must be done separately. This means that for some steps in a calculation, the Intel CPU may incur an extra rounding step, which may introduce 1/2 ulp errors at the multiplication stage in the calculation.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Apple Developer Support&lt;/b&gt;
&lt;a href=&#34;http://developer.apple.com/hardwaredrivers/ve/sse.html&#34;&gt;&lt;a href=&#34;http://developer.apple.com/hardwaredrivers/ve/sse.html&#34;&gt;http://developer.apple.com/hardwaredrivers/ve/sse.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;For all of the instructions that are IEEE operations (*,+,-,/,sqrt, compares, regardless of whether they are SSE or x87), they will produce the same results across platforms with the same control settings (same precision control and rounding modes, flush to zero, etc.) and inputs.  This is true for both 32-bit and 64-bit processors... On the x87 side, the transcendental instructions like, fsin, fcos, etc. could produce slightly different answers across implementations. They are specified with a relative error that is guaranteed, but not bit-for-bit accuracy.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Intel Software Network Support&lt;/b&gt;
&lt;a href=&#34;http://software.intel.com/en-us/forums/showthread.php?t=48339&#34;&gt;&lt;a href=&#34;http://software.intel.com/en-us/forums/showthread.php?t=48339&#34;&gt;http://software.intel.com/en-us/forums/showthread.php?t=48339&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;I&#39;m concerned about the possible differences between hardware implementations of IEEE-754. I already know about the problem of programming languages introducing subtle differences between what is written in the source code and what is actually executed at the assembly level. [Mon08] Now, I&#39;m interested in differences between, say, Intel/SSE and PowerPC at the level of individual instructions.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;D. Monniaux on IEEE 754 mailing list&lt;/b&gt;
&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03864.html&#34;&gt;&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03864.html&#34;&gt;http://grouper.ieee.org/groups/754/email/msg03864.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;One must ... avoid the non-754 instructions that are becoming more prevalent for inverse and inverse sqrt that don&#39;t round correctly or even consistently from one implementation to another, as well as the x87 transcendental operations which are necessarily implemented differently by AMD and Intel.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;David Hough on 754 IEEE mailing list&lt;/b&gt;
&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03867.html&#34;&gt;&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03867.html&#34;&gt;http://grouper.ieee.org/groups/754/email/msg03867.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;Yes, getting reproducible results IS possible.  But you CAN&#39;T do it without defining a programming methodology intended to deliver that property.  And that has FAR more drastic consequences than any of its proponents admit - in particular, it is effectively incompatible with most forms of parallelism.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Nick Maclaren on 754 IEEE mailing list&lt;/b&gt;
&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03872.html&#34;&gt;&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03872.html&#34;&gt;http://grouper.ieee.org/groups/754/email/msg03872.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;If we are talking practicabilities, then things are very different, and expecting repeatable results in real programs is crying for the moon. But we have been there before, and let&#39;s not go there again.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Nick Maclaren on 754 IEEE mailing list&lt;/b&gt;
&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03862.html&#34;&gt;&lt;a href=&#34;http://grouper.ieee.org/groups/754/email/msg03862.html&#34;&gt;http://grouper.ieee.org/groups/754/email/msg03862.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;The IEEE 754-1985 allowed many variations in implementations (such as the encoding of some values and the detection of certain exceptions). IEEE 754-2008 has tightened up many of these, but a few variations still remain (especially for binary formats). The reproducibility clause recommends that language standards should provide a means to write reproducible programs (i.e., programs that will produce the same result in all implementations of a language), and describes what needs to be done to achieve reproducible results.&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;Wikipedia Page on IEEE 754-2008 standard&lt;/b&gt;
&lt;a&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/IEEE_754-2008#Reproducibility&#34;&gt;http://en.wikipedia.org/wiki/IEEE_754-2008#Reproducibility&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;If one wants semantics almost exactly faithful to strict IEEE-754 single or double precision computations in round-to-nearest mode, including with respect to overflow and underflow conditions, one can use, at the same time, limitation of precision and options and programming style that force operands to be systematically written to memory between floating-point operations. This incurs some performance loss; furthermore, there will still be slight discrepancy due to double rounding on underflow.
&lt;p&gt;A simpler solution for current personal computers is simply to force the compiler to use the SSE unit for computations on IEEE-754 types; however, most embedded systems using IA32 microprocessors or microcontrollers do not use processors equipped with this unit.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;David Monniaux, The pitfalls of verifying floating-point computations&lt;/b&gt;
&lt;a href=&#34;http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf&#34;&gt;&lt;a href=&#34;http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf&#34;&gt;http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;6. REPRODUCIBILITY
&lt;p&gt;Even under the 1985 version of IEEE-754, if two implementations of the standard executed an operation on the same data, under the same rounding mode and default exception handling, the result of the operation would be identical. The new standard tries to go further to describe when a program will produce identical floating point results on different implementations. The operations described in the standard are all reproducible operations.&lt;/p&gt;
&lt;p&gt;The recommended operations, such as library functions or reduction operators are not reproducible, because they are not required in all implementations. Likewise dependence on the underflow and inexact flags is not reproducible because two different methods of treating underflow are allowed to preserve conformance between IEEE-754(1985) and IEEE-754(2008). The rounding modes are reproducible attributes. Optional attributes are not reproducible.&lt;/p&gt;
&lt;p&gt;The use of value-changing optimizations is to be avoided for reproducibility. This includes use of the associative and disributative laws, and automatic generation of fused multiply-add operations when the programmer did not explicitly use that operator.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Peter Markstein, The New IEEE Standard for Floating Point Arithmetic&lt;/b&gt;
&lt;a href=&#34;http://drops.dagstuhl.de/opus/volltexte/2008/1448/pdf/08021.MarksteinPeter.ExtAbstract.1448.pdf&#34;&gt;&lt;a href=&#34;http://drops.dagstuhl.de/opus/volltexte/2008/1448/pdf/08021.MarksteinPeter.ExtAbstract.1448.pdf&#34;&gt;http://drops.dagstuhl.de/opus/volltexte/2008/1448/pdf/08021.MarksteinPeter.ExtAbstract.1448.pdf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;blockquote&gt;Unfortunately, the IEEE standard does not guarantee that the same program will deliver identical results on all conforming systems. Most programs will actually produce different results on different systems for a variety of reasons. For one, most programs involve the conversion of numbers between decimal and binary formats, and the IEEE standard does not completely specify the accuracy with which such conversions must be performed. For another, many programs use elementary functions supplied by a system library, and the standard doesn&#39;t specify these functions at all. Of course, most programmers know that these features lie beyond the scope of the IEEE standard.
&lt;p&gt;Many programmers may not realize that even a program that uses only the numeric formats and operations prescribed by the IEEE standard can compute different results on different systems. In fact, the authors of the standard intended to allow different implementations to obtain different results. Their intent is evident in the definition of the term destination in the IEEE 754 standard: &amp;ldquo;A destination may be either explicitly designated by the user or implicitly supplied by the system (for example, intermediate results in subexpressions or arguments for procedures). Some languages place the results of intermediate calculations in destinations beyond the user&amp;rsquo;s control. Nonetheless, this standard defines the result of an operation in terms of that destination&amp;rsquo;s format and the operands&amp;rsquo; values.&amp;rdquo; (IEEE 754-1985, p. 7) In other words, the IEEE standard requires that each result be rounded correctly to the precision of the destination into which it will be placed, but the standard does not require that the precision of that destination be determined by a user&amp;rsquo;s program. Thus, different systems may deliver their results to destinations with different precisions, causing the same program to produce different results (sometimes dramatically so), even though those systems all conform to the standard.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Differences Among IEEE 754 Implementations&lt;/b&gt;
&lt;a href=&#34;http://docs.sun.com/source/806-3568/ncg_goldberg.html#3098&#34;&gt;&lt;a href=&#34;http://docs.sun.com/source/806-3568/ncg_goldberg.html#3098&#34;&gt;http://docs.sun.com/source/806-3568/ncg_goldberg.html#3098&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;img style=&#34;border:0 initial initial;&#34; title=&#34;half-spacer&#34; src=&#34;https://gafferongames.com/img/half-spacer.png&#34; width=&#34;34&#34; height=&#34;12&#34; /&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>What Every Programmer Needs To Know About Game Networking</title>
      <link>https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/</link>
      <pubDate>Wed, 24 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;a href=&#34;https://gafferongames.com/categories/game-networking/&#34;&gt;&lt;strong&gt;Networking for Game Programmers&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have you ever wondered how multiplayer games work?&lt;/p&gt;
&lt;p&gt;From the outside it seems magical: two or more players sharing a consistent experience across the network like they actually exist together in the same virtual world.&lt;/p&gt;
&lt;p&gt;But as programmers we know the truth of what is actually going on underneath is quite different from what you see. It turns out it&amp;rsquo;s all an illusion. A massive sleight-of-hand. What you perceive as a shared reality is only an approximation unique to your own point of view and place in time.&lt;/p&gt;
&lt;h2 id=&#34;peer-to-peer-lockstep&#34;&gt;Peer-to-Peer Lockstep&lt;/h2&gt;
&lt;p&gt;In the beginning games were networked peer-to-peer, with each each computer exchanging information with each other in a fully connected mesh topology. You can still see this model alive today in RTS games, and interestingly for some reason, perhaps because it was the first way - it&amp;rsquo;s still how most people think that game networking works.&lt;/p&gt;
&lt;p&gt;The basic idea is to abstract the game into a series of turns and a set of command messages when processed at the beginning of each turn direct the evolution of the game state. For example: move unit, attack unit, construct building. All that is needed to network this is to run exactly the same set of commands and turns on each player&amp;rsquo;s machine starting from a common initial state.&lt;/p&gt;
&lt;p&gt;Of course this is an overly simplistic explanation and glosses over many subtle points, but it gets across the basic idea of how networking for RTS games work. You can read more about this networking model here: &lt;a href=&#34;http://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php&#34;&gt;1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems so simple and elegant, but unfortunately there are several limitations.&lt;/p&gt;
&lt;p&gt;First, it&amp;rsquo;s exceptionally difficult to ensure that a game is completely deterministic; that each turn plays out identically on each machine. For example, one unit could take slightly a different path on two machines, arriving sooner to a battle and saving the day on one machine, while arriving later on the other and erm. not saving the day. Like a butterfly flapping it&amp;rsquo;s wings and causing a hurricane on the other side of the world, one &lt;i&gt;tiny difference&lt;/i&gt; results in complete desynchronization over time.&lt;/p&gt;
&lt;p&gt;The next limitation is that in order to ensure that the game plays out identically on all machines it is necessary to wait until all player&amp;rsquo;s commands for that turn are received &lt;i&gt;before&lt;/i&gt; simulating that turn. This means that each player in the game has latency equal to the most lagged player. RTS games typically hide this by providing audio feedback immediately and/or playing cosmetic animation, but ultimately any truly game affecting action may occur only after this delay has passed.&lt;/p&gt;
&lt;p&gt;The final limitation occurs because of the way the game synchronizes by sending just the command messages which change the state. In order for this to work it is necessary for all players to start from the same initial state. Typically this means that each player must join up in a lobby before commencing play, although it is technically possible to support late join, this is not common due to the difficulty of capturing and transmitting a completely deterministic starting point in the middle of a live game.&lt;/p&gt;
&lt;p&gt;Despite these limitations this model naturally suits RTS games and it still lives on today in games like &amp;ldquo;Command and Conquer&amp;rdquo;, &amp;ldquo;Age of Empires&amp;rdquo; and &amp;ldquo;Starcraft&amp;rdquo;. The reason being that in RTS games the game state consists of many thousands of units and is simply too large to exchange between players. These games have no choice but to exchange the commands which drive the evolution of the game state.&lt;/p&gt;
&lt;p&gt;But for other genres, the state of the art has moved on. So that&amp;rsquo;s it for the deterministic peer-to-peer lockstep networking model. Now lets look at the evolution of action games starting with Doom, Quake and Unreal.&lt;/p&gt;
&lt;h2 id=&#34;clientserver&#34;&gt;Client/Server&lt;/h2&gt;
&lt;p&gt;In the era of action games, the limitations of peer-to-peer lockstep became apparent in Doom, which despite playing well over the LAN played &lt;i&gt;terribly&lt;/i&gt; over the internet for typical users:&lt;/p&gt;
&lt;blockquote&gt;Although it is possible to connect two DOOM machines together across the Internet using a modem link, the resulting game will be slow, ranging from the unplayable (e.g. a 14.4Kbps PPP connection) to the marginally playable (e.g. a 28.8Kbps modem running a Compressed SLIP driver). Since these sorts of connections are of only marginal utility, this document will focus only on direct net connections.&lt;/blockquote&gt;
&lt;p&gt;The problem of course was that Doom was designed for networking over LAN only, and used the peer-to-peer lockstep model described previously for RTS games. Each turn player inputs (key presses etc.) were exchanged with other peers, and before any player could simulate a frame all other player&amp;rsquo;s key presses needed to be received.&lt;/p&gt;
&lt;p&gt;In other words, before you could turn, move or shoot you had to wait for the inputs from the most lagged modem player. Just imagine the wailing and gnashing of teeth that this would have resulted in for the sort of folks with internet connections that were &amp;ldquo;of only marginal utility&amp;rdquo;. :)&lt;/p&gt;
&lt;p&gt;In order to move beyond the LAN and the well connected elite at university networks and large companies, it was necessary to change the model. And in 1996, that&amp;rsquo;s exactly what John Carmack and his team did when he released Quake using client/server instead of peer-to-peer.&lt;/p&gt;
&lt;p&gt;Now instead of each player running the same game code and communicating directly with each other, each player was now a &amp;ldquo;client&amp;rdquo; and they all communicated with just one computer called the &amp;ldquo;server&amp;rdquo;. There was no longer any need for the game to be deterministic across all machines, because the game really only existed on the server. Each client effectively acted as a &lt;i&gt;dumb terminal&lt;/i&gt; showing an approximation of the game as it played out on the server.&lt;/p&gt;
&lt;p&gt;In a pure client/server model you run no game code locally, instead sending your inputs such as key presses, mouse movement, clicks to the server. In response the server updates the state of your character in the world and replies with a packet containing the state of your character and other players near you. All the client has to do is interpolate between these updates to provide the illusion of smooth movement and &lt;em&gt;BAM&lt;/em&gt; you have a networked game.&lt;/p&gt;
&lt;p&gt;This was a great step forward. The quality of the game experience now depended on the connection between the client and the server instead of the most lagged peer in the game. It also became possible for players to come and go in the middle of the game, and the number of players increased as client/server reduced the bandwidth required on average per-player.&lt;/p&gt;
&lt;p&gt;But there were still problems with the pure client/server model:&lt;/p&gt;
&lt;blockquote&gt;While I can remember and justify all of my decisions about networking from DOOM through Quake, the bottom line is that I was working with the wrong basic assumptions for doing a good internet game. My original design was targeted at &amp;lt; 200ms connection latencies.  People that have a digital connection to the internet through a good provider get a pretty good game experience.  Unfortunately, 99% of the world gets on with a slip or ppp connection over a modem, often through a crappy overcrowded ISP. This gives 300+ ms latencies, minimum.  Client. User&amp;#39;s modem. ISP&amp;#39;s modem. Server. ISP&amp;#39;s modem. User&amp;#39;s modem.  Client. God, that sucks.
&lt;p&gt;Ok, I made a bad call.  I have a T1 to my house, so I just wasn&#39;t familliar with PPP life.  I&#39;m addressing it now.&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;The problem was of course latency.&lt;/p&gt;
&lt;p&gt;What happened next would change the industry forever.&lt;/p&gt;
&lt;h2 id=&#34;client-side-prediction&#34;&gt;Client-Side Prediction&lt;/h2&gt;
&lt;p&gt;In the original Quake you felt the latency between your computer and the server. Press forward and you&amp;rsquo;d wait however long it took for packets to travel to the server and back to you before you&amp;rsquo;d actually start moving. Press fire and you wait for that same delay before shooting.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve played any modern FPS like Call of Duty: Modern Warfare, you know this is no longer what happens. So how exactly do modern FPS games remove the latency on your own actions in multiplayer?&lt;/p&gt;
&lt;p&gt;When writing about his plans for the soon to be released QuakeWorld, John Carmack said:&lt;/p&gt;
&lt;blockquote&gt; I am now allowing the client to guess at the results of the users movement until the authoritative response from the server comes through.  This is a biiiig architectural change.  The client now needs to know about solidity of objects, friction, gravity, etc.  I am sad to see the elegant client-as-terminal setup go away, but I am practical above idealistic.&lt;/blockquote&gt;
&lt;p&gt;So now in order to remove the latency, the client runs more code than it previously did. It is no longer a dumb terminal sending inputs to the server and interpolating between state sent back. Instead it is able to predict the movement of your character locally and &lt;i&gt;immediately&lt;/i&gt; in response to your input, running a subset of the game code for your player character on the client machine.&lt;/p&gt;
&lt;p&gt;Now as soon as you press forward, there is no wait for a round trip between client and server - your character start moving forward right away.&lt;/p&gt;
&lt;p&gt;The difficulty of this approach is not in the prediction, for the prediction works just as normal game code does - evolving the state of the game character forward in time according to the player&amp;rsquo;s input. The difficulty is in applying the correction back from the server to resolve cases when the client and server disagree about where the player character should be and what it is doing.&lt;/p&gt;
&lt;p&gt;Now at this point you might wonder. Hey, if you are running code on the client - why not just make the client authoritative over their player character? The client could run the simulation code for their own character and simply tell the server where they are each time they send a packet. The problem with this is that if each player were able to simply tell the server &amp;ldquo;here is my current position&amp;rdquo; it would be trivially easy to hack the client such that a cheater could instantly dodge the RPG about to hit them, or teleport instantly behind you to shoot you in the back.&lt;/p&gt;
&lt;p&gt;So in FPS games it is absolutely necessary that the server is the authoritative over the state of each player character, in-spite of the fact that each player is locally predicting the motion of their own character to hide latency. As Tim Sweeney writes in &lt;a href=&#34;https://docs.unrealengine.com/udk/Three/NetworkingOverview.html&#34;&gt;The Unreal Networking Architecture&lt;/a&gt;: &amp;ldquo;The Server Is The Man&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Here is where it gets interesting. If the client and the server disagree, the client &lt;i&gt;must&lt;/i&gt; accept the update for the position from the server, but due to latency between the client and server this correction is necessarily in the past. For example, if it takes 100ms from client to server and 100ms back, then any server correction for the player character position will appear to be 200ms in the past, relative to the time up to which the client has predicted their own movement.&lt;/p&gt;
&lt;p&gt;If the client were to simply apply this server correction update verbatim, it would yank the client back in time, completely undoing any client-side prediction. How then to solve this while still allowing the client to predict ahead?&lt;/p&gt;
&lt;p&gt;The solution is to keep a circular buffer of past character state and input for the local player on the client, then when the client receives a correction from the server, it first discards any buffered state older than the corrected state from the server, and replays the state starting from the corrected state back to the present &amp;ldquo;predicted&amp;rdquo; time on the client using player inputs stored in the circular buffer. In effect the client invisibly &amp;ldquo;rewinds and replays&amp;rdquo; the last n frames of local player character movement while holding the rest of the world fixed.&lt;/p&gt;
&lt;p&gt;This way the player appears to control their own character without any latency, and provided that the client and server character simulation code is reasonable, giving roughly exactly the same result for the same inputs on the client and server, it is rarely corrected. It is as Tim Sweeney describes:&lt;/p&gt;
&lt;blockquote&gt;... the best of both worlds: In all cases, the server remains completely authoritative. Nearly all the time, the client movement simulation exactly mirrors the client movement carried out by the server, so the client&#39;s position is seldom corrected. Only in the rare case, such as a player getting hit by a rocket, or bumping into an enemy, will the client&#39;s location need to be corrected.&lt;/blockquote&gt;
&lt;p&gt;In other words, only when the player&amp;rsquo;s character is affected by something external to the local player&amp;rsquo;s input, which cannot possibly be predicted on the client, will the player&amp;rsquo;s position need to be corrected. That and of course, if the player is attempting to cheat :)&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Reliability and Congestion Avoidance over UDP</title>
      <link>https://gafferongames.com/post/reliability_ordering_and_congestion_avoidance_over_udp/</link>
      <pubDate>Mon, 20 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/reliability_ordering_and_congestion_avoidance_over_udp/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;a href=&#34;https://gafferongames.com/categories/game-networking/&#34;&gt;&lt;strong&gt;Networking for Game Programmers&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/virtual_connection_over_udp/&#34;&gt;previous article&lt;/a&gt;, we added our own concept of virtual connection on top of UDP. In this article weâre going to add reliability, ordering and congestion avoidance to our virtual UDP connection.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-with-tcp&#34;&gt;The Problem with TCP&lt;/h2&gt;
&lt;p&gt;Those of you familiar with TCP know that it already has its own concept of connection, reliability-ordering and congestion avoidance, so why are we rewriting our own mini version of TCP on top of UDP?&lt;/p&gt;
&lt;p&gt;The issue is that multiplayer action games rely on a steady stream of packets sent at rates of 10 to 30 packets per second, and for the most part, the data contained is these packets is so time sensitive that only the most recent data is useful. This includes data such as player inputs, the position, orientation and velocity of each player character, and the state of physics objects in the world.&lt;/p&gt;
&lt;p&gt;The problem with TCP is that it abstracts data delivery as a reliable ordered stream. Because of this, if a packet is lost, TCP has to stop and wait for that packet to be resent. This interrupts the steady stream of packets because more recent packets must wait in a queue until the resent packet arrives, so packets are received in the same order they were sent.&lt;/p&gt;
&lt;p&gt;What we need is a different type of reliability. Instead of having all data treated as a reliable ordered stream, we want to send packets at a steady rate and get notified when packets are received by the other computer. This allows time sensitive data to get through without waiting for resent packets, while letting us make our own decision about how to handle packet loss at the application level.&lt;/p&gt;
&lt;p&gt;It is not possible to implement a reliability system with these properties using TCP, so we have no choice but to roll our own reliability on top of UDP.&lt;/p&gt;
&lt;h2 id=&#34;sequence-numbers&#34;&gt;Sequence Numbers&lt;/h2&gt;
&lt;p&gt;The goal of our reliability system is simple: we want to know which packets arrive at the other side of the connection.&lt;/p&gt;
&lt;p&gt;First we need a way to identify packets.&lt;/p&gt;
&lt;p&gt;What if we had added the concept of a &amp;ldquo;packet id&amp;rdquo;? Let&amp;rsquo;s make it an integer value. We could start this at zero then with each packet we send, increase the number by one. The first packet we send would be packet 0, and the 100th packet sent is packet 99.&lt;/p&gt;
&lt;p&gt;This is actually quite a common technique. It&amp;rsquo;s even used in TCP! These packet ids are called sequence numbers. While weâre not going to implement reliability exactly as TCP does, it makes sense to use the same terminology, so weâll call them sequence numbers from now on.&lt;/p&gt;
&lt;p&gt;Since UDP does not guarantee the order of packets, the 100th packet received is not necessarily the 100th packet sent. It follows that we need to insert the sequence number somewhere in the packet, so that the computer at the other side of the connection knows which packet it is.&lt;/p&gt;
&lt;p&gt;We already have a simple packet header for the virtual connection from the previous article, so we&amp;rsquo;ll just add the sequence number in the header like this:&lt;/p&gt;
&lt;pre&gt;   [uint protocol id]
   [uint sequence]
   &lt;em&gt;(packet data...)&lt;/em&gt;&lt;/pre&gt;
&lt;p&gt;Now when the other computer receives a packet it knows its sequence number according to the computer that sent it.&lt;/p&gt;
&lt;h2 id=&#34;acks&#34;&gt;Acks&lt;/h2&gt;
&lt;p&gt;Now that we can identify packets using sequence numbers, the next step is to let the other side of the connection know which packets we receive.&lt;/p&gt;
&lt;p&gt;Logically this is quite simple, we just need to take note of the sequence number of each packet we receive, and send those sequence numbers back to the computer that sent them.&lt;/p&gt;
&lt;p&gt;Because we are sending packets continuously between both machines, we can just add the ack to the packet header, just like we did with the sequence number:&lt;/p&gt;
&lt;pre&gt;    [uint protocol id]
    [uint sequence]
    [uint ack]
    &lt;em&gt;(packet data...)&lt;/em&gt;&lt;/pre&gt;
&lt;p&gt;Our general approach is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each time we send a packet we increase the &lt;em&gt;local sequence number&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we receieve a packet, we check the sequence number of the packet against the sequence number of the most recently received packet, called the &lt;em&gt;remote sequence number&lt;/em&gt;. If the packet is more recent, we update the remote sequence to be equal to the sequence number of the packet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we compose packet headers, the local sequence becomes the sequence number of the packet, and the remote sequence becomes the ack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This simple ack system works provided that one packet comes in for each packet we send out.&lt;/p&gt;
&lt;p&gt;But what if packets clump up such that two packets arrive before we send a packet? We only have space for one ack per-packet, so what do we do?&lt;/p&gt;
&lt;p&gt;Now consider the case where one side of the connection is sending packets at a faster rate. If the client sends 30 packets per-second, and the server only sends 10 packets per-second, we need &lt;em&gt;at least&lt;/em&gt; 3 acks included in each packet sent from the server.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make it even more complex! What if the packet containing the ack is lost? The computer that sent the packet would think the packet got lost but it was actually received!&lt;/p&gt;
&lt;p&gt;It seems like we need to make our reliability system&amp;hellip; &lt;em&gt;more reliable!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;reliable-acks&#34;&gt;Reliable Acks&lt;/h2&gt;
&lt;p&gt;Here is where we diverge significantly from TCP.&lt;/p&gt;
&lt;p&gt;What TCP does is maintain a sliding window where the ack sent is the sequence number of the next packet it expects to receive, in order. If TCP does not receive an ack for a given packet, it stops and resends a packet with that sequence number again. This is exactly the behavior we want to avoid!&lt;/p&gt;
&lt;p&gt;In our reliability system, we never resend a packet with a given sequence number. We sequence n exactly once, then we send n+1, n+2 and so on. We never stop and resend packet n if it was lost, we leave it up to the application to compose a new packet containing the data that was lost, if necessary, and this packet gets sent with a new sequence number.&lt;/p&gt;
&lt;p&gt;Because we&amp;rsquo;re doing things differently to TCP, its now possible to have &lt;em&gt;holes&lt;/em&gt; in the set of packets we ack, so it is no longer sufficient to just state the sequence number of the most recent packet we have received.&lt;/p&gt;
&lt;p&gt;We need to include multiple acks per-packet.&lt;/p&gt;
&lt;p&gt;How many acks do we need?&lt;/p&gt;
&lt;p&gt;As mentioned previously we have the case where one side of the connection sends packets faster than the other. Let&amp;rsquo;s assume that the worst case is one side sending no less than 10 packets per-second, while the other sends no more than 30. In this case, the average number of acks we&amp;rsquo;ll need per-packet is 3, but if packets clump up a bit, we would need more. Let&amp;rsquo;s say 6-10 worst case.&lt;/p&gt;
&lt;p&gt;What about acks that don&amp;rsquo;t get through because the packet containing the ack is lost?&lt;/p&gt;
&lt;p&gt;To solve this, we&amp;rsquo;re going to use a classic networking strategy of using redundancy to defeat packet loss!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s include 33 acks per-packet, and this isn&amp;rsquo;t just going to be up to 33, but &lt;em&gt;always&lt;/em&gt; 33. So for any given ack we &lt;span style=&#34;text-decoration:underline;&#34;&gt;redundantly&lt;/span&gt; send it up to 32 additional times, just in case one packet with the ack doesn&amp;rsquo;t get through!&lt;/p&gt;
&lt;p&gt;But how can we possibly fit 33 acks in a packet? At 4 bytes per-ack thats 132 bytes!&lt;/p&gt;
&lt;p&gt;The trick is to represent the 32 previous acks before &amp;ldquo;ack&amp;rdquo; using a bitfield:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    [uint protocol id]
    [uint sequence]
    [uint ack]
    [uint ack bitfield]
    &amp;lt;em&amp;gt;(packet data...)&amp;lt;/em&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We define &amp;ldquo;ack bitfield&amp;rdquo; such that each bit corresponds to acks of the 32 sequence numbers before &amp;ldquo;ack&amp;rdquo;. So let&amp;rsquo;s say &amp;ldquo;ack&amp;rdquo; is 100. If the first bit of &amp;ldquo;ack bitfield&amp;rdquo; is set, then the packet also includes an ack for packet 99. If the second bit is set, then packet 98 is acked. This goes all the way down to the 32nd bit for packet 68.&lt;/p&gt;
&lt;p&gt;Our adjusted algorithm looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each time we send a packet we increase the &lt;em&gt;local sequence number&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we receive a packet, we check the sequence number of the packet against the &lt;em&gt;remote sequence number&lt;/em&gt;. If the packet sequence is more recent, we update the remote sequence number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we compose packet headers, the local sequence becomes the sequence number of the packet, and the remote sequence becomes the ack. The ack bitfield is calculated by looking into a queue of up to 33 packets, containing sequence numbers in the range [remote sequence - 32, remote sequence]. We set bit n (in [1,32]) in ack bits to 1 if the sequence number remote sequence - n is in the received queue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additionally, when a packet is received, ack bitfield is scanned and if bit n is set, then we acknowledge sequence number packet sequence - n, if it has not been acked already.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this improved algorithm, you would have to lose 100% of packets for more than a second to stop an ack getting through. And of course, it easily handles different send rates and clumped up packet receives.&lt;/p&gt;
&lt;h2 id=&#34;detecting-lost-packets&#34;&gt;Detecting Lost Packets&lt;/h2&gt;
&lt;p&gt;Now that we know what packets are received by the other side of the connection, how do we detect packet loss?&lt;/p&gt;
&lt;p&gt;The trick here is to flip it around and say that if you don&amp;rsquo;t get an ack for a packet within a certain amount of time, then we consider that packet lost.&lt;/p&gt;
&lt;p&gt;Given that we are sending at no more than 30 packets per second, and we are redundantly sending acks roughly 30 times, if you don&amp;rsquo;t get an ack for a packet within one second, it is &lt;em&gt;very&lt;/em&gt; likely that packet was lost.&lt;/p&gt;
&lt;p&gt;So we are playing a bit of a trick here, while we can know 100% for sure which packets get through, but we can only be &lt;em&gt;reasonably&lt;/em&gt; certain of the set of packets that didn&amp;rsquo;t arrive.&lt;/p&gt;
&lt;p&gt;The implication of this is that any data which you resend using this reliability technique needs to have its own message id so that if you receive it multiple times, you can discard it. This can be done at the application level.&lt;/p&gt;
&lt;h2 id=&#34;handling-sequence-number-wrap-around&#34;&gt;Handling Sequence Number Wrap-Around&lt;/h2&gt;
&lt;p&gt;No discussion of sequence numbers and acks would be complete without coverage of sequence number wrap around!&lt;/p&gt;
&lt;p&gt;Sequence numbers and acks are 32 bit unsigned integers, so they can represent numbers in the range [0,4294967295]. Thats a very high number! So high that if you sent 30 packets per-second, it would take over four and a half years for the sequence number to wrap back around to zero.&lt;/p&gt;
&lt;p&gt;But perhaps you want to save some bandwidth so you shorten your sequence numbers and acks to 16 bit integers. You save 4 bytes per-packet, but now they wrap around in only half an hour.&lt;/p&gt;
&lt;p&gt;So how do we handle this wrap around case?&lt;/p&gt;
&lt;p&gt;The trick is to realize that if the current sequence number is already very high, and the next sequence number that comes in is very low, then you must have wrapped around. So even though the new sequence number is &lt;em&gt;numerically&lt;/em&gt; lower than the current sequence value, it actually represents a more recent packet.&lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s say we encoded sequence numbers in one byte (not recommended btw. :)), then they would wrap around after 255 like this:&lt;/p&gt;
&lt;pre&gt;    ... 252, 253, 254, 255, 0, 1, 2, 3, ...&lt;/pre&gt;
&lt;p&gt;To handle this case we need a new function that is aware of the fact that sequence numbers wrap around to zero after 255, so that 0, 1, 2, 3 are considered more recent than 255. Otherwise, our reliability system stops working after you receive packet 255.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a function for 16 bit sequence numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    inline bool sequence_greater_than( uint16_t s1, uint16_t s2 )
    {
        return ( ( s1 &amp;gt; s2 ) &amp;amp;&amp;amp; ( s1 - s2 &amp;lt;= 32768 ) ) || 
               ( ( s1 &amp;lt; s2 ) &amp;amp;&amp;amp; ( s2 - s1  &amp;gt; 32768 ) );
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function works by comparing the two numbers &lt;em&gt;and&lt;/em&gt; their difference. If their difference is less than 1/2 the maximum sequence number value, then they must be close together - so we just check if one is greater than the other, as usual. However, if they are far apart, their difference will be greater than 1/2 the max sequence, then we paradoxically consider the sequence number more recent if it is &lt;em&gt;less&lt;/em&gt; than the current sequence number.&lt;/p&gt;
&lt;p&gt;This last bit is what handles the wrap around of sequence numbers transparently, so 0,1,2 are considered more recent than 255.&lt;/p&gt;
&lt;p&gt;Make sure you include this in any sequence number processing you do.&lt;/p&gt;
&lt;h2 id=&#34;congestion-avoidance&#34;&gt;Congestion Avoidance&lt;/h2&gt;
&lt;p&gt;While we have solved reliability, there is still the question of congestion avoidance. TCP provides congestion avoidance as part of the packet when you get TCP reliability, but UDP has no congestion avoidance whatsoever!&lt;/p&gt;
&lt;p&gt;If we just send packets without some sort of flow control, we risk flooding the connection and inducing severe latency (2 seconds plus!) as routers between us and the other computer become congested and buffer up packets. This happens because routers try &lt;em&gt;very hard&lt;/em&gt; to deliver all the packets we send, and therefore tend to buffer up packets in a queue before they consider dropping them.&lt;/p&gt;
&lt;p&gt;While it would be nice if we could tell the routers that our packets are time sensitive and should be dropped instead of buffered if the router is overloaded, we can&amp;rsquo;t really do this without rewriting the software for all routers in the world.&lt;/p&gt;
&lt;p&gt;Instead, we need to focus on what we can actually do which is to avoid flooding the connection in the first place. We try to avoid sending too much bandwidth in the first place, and then if we detect congestion, we attempt to back off and send even less.&lt;/p&gt;
&lt;p&gt;The way to do this is to implement our own basic congestion avoidance algorithm. And I stress basic! Just like reliability, we have no hope of coming up with something as general and robust as TCP&amp;rsquo;s implementation on the first try, so let&amp;rsquo;s keep it as simple as possible.&lt;/p&gt;
&lt;h2 id=&#34;measuring-round-trip-time&#34;&gt;Measuring Round Trip Time&lt;/h2&gt;
&lt;p&gt;Since the whole point of congestion avoidance is to avoid flooding the connection and increasing round trip time (RTT), it makes sense that the most important metric as to whether or not we are flooding our connection is the RTT itself.&lt;/p&gt;
&lt;p&gt;We need a way to measure the RTT of our connection.&lt;/p&gt;
&lt;p&gt;Here is the basic technique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each packet we send, we add an entry to a queue containing the sequence number of the packet and the time it was sent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each time we receive an ack, we look up this entry and note the difference in local time between the time we receive the ack, and the time we sent the packet. This is the RTT time for that packet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the arrival of packets varies with network jitter, we need to smooth this value to provide something meaningful, so each time we obtain a new RTT we move a percentage of the distance between our current RTT and the packet RTT. 10% seems to work well for me in practice. This is called an exponentially smoothed moving average, and it has the effect of smoothing out noise in the RTT with a low pass filter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To ensure that the sent queue doesn&amp;rsquo;t grow forever, we discard packets once they have exceeded some maximum expected RTT. As discussed in the previous section on reliability, it is exceptionally likely that any packet not acked within a second was lost, so one second is a good value for this maximum RTT.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we have RTT, we can use it as a metric to drive our congestion avoidance. If RTT gets too large, we send data less frequently, if its within acceptable ranges, we can try sending data more frequently.&lt;/p&gt;
&lt;h2 id=&#34;simple-binary-congestion-avoidance&#34;&gt;Simple Binary Congestion Avoidance&lt;/h2&gt;
&lt;p&gt;As discussed before, let&amp;rsquo;s not get greedy, we&amp;rsquo;ll implement a very basic congestion avoidance. This congestion avoidance has two modes. Good and bad. I call it simple binary congestion avoidance.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume you send packets of a certain size, say 256 bytes. You would like to send these packets 30 times a second, but if conditions are bad, you can drop down to 10 times a second.&lt;/p&gt;
&lt;p&gt;So 256 byte packets 30 times a second is around 64kbits/sec, and 10 times a second is roughly 20kbit/sec. There isn&amp;rsquo;t a broadband network connection in the world that can&amp;rsquo;t handle at least 20kbit/sec, so we&amp;rsquo;ll move forward with this assumption. Unlike TCP which is entirely general for any device with any amount of send/recv bandwidth, we&amp;rsquo;re going to assume a minimum supported bandwidth for devices involved in our connections.&lt;/p&gt;
&lt;p&gt;So the basic idea is this. When network conditions are &amp;ldquo;good&amp;rdquo; we send 30 packets per-second, and when network conditions are &amp;ldquo;bad&amp;rdquo; we drop to 10 packets per-second.&lt;/p&gt;
&lt;p&gt;Of course, you can define &amp;ldquo;good&amp;rdquo; and &amp;ldquo;bad&amp;rdquo; however you like, but I&amp;rsquo;ve gotten good results considering only RTT. For example if RTT exceeds some threshold (say 250ms) then you know you are probably flooding the connection. Of course, this assumes that nobody would normally exceed 250ms under non-flooding conditions, which is reasonable given our broadband requirement.&lt;/p&gt;
&lt;p&gt;How do you switch between good and bad? The algorithm I like to use operates as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are currently in good mode, and conditions become bad, immediately drop to bad mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are in bad mode, and conditions have been good for a specific length of time &amp;rsquo;t&amp;rsquo;, then return to good mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To avoid rapid toggling between good and bad mode, if you drop from good mode to bad in under 10 seconds, double the amount of time &amp;rsquo;t&amp;rsquo; before bad mode goes back to good. Clamp this at some maximum, say 60 seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To avoid punishing good connections when they have short periods of bad behavior, for each 10 seconds the connection is in good mode, halve the time &amp;rsquo;t&amp;rsquo; before bad mode goes back to good. Clamp this at some minimum like 1 second.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this algorithm you will rapidly respond to bad conditions and drop your send rate to 10 packets per-second, avoiding flooding of the connection. You&amp;rsquo;ll also &lt;em&gt;conservatively&lt;/em&gt; try out good mode, and persist sending packets at a higher rate of 30 packets per-second, while network conditions are good.&lt;/p&gt;
&lt;p&gt;Of course, you can implement much more sophisticated algorithms. Packet loss % can be taken into account as a metric, even the amount of network jitter (time variance in packet acks), not just RTT.&lt;/p&gt;
&lt;p&gt;You can also get much more &lt;em&gt;greedy&lt;/em&gt; with congestion avoidance, and attempt to discover when you can send data at a much higher bandwidth (eg. LAN), but you have to be very careful! With increased greediness comes more risk that you&amp;rsquo;ll flood the connection.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Our new reliability system let&amp;rsquo;s us send a steady stream of packets and notifies us which packets are received. From this we can infer lost packets, and resend data that didn&amp;rsquo;t get through if necessary. We also have a simple congestion avoidance system that drops from 30 packets per-second to 10 times a second so we don&amp;rsquo;t flood the connection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/&#34;&gt;What Every Programmer Needs to Know About Game Networking&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Virtual Connection over UDP</title>
      <link>https://gafferongames.com/post/virtual_connection_over_udp/</link>
      <pubDate>Wed, 08 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/virtual_connection_over_udp/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;a href=&#34;https://gafferongames.com/categories/game-networking/&#34;&gt;&lt;strong&gt;Networking for Game Programmers&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/sending_and_receiving_packets/&#34;&gt;previous article&lt;/a&gt; we sent and received packets over UDP. Since UDP is connectionless, one UDP socket can be used to exchange packets with any number of different computers. In multiplayer games however, we usually only want to exchange packets between a small set of connected computers.&lt;/p&gt;
&lt;p&gt;As the first step towards a general connection system, we&amp;rsquo;ll start with the simplest case possible: creating a virtual connection between two computers on top of UDP.&lt;/p&gt;
&lt;p&gt;But first, we&amp;rsquo;re going to dig in a bit deeper about how the Internet really works!&lt;/p&gt;
&lt;h2 id=&#34;the-internet-unotu-a-series-of-tubes&#34;&gt;The Internet &lt;u&gt;NOT&lt;/u&gt; a series of tubes&lt;/h2&gt;
&lt;p&gt;In 2006, Senator Ted Stevens made internet history with his &lt;a href=&#34;http://en.wikipedia.org/wiki/Series_of_tubes&#34;&gt;famous speech&lt;/a&gt; on the net neutrality act:&lt;/p&gt;
&lt;blockquote&gt;&#34;The internet is not something that you just dump something on. It&#39;s not a big truck. It&#39;s a series of tubes&#34;&lt;/blockquote&gt;
&lt;p&gt;When I first started using the Internet, I was just like Ted. Sitting in the computer lab in University of Sydney in 1995, I was &amp;ldquo;surfing the web&amp;rdquo; with this new thing called Netscape Navigator, and I had absolutely no idea what was going on.&lt;/p&gt;
&lt;p&gt;You see, I thought each time you connected to a website there was some actual connection going on,  like a telephone line. I wondered, how much does it cost each time I connect to a new website? 30 cents? A dollar? Was somebody from the university going to tap me on the shoulder and ask me to pay the long distance charges? :)&lt;/p&gt;
&lt;p&gt;Of course, this all seems silly now.&lt;/p&gt;
&lt;p&gt;There is no switchboard somewhere that directly connects you via a physical phone line to the other computer you want to talk to, let alone a series of pneumatic tubes like Sen. Stevens would have you believe.&lt;/p&gt;
&lt;h2 id=&#34;no-direct-connections&#34;&gt;No Direct Connections&lt;/h2&gt;
&lt;p&gt;Instead your data is sent over Internet Protocol (IP) via packets that hop from computer to computer.&lt;/p&gt;
&lt;p&gt;A packet may pass through several computers before it reaches its destination. You cannot know the exact set of computers in advance, as it changes dynamically depending on how the network decides to route packets. You could even send two packets A and B to the same address, and they may take different routes.&lt;/p&gt;
&lt;p&gt;On unix-like systems can inspect the route that packets take by calling &amp;ldquo;traceroute&amp;rdquo; and passing in a destination hostname or IP address.&lt;/p&gt;
&lt;p&gt;On windows, replace &amp;ldquo;traceroute&amp;rdquo; with &amp;ldquo;tracert&amp;rdquo; to get it to work.&lt;/p&gt;
&lt;p&gt;Try it with a few websites like this:&lt;/p&gt;
&lt;pre&gt;
    traceroute slashdot.org
    traceroute amazon.com
    traceroute google.com
    traceroute bbc.co.uk
    traceroute news.com.au
&lt;/pre&gt;
&lt;p&gt;Take a look and you should be able to convince yourself pretty quickly that there is no direct connection.&lt;/p&gt;
&lt;h2 id=&#34;how-packets-get-delivered&#34;&gt;How Packets Get Delivered&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/udp_vs_tcp/&#34;&gt;first article&lt;/a&gt;, I presented a simple analogy for packet delivery, describing it as somewhat like a note being passed from person to person across a crowded room.&lt;/p&gt;
&lt;p&gt;While this analogy gets the basic idea across, it is much too simple. The Internet is &lt;u&gt;not&lt;/u&gt; a flat network of computers, it is a network of networks. And of course, we don&amp;rsquo;t just need to pass letters around a small room, we need to be able to send them anywhere in the world.&lt;/p&gt;
&lt;p&gt;It should be pretty clear then that the best analogy is the postal service!&lt;/p&gt;
&lt;p&gt;When you want to send a letter to somebody you put your letter in the mailbox and you trust that it will be delivered correctly. It&amp;rsquo;s not really relevant to you &lt;i&gt;how&lt;/i&gt; it gets there, as long as it does. Somebody has to physically deliver your letter to its destination of course, so how is this done?&lt;/p&gt;
&lt;p&gt;Well first off, the postman sure as hell doesn&amp;rsquo;t take your letter and deliver it personally! It seems that the postal service is not a series of tubes either. Instead, the postman takes your letter to the local post office for processing.&lt;/p&gt;
&lt;p&gt;If the letter is addressed locally then the post office just sends it back out, and another postman delivers it directly. But, if the address is is non-local then it gets interesting! The local post office is not able to deliver the letter directly, so it passes it &amp;ldquo;up&amp;rdquo; to the next level of hierarchy, perhaps to a regional post office which services cities nearby, or maybe to a mail center at an airport, if the address is far away. Ideally, the actual transport of the letter would be done using a &lt;u&gt;big truck&lt;/u&gt;.&lt;/p&gt;
&lt;p&gt;Lets be complicated and assume the letter is sent from Los Angeles to Sydney, Australia. The local post office receives the letter and given that it is addressed internationally, sends it directly to a mail center at LAX. The letter is processed again according to address, and gets routed on the next flight to Sydney.&lt;/p&gt;
&lt;p&gt;The plane lands at Sydney airport where an &lt;i&gt;entirely different postal system&lt;/i&gt; takes over. Now the whole process starts operating in reverse. The letter travels &amp;ldquo;down&amp;rdquo; the hierarchy, from the general, to the specific. From the mail hub at Sydney Airport it gets sent out to a regional center, the regional center delivers it to the local post office, and eventually the letter is hand delivered by a mailman with a funny accent. Crikey! :)&lt;/p&gt;
&lt;p&gt;Just like post offices determine how to deliver letters via their address, networks deliver packets according to their IP address. The low-level details of this delivery and the actual routing of packets from network to network is actually quite complex, but the basic idea is that each router is just another computer, with a routing table describing where packets matching sets of addresses should go, as well as a default gateway address describing where to pass packets for which there is no matching entry in the table. It is routing tables, and the physical connections they represent that define the network of networks that is the Internet.&lt;/p&gt;
&lt;p&gt;The job of configuring these routing tables is up to network administrators, not programmers like us. But if you want to read more about it, then this article from &lt;a href=&#34;http://arstechnica.com/guides/other/peering-and-transit.ars&#34;&gt;ars technica&lt;/a&gt; provides some  fascinating insight into how networks exchange packets between each other via peering and transit relationships. You can also read more details about &lt;a href=&#34;http://www.faqs.org/docs/linux_network/x-087-2-issues.routing.html&#34;&gt;routing tables&lt;/a&gt; in this linux faq, and about the &lt;a href=&#34;http://en.wikipedia.org/wiki/Border_Gateway_Protocol&#34;&gt;border gateway protocol&lt;/a&gt; on wikipedia, which automatically discovers how to route packets between networks, making the internet a truly distributed system capable of dynamically routing around broken connectivity.&lt;/p&gt;
&lt;h2 id=&#34;virtual-connections&#34;&gt;Virtual Connections&lt;/h2&gt;
&lt;p&gt;Now back to connections.&lt;/p&gt;
&lt;p&gt;If you have used TCP sockets then you know that they sure &lt;i&gt;look&lt;/i&gt; like a connection, but since TCP is implemented on top of IP, and IP is just packets hopping from computer to computer, it follows that TCP&amp;rsquo;s concept of connection must be a &lt;i&gt;virtual connection.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;If TCP can create a virtual connection over IP, it follows that we can do the same over UDP.&lt;/p&gt;
&lt;p&gt;Lets define our virtual connection as two computers exchanging UDP packets at some fixed rate like 10 packets per-second. As long as the packets are flowing, we consider the two computers to be virtually connected.&lt;/p&gt;
&lt;p&gt;Our connection has two sides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One computer sits there and &lt;i&gt;listens&lt;/i&gt; for another computer to connect to it. We&#39;ll call this computer the &lt;u&gt;server&lt;/u&gt;.&lt;/li&gt;
&lt;li&gt;Another computer &lt;i&gt;connects&lt;/i&gt; to a server by specifying an IP address and port. We&#39;ll call this computer the &lt;u&gt;client&lt;/u&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our case, we only allow one client to connect to the server at any time. We&amp;rsquo;ll generalize our connection system to support multiple simultaneous connections in a later article. Also, we assume that the IP address of the server is on a fixed IP address that the client may directly connect to.&lt;/p&gt;
&lt;h2 id=&#34;protocol-id&#34;&gt;Protocol ID&lt;/h2&gt;
&lt;p&gt;Since UDP is connectionless our UDP socket can receive packets sent from any computer.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;d like to narrow this down so that the server only receives packets sent from the client, and the client only receives packets sent from the server. We can&amp;rsquo;t just filter out packets by address, because the server doesn&amp;rsquo;t know the address of the client in advance. So instead, we prefix each UDP packet with small header containing a 32 bit protocol id as follows:&lt;/p&gt;
&lt;pre&gt;
    [uint protocol id]
    &lt;i&gt;(packet data...)&lt;/i&gt;
&lt;/pre&gt;
&lt;p&gt;The protocol id is just some unique number representing our game protocol. Any packet that arrives from our UDP socket first has its first four bytes inspected. If they don&amp;rsquo;t match our protocol id, then the packet is ignored. If the protocol id does match, we strip out the first four bytes of the packet and deliver the rest as payload.&lt;/p&gt;
&lt;p&gt;You just choose some number that is reasonably unique, perhaps a hash of the name of your game and the protocol version number. But really you can use anything. The whole point is that from the point of view of our connection based protocol, packets with different protocol ids are ignored.&lt;/p&gt;
&lt;h2 id=&#34;detecting-connection&#34;&gt;Detecting Connection&lt;/h2&gt;
&lt;p&gt;Now we need a way to detect connection.&lt;/p&gt;
&lt;p&gt;Sure we could do some complex handshaking involving multiple UDP packets sent back and forth. Perhaps a client &amp;ldquo;request connection&amp;rdquo; packet is sent to the server, to which the server responds with a &amp;ldquo;connection accepted&amp;rdquo; sent back to the client, or maybe an &amp;ldquo;i&amp;rsquo;m busy&amp;rdquo; packet if a client tries to connect to server which already has a connected client.&lt;/p&gt;
&lt;p&gt;Or&amp;hellip; we could just setup our server to take the first packet it receives with the correct protocol id, and consider a connection to be established.&lt;/p&gt;
&lt;p&gt;The client just starts sending packets to the server assuming connection, when the server receives the first packet from the client, it takes note of the IP address and port of the client, and starts sending packets back.&lt;/p&gt;
&lt;p&gt;The client already knows the address and port of the server, since it was specified on connect. So when the client receives packets, it filters out any that don&amp;rsquo;t come from the server address. Similarly, once the server receives the first packet from the client, it gets the address and port of the client from &amp;ldquo;recvfrom&amp;rdquo;, so it is able to ignore any packets that don&amp;rsquo;t come from the client address.&lt;/p&gt;
&lt;p&gt;We can get away with this shortcut because we only have two computers involved in the connection. In later articles, we&amp;rsquo;ll extend our connection system to support more than two computers in a client/server or peer-to-peer topology, and at this point we&amp;rsquo;ll upgrade our connection negotiation to something more robust.&lt;/p&gt;
&lt;p&gt;But for now, why make things more complicated than they need to be?&lt;/p&gt;
&lt;h2 id=&#34;detecting-disconnection&#34;&gt;Detecting Disconnection&lt;/h2&gt;
&lt;p&gt;How do we detect disconnection?&lt;/p&gt;
&lt;p&gt;Well if a connection is defined as receiving packets, we can define disconnection as &lt;i&gt;not&lt;/i&gt; receiving packets.&lt;/p&gt;
&lt;p&gt;To detect when we are not receiving packets, we keep track of the number of seconds since we last received a packet from the other side of the connection. We do this on both sides.&lt;/p&gt;
&lt;p&gt;Each time we receive a packet from the other side, we reset our accumulator to 0.0, each update we increase the accumulator by the amount of time that has passed.&lt;/p&gt;
&lt;p&gt;If this accumulator exceeds some value like 10 seconds, the connection &amp;ldquo;times out&amp;rdquo; and we disconnect.&lt;/p&gt;
&lt;p&gt;This also gracefully handles the case of a second client trying to connect to a server that has already made a connection with another client. Since the server is already connected it ignores packets coming from any address other than the connected client, so the second client receives no packets in response to the packets it sends, so the second client times out and disconnects.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s all it takes to setup a virtual connection: some way to establish connection, filtering for packets not involved in the connection, and timeouts to detect disconnection.&lt;/p&gt;
&lt;p&gt;Our connection is as real as any TCP connection, and the steady stream of UDP packets it provides is a suitable starting point for a multiplayer action game.&lt;/p&gt;
&lt;p&gt;Now that you have your virtual connection over UDP, you can easily setup a client/server relationship for a two player multiplayer game without TCP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/reliability_ordering_and_congestion_avoidance_over_udp/&#34;&gt;Reliability and Congestion Avoidance over UDP&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Sending and Receiving Packets</title>
      <link>https://gafferongames.com/post/sending_and_receiving_packets/</link>
      <pubDate>Fri, 03 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/sending_and_receiving_packets/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;a href=&#34;https://gafferongames.com/categories/game-networking/&#34;&gt;&lt;strong&gt;Networking for Game Programmers&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/udp_vs_tcp/&#34;&gt;previous article&lt;/a&gt; we discussed options for sending data between computers and decided to use UDP instead of TCP for time critical data.&lt;/p&gt;
&lt;p&gt;In this article I am going to show you how to send and receive UDP packets.&lt;/p&gt;
&lt;h2 id=&#34;bsd-sockets&#34;&gt;BSD sockets&lt;/h2&gt;
&lt;p&gt;For most modern platforms you have some sort of basic socket layer available based on BSD sockets.&lt;/p&gt;
&lt;p&gt;BSD sockets are manipulated using simple functions like &amp;ldquo;socket&amp;rdquo;, &amp;ldquo;bind&amp;rdquo;, &amp;ldquo;sendto&amp;rdquo; and &amp;ldquo;recvfrom&amp;rdquo;. You can of course work directly with these functions if you wish, but it becomes difficult to keep your code platform independent because each platform is slightly different.&lt;/p&gt;
&lt;p&gt;So although I will first show you BSD socket example code to demonstrate basic socket usage, we won&amp;rsquo;t be using BSD sockets directly for long. Once we&amp;rsquo;ve covered all basic socket functionality we&amp;rsquo;ll abstract everything away into a set of classes, making it easy to you to write platform independent socket code.&lt;/p&gt;
&lt;h2 id=&#34;platform-specifics&#34;&gt;Platform specifics&lt;/h2&gt;
&lt;p&gt;First let&amp;rsquo;s setup a define so we can detect what our current platform is and handle the slight differences in sockets from one platform to another:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // platform detection

    #define PLATFORM_WINDOWS  1
    #define PLATFORM_MAC      2
    #define PLATFORM_UNIX     3

    #if defined(_WIN32)
    #define PLATFORM PLATFORM_WINDOWS
    #elif defined(__APPLE__)
    #define PLATFORM PLATFORM_MAC
    #else
    #define PLATFORM PLATFORM_UNIX
    #endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s include the appropriate headers for sockets. Since the header files are platform specific, we&amp;rsquo;ll use the platform #define to include different sets of files depending on the platform:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #if PLATFORM == PLATFORM_WINDOWS

        #include &amp;lt;winsock2.h&amp;gt;

    #elif PLATFORM == PLATFORM_MAC || 
          PLATFORM == PLATFORM_UNIX

        #include &amp;lt;sys/socket.h&amp;gt;
        #include &amp;lt;netinet/in.h&amp;gt;
        #include &amp;lt;fcntl.h&amp;gt;

    #endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sockets are built in to the standard system libraries on unix-based platforms so we don&amp;rsquo;t have to link to any additonal libraries. However, on Windows we need to link to the winsock library to get socket functionality.&lt;/p&gt;
&lt;p&gt;Here is a simple trick to do this without having to change your project or makefile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #if PLATFORM == PLATFORM_WINDOWS
    #pragma comment( lib, &amp;quot;wsock32.lib&amp;quot; )
    #endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like this trick because I&amp;rsquo;m super lazy. You can always link from your project or makefile if you wish.&lt;/p&gt;
&lt;h2 id=&#34;initializing-the-socket-layer&#34;&gt;Initializing the socket layer&lt;/h2&gt;
&lt;p&gt;Most unix-like platforms (including macosx) don&amp;rsquo;t require any specific steps to initialize the sockets layer, however Windows requires that you jump through some hoops to get your socket code working.&lt;/p&gt;
&lt;p&gt;You must call &amp;ldquo;WSAStartup&amp;rdquo; to initialize the sockets layer before you call any socket functions, and &amp;ldquo;WSACleanup&amp;rdquo; to shutdown when you are done.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add two new functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    bool InitializeSockets()
    {
        #if PLATFORM == PLATFORM_WINDOWS
        WSADATA WsaData;
        return WSAStartup( MAKEWORD(2,2), 
                           &amp;amp;WsaData ) 
            == NO_ERROR;
        #else
        return true;
        #endif
    }

    void ShutdownSockets()
    {
        #if PLATFORM == PLATFORM_WINDOWS
        WSACleanup();
        #endif
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a platform independent way to initialize the socket layer.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-socket&#34;&gt;Creating a socket&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s time to create a UDP socket, here&amp;rsquo;s how to do it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    int handle = socket( AF_INET, 
                         SOCK_DGRAM, 
                         IPPROTO_UDP );

    if ( handle &amp;lt;= 0 )
    {
        printf( &amp;quot;failed to create socket\n&amp;quot; );
        return false;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we bind the UDP socket to a port number (eg. 30000). Each socket must be bound to a unique port, because when a packet arrives the port number determines which socket to deliver to. Don&amp;rsquo;t use ports lower than 1024 because they are reserved for the system. Also try to avoid using ports above 50000 because they used when dynamically assigning ports.&lt;/p&gt;
&lt;p&gt;Special case: if you don&amp;rsquo;t care what port your socket gets bound to just pass in &amp;ldquo;0&amp;rdquo; as your port, and the system will select a free port for you.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    sockaddr_in address;
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = 
        htons( (unsigned short) port );

    if ( bind( handle, 
               (const sockaddr*) &amp;amp;address, 
               sizeof(sockaddr_in) ) &amp;lt; 0 )
    {
        printf( &amp;quot;failed to bind socket\n&amp;quot; );
        return false;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the socket is ready to send and receive packets.&lt;/p&gt;
&lt;p&gt;But what is this mysterious call to &amp;ldquo;htons&amp;rdquo; in the code above? This is just a helper function that converts a 16 bit integer value from host byte order (little or big-endian) to network byte order (big-endian). This is required whenever you directly set integer members in socket structures.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see &amp;ldquo;htons&amp;rdquo; (host to network short) and its 32 bit integer sized cousin &amp;ldquo;htonl&amp;rdquo; (host to network long) used several times throughout this article, so keep an eye out, and you&amp;rsquo;ll know what is going on.&lt;/p&gt;
&lt;h2 id=&#34;setting-the-socket-as-non-blocking&#34;&gt;Setting the socket as non-blocking&lt;/h2&gt;
&lt;p&gt;By default sockets are set in what is called &amp;ldquo;blocking mode&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This means that if you try to read a packet using &amp;ldquo;recvfrom&amp;rdquo;, the function will not return until a packet is available to read. This is not at all suitable for our purposes. Video games are realtime programs that simulate at 30 or 60 frames per second, they can&amp;rsquo;t just sit there waiting for a packet to arrive!&lt;/p&gt;
&lt;p&gt;The solution is to flip your sockets into &amp;ldquo;non-blocking mode&amp;rdquo; after you create them. Once this is done, the &amp;ldquo;recvfrom&amp;rdquo; function returns immediately when no packets are available to read, with a return value indicating that you should try to read packets again later.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how put a socket in non-blocking mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    #if PLATFORM == PLATFORM_MAC || 
        PLATFORM == PLATFORM_UNIX

        int nonBlocking = 1;
        if ( fcntl( handle, 
                    F_SETFL, 
                    O_NONBLOCK, 
                    nonBlocking ) == -1 )
        {
            printf( &amp;quot;failed to set non-blocking\n&amp;quot; );
            return false;
        }

    #elif PLATFORM == PLATFORM_WINDOWS

        DWORD nonBlocking = 1;
        if ( ioctlsocket( handle, 
                          FIONBIO, 
                          &amp;amp;nonBlocking ) != 0 )
        {
            printf( &amp;quot;failed to set non-blocking\n&amp;quot; );
            return false;
        }

    #endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Windows does not provide the &amp;ldquo;fcntl&amp;rdquo; function, so we use the &amp;ldquo;ioctlsocket&amp;rdquo; function instead.&lt;/p&gt;
&lt;h2 id=&#34;sending-packets&#34;&gt;Sending packets&lt;/h2&gt;
&lt;p&gt;UDP is a connectionless protocol, so each time you send a packet you must specify the destination address. This means you can use one UDP socket to send packets to any number of different IP addresses, there&amp;rsquo;s no single computer at the other end of your UDP socket that you are connected to.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how to send a packet to a specific address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    int sent_bytes = 
        sendto( handle, 
                (const char*)packet_data, 
                packet_size,
                0, 
                (sockaddr*)&amp;amp;address, 
                sizeof(sockaddr_in) );

    if ( sent_bytes != packet_size )
    {
        printf( &amp;quot;failed to send packet\n&amp;quot; );
        return false;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Important! The return value from &amp;ldquo;sendto&amp;rdquo; only indicates if the packet was successfully sent from the local computer. It does &lt;em&gt;not&lt;/em&gt; tell you whether or not the packet was received by the destination computer. UDP has no way of knowing whether or not the the packet arrived at its destination!&lt;/p&gt;
&lt;p&gt;In the code above we pass a &amp;ldquo;sockaddr_in&amp;rdquo; structure as the destination address. How do we setup one of these structures?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we want to send to the address 207.45.186.98:30000&lt;/p&gt;
&lt;p&gt;Starting with our address in this form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    unsigned int a = 207;
    unsigned int b = 45;
    unsigned int c = 186;
    unsigned int d = 98;
    unsigned short port = 30000;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a bit of work to do to get it in the form required by &amp;ldquo;sendto&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    unsigned int address = ( a &amp;lt;&amp;lt; 24 ) | 
                           ( b &amp;lt;&amp;lt; 16 ) | 
                           ( c &amp;lt;&amp;lt; 8  ) | 
                             d;

    sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = htonl( address );
    addr.sin_port = htons( port );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we first combine the a,b,c,d values in range [0,255] into a single unsigned integer, with each byte of the integer now corresponding to the input values. We then initialize a &amp;ldquo;sockaddr_in&amp;rdquo; structure with the integer address and port, making sure to convert our integer address and port values from host byte order to network byte order using &amp;ldquo;htonl&amp;rdquo; and &amp;ldquo;htons&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Special case: if you want to send a packet to yourself, there&amp;rsquo;s no need to query the IP address of your own machine, just pass in the loopback address 127.0.0.1 and the packet will be sent to your local machine.&lt;/p&gt;
&lt;h2 id=&#34;receiving-packets&#34;&gt;Receiving packets&lt;/h2&gt;
&lt;p&gt;Once you have a UDP socket bound to a port, any UDP packets sent to your sockets IP address and port are placed in a queue. To receive packets just loop and call &amp;ldquo;recvfrom&amp;rdquo; until it fails with EWOULDBLOCK indicating there are no more packets to receive.&lt;/p&gt;
&lt;p&gt;Since UDP is connectionless, packets may arrive from any number of different computers. Each time you receive a packet &amp;ldquo;recvfrom&amp;rdquo; gives you the IP address and port of the sender, so you know where the packet came from.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how to loop and receive all incoming packets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    while ( true )
    {
        unsigned char packet_data[256];

        unsigned int max_packet_size = 
            sizeof( packet_data );

        #if PLATFORM == PLATFORM_WINDOWS
        typedef int socklen_t;
        #endif

        sockaddr_in from;
        socklen_t fromLength = sizeof( from );

        int bytes = recvfrom( socket, 
                              (char*)packet_data, 
                              max_packet_size,
                              0, 
                              (sockaddr*)&amp;amp;from, 
                              &amp;amp;fromLength );

        if ( bytes &amp;lt;= 0 )
            break;

        unsigned int from_address = 
            ntohl( from.sin_addr.s_addr );

        unsigned int from_port = 
            ntohs( from.sin_port );

        // process received packet
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any packets in the queue larger than your receive buffer will be silently discarded. So if you have a 256 byte buffer to receive packets like the code above, and somebody sends you a 300 byte packet, the 300 byte packet will be dropped. You &lt;em&gt;will not&lt;/em&gt; receive just the first 256 bytes of the 300 byte packet.&lt;/p&gt;
&lt;p&gt;Since you are writing your own game network protocol, this is no problem at all in practice, just make sure your receive buffer is big enough to receive the largest packet your code could possibly send.&lt;/p&gt;
&lt;h2 id=&#34;destroying-a-socket&#34;&gt;Destroying a socket&lt;/h2&gt;
&lt;p&gt;On most unix-like platforms, sockets are file handles so you use the standard file &amp;ldquo;close&amp;rdquo; function to clean up sockets once you are finished with them. However, Windows likes to be a little bit different, so we have to use &amp;ldquo;closesocket&amp;rdquo; instead:&lt;/p&gt;
&lt;pre&gt;#if PLATFORM == PLATFORM_MAC || 
    PLATFORM == PLATFORM_UNIX
close( socket );
#elif PLATFORM == PLATFORM_WINDOWS
closesocket( socket );
#endif&lt;/pre&gt;
&lt;p&gt;Hooray windows.&lt;/p&gt;
&lt;h2 id=&#34;socket-class&#34;&gt;Socket class&lt;/h2&gt;
&lt;p&gt;So we&amp;rsquo;ve covered all the basic operations: creating a socket, binding it to a port, setting it to non-blocking, sending and receiving packets, and destroying the socket.&lt;/p&gt;
&lt;p&gt;But you&amp;rsquo;ll notice most of these operations are slightly platform dependent, and it&amp;rsquo;s pretty annoying to have to remember to #ifdef and do platform specifics each time you want to perform socket operations.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to solve this by wrapping all our socket functionality up into a &amp;ldquo;Socket&amp;rdquo; class. While we&amp;rsquo;re at it, we&amp;rsquo;ll add an &amp;ldquo;Address&amp;rdquo; class to make it easier to specify internet addresses. This avoids having to manually encode or decode a &amp;ldquo;sockaddr_in&amp;rdquo; structure each time we send or receive packets.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s add a socket class:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    class Socket
    {
    public:

        Socket();
        
        ~Socket();
        
        bool Open( unsigned short port );
        
        void Close();
        
        bool IsOpen() const;
        
        bool Send( const Address &amp;amp; destination, 
                   const void * data, 
                   int size );
        
        int Receive( Address &amp;amp; sender, 
                     void * data, 
                     int size );

    private:

        int handle;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and an address class:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    class Address
    {
    public:

        Address();

        Address( unsigned char a, 
                 unsigned char b, 
                 unsigned char c, 
                 unsigned char d, 
                 unsigned short port );

        Address( unsigned int address, 
                 unsigned short port );

        unsigned int GetAddress() const;

        unsigned char GetA() const;
        unsigned char GetB() const;
        unsigned char GetC() const;
        unsigned char GetD() const;

        unsigned short GetPort() const;

    private:

        unsigned int address;
        unsigned short port;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s how to to send and receive packets with these classes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // create socket

    const int port = 30000;

    Socket socket;

    if ( !socket.Open( port ) )
    {
        printf( &amp;quot;failed to create socket!\n&amp;quot; );
        return false;
    }

    // send a packet

    const char data[] = &amp;quot;hello world!&amp;quot;;

    socket.Send( Address(127,0,0,1,port), data, sizeof( data ) );

    // receive packets

    while ( true )
    {
        Address sender;
        unsigned char buffer[256];
        int bytes_read = 
            socket.Receive( sender, 
                            buffer, 
                            sizeof( buffer ) );
        if ( !bytes_read )
            break;
     
        // process packet
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see it&amp;rsquo;s much simpler than using BSD sockets directly.&lt;/p&gt;
&lt;p&gt;As an added bonus the code is the same on all platforms because everything platform specific is handled inside the socket and address classes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You now have a platform independent way to send and receive packets. &lt;em&gt;Enjoy&lt;/em&gt; :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/virtual_connection_over_udp/&#34;&gt;Virtual Connection over UDP&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>UDP vs. TCP</title>
      <link>https://gafferongames.com/post/udp_vs_tcp/</link>
      <pubDate>Wed, 01 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/udp_vs_tcp/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;a href=&#34;https://gafferongames.com/categories/game-networking/&#34;&gt;&lt;strong&gt;Networking for Game Programmers&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this article we start with the most basic aspect of network programming: sending and receiving data over the network. This is perhaps the simplest and most basic part of what network programmers do, but still it is quite intricate and non-obvious as to what the best course of action is.&lt;/p&gt;
&lt;p&gt;You have most likely heard of sockets, and are probably aware that there are two main types: TCP and UDP. When writing a network game, we first need to choose what type of socket to use. Do we use TCP sockets, UDP sockets or a mixture of both? Take care because if you get this wrong it will have terrible effects on your multiplayer game!&lt;/p&gt;
&lt;p&gt;The choice you make depends entirely on what sort of game you want to network. So from this point on and for the rest of this article series, I assume you want to network an action game. You know, games like Halo, Battlefield 1942, Quake, Unreal, CounterStrike and Team Fortress.&lt;/p&gt;
&lt;p&gt;In light of the fact that we want to network an action game, we&amp;rsquo;ll take a very close look at the properties of each protocol, and dig a bit into how the internet actually works. Once we have all this information, the correct choice is clear.&lt;/p&gt;
&lt;h2 id=&#34;tcpip&#34;&gt;TCP/IP&lt;/h2&gt;
&lt;p&gt;TCP stands for &amp;ldquo;transmission control protocol&amp;rdquo;. IP stands for &amp;ldquo;internet protocol&amp;rdquo;. Together they form the backbone for almost everything you do online, from web browsing to IRC to email, it&amp;rsquo;s all built on top of TCP/IP.&lt;/p&gt;
&lt;p&gt;If you have ever used a TCP socket, then you know it&amp;rsquo;s a reliable connection based protocol. This means you create a connection between two machines, then you exchange data much like you&amp;rsquo;re writing to a file on one side, and reading from a file on the other.&lt;/p&gt;
&lt;p&gt;TCP connections are reliable and ordered. All data you send is guaranteed to arrive at the other side and in the order you wrote it. It&amp;rsquo;s also a stream protocol, so TCP automatically splits your data into packets and sends them over the network for you.&lt;/p&gt;
&lt;h2 id=&#34;ip&#34;&gt;IP&lt;/h2&gt;
&lt;p&gt;The simplicity of TCP is in stark contrast to what actually goes on underneath TCP at the IP or &amp;ldquo;internet protocol&amp;rdquo; level.&lt;/p&gt;
&lt;p&gt;Here there is no concept of connection, packets are simply passed from one computer to the next. You can visualize this process being somewhat like a hand-written note passed from one person to the next across a crowded room, eventually, reaching the person it&amp;rsquo;s addressed to, but only after passing through many hands.&lt;/p&gt;
&lt;p&gt;There is also no guarantee that this note will actually reach the person it is intended for. The sender just passes the note along and hopes for the best, never knowing whether or not the note was received, unless the other person decides to write back!&lt;/p&gt;
&lt;p&gt;Of course IP is in reality a little more complicated than this, since no one computer knows the exact sequence of computers to pass the packet along to so that it reaches its destination quickly. Sometimes IP passes along multiple copies of the same packet and these packets make their way to the destination via different paths, causing packets to arrive out of order and in duplicate.&lt;/p&gt;
&lt;p&gt;This is because the internet is designed to be self-organizing and self-repairing, able to route around connectivity problems rather than relying on direct connections between computers. It&amp;rsquo;s actually quite cool if you think about what&amp;rsquo;s &lt;em&gt;really&lt;/em&gt; going on at the low level. You can read all about this in the classic book &lt;a href=&#34;http://www.cs.newpaltz.edu/~pletcha/NET_PY/the-protocols-tcp-ip-illustrated-volume-1.9780201633467.24290.pdf&#34;&gt;TCP/IP Illustrated&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;udp&#34;&gt;UDP&lt;/h2&gt;
&lt;p&gt;Instead of treating communications between computers like writing to files, what if we want to send and receive packets directly?&lt;/p&gt;
&lt;p&gt;We can do this using UDP.&lt;/p&gt;
&lt;p&gt;UDP stands for &amp;ldquo;user datagram protocol&amp;rdquo; and it&amp;rsquo;s another protocol built on top of IP, but unlike TCP, instead of adding lots of features and complexity, UDP is a very thin layer over IP.&lt;/p&gt;
&lt;p&gt;With UDP we can send a packet to a destination IP address (eg. 112.140.20.10) and port (say 52423), and it gets passed from computer to computer until it arrives at the destination or is lost along the way.&lt;/p&gt;
&lt;p&gt;On the receiver side, we just sit there listening on a specific port (eg. 52423) and when a packet arrives from &lt;em&gt;any&lt;/em&gt; computer (remember there are no connections!), we get notified of the address and port of the computer that sent the packet, the size of the packet, and can read the packet data.&lt;/p&gt;
&lt;p&gt;Like IP, UDP is an unreliable protocol. In practice however, most packets that are sent &lt;em&gt;will&lt;/em&gt; get through, but you&amp;rsquo;ll usually have around 1-5% packet loss, and occasionally you&amp;rsquo;ll get periods where no packets get through at all (remember there are lots of computers between you and your destination where things can go wrong&amp;hellip;)&lt;/p&gt;
&lt;p&gt;There is also no guarantee of ordering of packets with UDP. You could send 5 packets in order 1,2,3,4,5 and they could arrive completely out of order like 3,1,2,5,4. In practice, packets tend to arrive in order &lt;em&gt;most&lt;/em&gt; of the time, but you cannot rely on this!&lt;/p&gt;
&lt;p&gt;UDP also provides a 16 bit checksum, which in theory is meant to protect you from receiving invalid or truncated data, but you can&amp;rsquo;t even trust this, since 16 bits is just not enough protection when you are sending UDP packets rapidly over a long period of time. Statistically, you can&amp;rsquo;t even rely on this checksum and must add your own.&lt;/p&gt;
&lt;p&gt;So in short, when you use UDP you&amp;rsquo;re pretty much on your own!&lt;/p&gt;
&lt;h2 id=&#34;tcp-vs-udp&#34;&gt;TCP vs. UDP&lt;/h2&gt;
&lt;p&gt;We have a decision to make here, do we use TCP sockets or UDP sockets?&lt;/p&gt;
&lt;p&gt;Lets look at the properties of each:&lt;/p&gt;
&lt;p&gt;TCP:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Connection based&lt;/li&gt;
    &lt;li&gt;Guaranteed reliable and ordered&lt;/li&gt;
    &lt;li&gt;Automatically breaks up your data into packets for you&lt;/li&gt;
    &lt;li&gt;Makes sure it doesn&#39;t send data too fast for the internet connection to handle (flow control)&lt;/li&gt;
    &lt;li&gt;Easy to use, you just read and write data like its a file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UDP:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;No concept of connection, you have to code this yourself&lt;/li&gt;
    &lt;li&gt;No guarantee of reliability or ordering of packets, they may arrive out of order, be duplicated, or not arrive at all!&lt;/li&gt;
    &lt;li&gt;You have to manually break your data up into packets and send them&lt;/li&gt;
    &lt;li&gt;You have to make sure you don&#39;t send data too fast for your internet connection to handle&lt;/li&gt;
    &lt;li&gt;If a packet is lost, you need to devise some way to detect this, and resend that data if necessary&lt;/li&gt;
    &lt;li&gt;You can&#39;t even rely on the UDP checksum so you must add your own&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The decision seems pretty clear then, TCP does everything we want and its super easy to use, while UDP is a huge pain in the ass and we have to code everything ourselves from scratch.&lt;/p&gt;
&lt;p&gt;So obviously we just use TCP right?&lt;/p&gt;
&lt;p&gt;Wrong!&lt;/p&gt;
&lt;p&gt;Using TCP is the worst possible mistake you can make when developing a multiplayer game! To understand why, you need to see what TCP is actually doing above IP to make everything look so simple.&lt;/p&gt;
&lt;h2 id=&#34;how-tcp-really-works&#34;&gt;How TCP really works&lt;/h2&gt;
&lt;p&gt;TCP and UDP are both built on top of IP, but they are radically different. UDP behaves very much like the IP protocol underneath it, while TCP abstracts everything so it looks like you are reading and writing to a file, hiding all complexities of packets and unreliability from you.&lt;/p&gt;
&lt;p&gt;So how does it do this?&lt;/p&gt;
&lt;p&gt;Firstly, TCP is a stream protocol, so you just write bytes to a stream, and TCP makes sure that they get across to the other side. Since IP is built on packets, and TCP is built on top of IP, TCP must therefore break your stream of data up into packets. So, some internal TCP code queues up the data you send, then when enough data is pending the queue, it sends a packet to the other machine.&lt;/p&gt;
&lt;p&gt;This can be a problem for multiplayer games if you are sending very small packets. What can happen here is that TCP may decide it&amp;rsquo;s not going to send data until you have buffered up enough data to make a reasonably sized packet to send over the network.&lt;/p&gt;
&lt;p&gt;This is a problem because you want your client player input to get to the server &lt;em&gt;as quickly as possible&lt;/em&gt;, if it is delayed or &amp;ldquo;clumped up&amp;rdquo; like TCP can do with small packets, the client&amp;rsquo;s user experience of the multiplayer game will be very poor. Game network updates will arrive late and infrequently, instead of on-time and frequently like we want.&lt;/p&gt;
&lt;p&gt;TCP has an option to fix this behavior called &lt;a href=&#34;https://en.wikipedia.org/wiki/Nagle%27s_algorithm&#34;&gt;TCP_NODELAY&lt;/a&gt;. This option instructs TCP not to wait around until enough data is queued up, but to flush any data you write to it immediately. This is referred to as disabling Nagle&amp;rsquo;s algorithm.&lt;/p&gt;
&lt;p&gt;Unfortunately, even if you set this option TCP still has serious problems for multiplayer games and it all stems from how TCP handles lost and out of order packets to present you with the &amp;ldquo;illusion&amp;rdquo; of a reliable, ordered stream of data.&lt;/p&gt;
&lt;h2 id=&#34;how-tcp-implements-reliability&#34;&gt;How TCP implements reliability&lt;/h2&gt;
&lt;p&gt;Fundamentally TCP breaks down a stream of data into packets, sends these packets over unreliable IP, then takes the packets received on the other side and reconstructs the stream.&lt;/p&gt;
&lt;p&gt;But what happens when a packet is lost?&lt;/p&gt;
&lt;p&gt;What happens when packets arrive out of order or are duplicated?&lt;/p&gt;
&lt;p&gt;Without going too much into the details of how TCP works because its super-complicated (please refer to &lt;a href=&#34;http://www.cs.newpaltz.edu/~pletcha/NET_PY/the-protocols-tcp-ip-illustrated-volume-1.9780201633467.24290.pdf&#34;&gt;TCP/IP Illustrated&lt;/a&gt;) in essence TCP sends out a packet, waits a while until it detects that packet was lost because it didn&amp;rsquo;t receive an ack (or acknowledgement), then resends the lost packet to the other machine. Duplicate packets are discarded on the receiver side, and out of order packets are resequenced so everything is reliable and in order.&lt;/p&gt;
&lt;p&gt;The problem is that if we were to send our time critical game data over TCP, whenever a packet is dropped it has to stop and wait for that data to be resent. Yes, even if more recent data arrives, that new data gets put in a queue, and you cannot access it until that lost packet has been retransmitted. How long does it take to resend the packet?&lt;/p&gt;
&lt;p&gt;Well, it&amp;rsquo;s going to take &lt;em&gt;at least&lt;/em&gt; round trip latency for TCP to work out that data needs to be resent, but commonly it takes 2*RTT, and another one way trip from the sender to the receiver for the resent packet to get there. So if you have a 125ms ping, you&amp;rsquo;ll be waiting roughly 1/5th of a second for the packet data to be resent &lt;em&gt;at best&lt;/em&gt;, and in worst case conditions you could be waiting up to half a second or more (consider what happens if the attempt to resend the packet fails to get through?). What happens if TCP decides the packet loss indicates network congestion and it backs off? Yes it actually does this. Fun times!&lt;/p&gt;
&lt;h2 id=&#34;never-use-tcp-for-time-critical-data&#34;&gt;Never use TCP for time critical data&lt;/h2&gt;
&lt;p&gt;The problem with using TCP for realtime games like FPS is that unlike web browsers, or email or most other applications, these multiplayer games have a &lt;em&gt;real time requirement&lt;/em&gt; on packet delivery.&lt;/p&gt;
&lt;p&gt;What this means is that for many parts of a game, for example player input and character positions, it really doesn&amp;rsquo;t matter what happened a second ago, the game only cares about the most recent data.&lt;/p&gt;
&lt;p&gt;TCP was simply not designed with this in mind.&lt;/p&gt;
&lt;p&gt;Consider a very simple example of a multiplayer game, some sort of action game like a shooter. You  want to network this in a very simple way. Every frame you send the input from the client to the server (eg. keypresses, mouse input controller input), and each frame the server processes the input from each player, updates the simulation, then sends the current position of game objects back to the client for rendering.&lt;/p&gt;
&lt;p&gt;So in our simple multiplayer game, whenever a packet is lost, everything has to &lt;em&gt;stop and wait&lt;/em&gt; for that packet to be resent. On the client game objects stop receiving updates so they appear to be standing still, and on the server input stops getting through from the client, so the players cannot move or shoot. When the resent packet finally arrives, you receive this stale, out of date information that you don&amp;rsquo;t even care about! Plus, there are packets backed up in queue waiting for the resend which arrive at same time, so you have to process all of these packets in one frame. Everything is clumped up!&lt;/p&gt;
&lt;p&gt;Unfortunately, there is nothing you can do to fix this behavior, it&amp;rsquo;s just the fundamental nature of TCP. This is just what it takes to make the unreliable, packet-based internet look like a reliable-ordered stream.&lt;/p&gt;
&lt;p&gt;Thing is we don&amp;rsquo;t want a reliable ordered stream.&lt;/p&gt;
&lt;p&gt;We want our data to get as quickly as possible from client to server without having to wait for lost data to be resent.&lt;/p&gt;
&lt;p&gt;This is why you should &lt;strong&gt;never&lt;/strong&gt; use TCP when networking time-critical data!&lt;/p&gt;
&lt;h2 id=&#34;wait-why-cant-i-use-_both_-udp-and-tcp&#34;&gt;Wait? Why can&amp;rsquo;t I use &lt;em&gt;both&lt;/em&gt; UDP and TCP?&lt;/h2&gt;
&lt;p&gt;For realtime game data like player input and state, only the most recent data is relevant, but for other types of data, say perhaps a sequence of commands sent from one machine to another, reliability and ordering can be very important.&lt;/p&gt;
&lt;p&gt;The temptation then is to use UDP for player input and state, and TCP for the reliable ordered data. If you&amp;rsquo;re sharp you&amp;rsquo;ve probably even worked out that you may have multiple &amp;ldquo;streams&amp;rdquo; of reliable ordered commands, maybe one about level loading, and another about AI. Perhaps you think to yourself, &amp;ldquo;Well, I&amp;rsquo;d really not want AI commands to stall out if a packet is lost containing a level loading command - they are completely unrelated!&amp;rdquo;. You are right, so you may be tempted to create one TCP socket for each stream of commands.&lt;/p&gt;
&lt;p&gt;On the surface, this seems like a great idea. The problem is that since TCP and UDP are both built on top of IP, the underlying packets sent by each protocol will affect each other. Exactly how they affect each other is quite complicated and relates to how TCP performs reliability and flow control, but fundamentally you should remember that TCP tends to &lt;em&gt;induce&lt;/em&gt; packet loss in UDP packets. For more information, read &lt;a href=&#34;http://www.isoc.org/INET97/proceedings/F3/F3_1.HTM&#34;&gt;this paper&lt;/a&gt; on the subject.&lt;/p&gt;
&lt;p&gt;Also, it&amp;rsquo;s pretty complicated to mix UDP and TCP. If you mix UDP and TCP you lose a certain amount of control. Maybe you can implement reliability in a more efficient way that TCP does, better suited to your needs? Even if you need reliable-ordered data, it&amp;rsquo;s possible, provided that data is small relative to the available bandwidth to get that data across faster and more reliably that it would if you sent it over TCP. Plus, if you have to do NAT to enable home internet connections to talk to each other, having to do this NAT once for UDP and once for TCP (not even sure if this is possible&amp;hellip;) is kind of painful.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;My recommendation is not only that you use UDP, but that you &lt;em&gt;only&lt;/em&gt; use UDP for your game protocol. Don&amp;rsquo;t mix TCP and UDP! Instead, learn how to implement the specific features of TCP that you need &lt;em&gt;inside&lt;/em&gt; your own custom UDP based protocol.&lt;/p&gt;
&lt;p&gt;Of course, it is no problem to use HTTP to talk to some RESTful services while your game is running. I&amp;rsquo;m not saying you can&amp;rsquo;t do that. A few TCP connections running while your game is running isn&amp;rsquo;t going to bring everything down. The point is, don&amp;rsquo;t split your &lt;em&gt;game protocol&lt;/em&gt; across UDP and TCP. Keep your game protocol running over UDP so you are fully in control of the data you send and receive and how reliability, ordering and congestion avoidance are implemented.&lt;/p&gt;
&lt;p&gt;The rest of this article series show you how to do this, from creating your own virtual connection on top of UDP, to creating your own reliability, flow control and congestion avoidance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/sending_and_receiving_packets/&#34;&gt;Sending and Receiving Packets&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Networked Physics (2004)</title>
      <link>https://gafferongames.com/post/networked_physics_2004/</link>
      <pubDate>Sat, 04 Sep 2004 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/networked_physics_2004/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/game-physics/&#34;&gt;Game Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/spring_physics/&#34;&gt;previous article&lt;/a&gt; we discussed how to use spring-like forces to model basic collision response, joints and motors.&lt;/p&gt;
&lt;p&gt;In this article we&amp;rsquo;re going to discuss how to network a physics simulation.&lt;/p&gt;
&lt;h2 id=&#34;first-person-shooters&#34;&gt;First Person Shooters&lt;/h2&gt;
&lt;p&gt;First person shooter physics are usually very simple. The world is static and players are limited to running around and jumping and shooting.&lt;/p&gt;
&lt;p&gt;Because of cheating, first person shooters typically operate on a client-server model where the server is authoritative over physics. This means that the true physics simulation runs on the server and the clients display an approximation of the server physics to the player.&lt;/p&gt;
&lt;p&gt;The problem then is how to allow each client to control his own character while displaying a reasonable approximation of the motion of the other players.&lt;/p&gt;
&lt;p&gt;In order to do this elegantly and simply, we structure the physics simulation as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Character physics are completely driven from input data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Physics state is fully encapsulated in a state structure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To do this we need to gather all the user input that drives the physics simulation into a single structure and the state representing each player character into another.&lt;/p&gt;
&lt;p&gt;Here is an example from a simple run and jump shooter:&lt;/p&gt;
&lt;pre&gt;
    struct Input
    {
         bool left;
         bool right;
         bool forward;
         bool back;
         bool jump;
    };

    struct State
    {
         Vector position;
         Vector velocity;
    };
&lt;/pre&gt;
&lt;p&gt;Next we need to make sure that the simulation gives the same result given the same initial state and inputs over time. Or at least, that the results are as close as possible. I&amp;rsquo;m not talking about perfect floating point determinism here, just a reasonable 1/2 second prediction giving approximately the same result.&lt;/p&gt;
&lt;h2 id=&#34;network-fundamentals&#34;&gt;Network Fundamentals&lt;/h2&gt;
&lt;p&gt;I will briefly discuss actually networking issues in this section before moving on to the important information of what to send over the pipe. It is after all just a pipe after all, networking is nothing special right? Beware! Ignorance of how the pipe works will really bite you. Here are the two networking fundamentals that you absolutely need to know:&lt;/p&gt;
&lt;p&gt;Number one. If your network programmer is any good at all he will use UDP, which is an unreliable data protocol, and build some sort of application specific networking layer on top of this. The important thing that you as the physics programmer need to know is that you absolutely must design your physics communication over the network so that you can receive the most recent input and state without waiting for lost packets to be resent. This is important because otherwise your physics simulation will stall out under bad networking conditions.&lt;/p&gt;
&lt;p&gt;Two. You will be very limited in what can be sent across the network due to bandwidth limitations. Compression is a fact of life when sending data across the network. As physics programmer you need to be very careful what data is compressed and how it is done. For the sake of determinism, some data must not be compressed, while other data is safe. Any data that is compressed in a lossy fashion should have the same quantization applied locally where possible, so that the result is the same on both machines. Bottom line you&amp;rsquo;ll need to be involved in this compression in order to make it as efficient as possible without breaking your simulation.&lt;/p&gt;
&lt;h2 id=&#34;physics-runs-on-the-server&#34;&gt;Physics Runs On The Server&lt;/h2&gt;
&lt;p&gt;The fundamental primitive we will use when sending data between the client and the server is an unreliable data block, or if you prefer, an unreliable non-blocking remote procedure call (rpc). Non-blocking means that the client sends the rpc to the server then continues immediately executing other code, it does not wait for the rpc to execute on the server! Unreliable means that if you call the rpc is continuously on the the server from a client, some of these calls will not reach the server, and others will arrive in a different order than they were called. We design our communications around this primitive because it suits the transport layer (UDP).&lt;/p&gt;
&lt;p&gt;The communication between the client and the server is then structured as what I call a &amp;ldquo;stream of input&amp;rdquo; sent via repeated rpc calls. The key to making this input stream tolerant of packet loss and out of order delivery is the inclusion of a floating point time in seconds value with every input rpc sent. The server keeps track of the current time on the server and ignores any input received with a time value less than the current time. This effectively drops any input that is received out of order. Lost packets are ignored.&lt;/p&gt;
&lt;p&gt;Thinking in terms of our standard first person shooter, the input we send from client to server is the input structure that we defined earlier:&lt;/p&gt;
&lt;pre&gt;
    struct Input
    {
         bool left;
         bool right;
         bool forward;
         bool back;
         bool jump;
    };

    class Character
    {
    public:

         void processInput( double time,
                            Input input );
    };
&lt;/pre&gt;
&lt;p&gt;Thats the bare minimum data required for sending a simple ground based movement plus jumping across the network. If you are going to allow your clients to shoot you&amp;rsquo;ll need to add mouse input as part of the input structure as well because weapon firing needs to be done server side.&lt;/p&gt;
&lt;p&gt;Notice how I define the rpc as a method inside an object? I assume your network programmer has a channel structure built on top of UDP, eg. some way to indicate that a certain rpc call is directed as a specific object instance on the remote machine.&lt;/p&gt;
&lt;p&gt;So how does the server process these rpc calls? It basically sits in a loop waiting for input from each of the clients. Each character object has its physics advanced ahead in time individually as input rpcs are received from the client that owns it. This means that the physics state of different client characters are slightly out of phase on the server, some clients being a little bit ahead and others a little bit behind in time. Overall however, the different client characters advance ahead roughly in sync with each other.&lt;/p&gt;
&lt;p&gt;Lets see how this rpc call is implemented in code on the server:&lt;/p&gt;
&lt;pre&gt;    void processInput( double time, Input input )
    {
        if ( time &amp;lt; currentTime )
            return;

        float deltaTime = currentTime - time;

        updatePhysics( currentTime, deltaTime, input );
    }&lt;/pre&gt;
&lt;p&gt;The key to the code above is that by advancing the server physics simulation for the client character is performed only as we receive input from that client. This makes sure that the simulation is tolerant of random delays and jitter when sending the input rpc across the network.&lt;/p&gt;
&lt;h2 id=&#34;clients-approximate-physics-locally&#34;&gt;Clients Approximate Physics Locally&lt;/h2&gt;
&lt;p&gt;Now for the communication from the server back to the clients. This is where the bulk of the server bandwidth kicks in because the information needs to be broadcast to all the clients.&lt;/p&gt;
&lt;p&gt;What happens now is that after every physics update on the server that occurs in response to an input rpc from a client, the server broadcasts out the physics state at the end of that physics update and the current input just received from the rpc.&lt;/p&gt;
&lt;p&gt;This is sent to all clients in the form of an unreliable rpc:&lt;/p&gt;
&lt;pre&gt;   void clientUpdate( float time, Input input, State state )
    {
        Vector difference = state.position - 
                            current.position;

        float distance = difference.length();

        if ( distance &amp;gt; 2.0f )
            current.position = state.position;
        else if ( distance &amp;gt; 0.1 )
            current.position += difference * 0.1f;

        current.velocity = velocity;

        current.input = input;
    }&lt;/pre&gt;
&lt;p&gt;What is being done here is this: if the two positions are significantly different (&amp;gt;2m apart) just snap to the corrected position, otherwise if the distance between the server position and the current position on the client is more than 10cms, move 10% of the distance between the current position and the correct position. Otherwise do nothing.&lt;/p&gt;
&lt;p&gt;Since server update rpcs are being broadcast continually from the server to the the clients, moving only a fraction towards the snap position has the effect of smoothing the correction out with what is called an exponentially smoothed moving average.&lt;/p&gt;
&lt;p&gt;This trades a bit of extra latency for smoothness because only moving some percent towards the snapped position means that the position will be a bit behind where it should really be. You don&amp;rsquo;t get anything for free. I recommend that you perform this smoothing for immediate quantities such as position and orientation, while directly snapping derivative quantities such as velocity, angular velocity because the effect of abruptly changing derivative quantities is not as noticeable.&lt;/p&gt;
&lt;p&gt;Of course, these are just rules of thumb. Make sure you experiment to find out what works best for your simulation.&lt;/p&gt;
&lt;h2 id=&#34;client-side-prediction&#34;&gt;Client-Side Prediction&lt;/h2&gt;
&lt;p&gt;So far we have a developed a solution for driving the physics on the server from client input, then broadcasting the physics to each of the clients so they can maintain a local approximation of the physics on the server. This works perfectly however it has one major disadvantage. Latency!&lt;/p&gt;
&lt;p&gt;When the user holds down the forward input it is only when that input makes a round trip to the server and back to the client that the client&amp;rsquo;s character starts moving forward locally. Those who remember the original Quake netcode would be familiar with this effect. The solution to this problem was discovered and first applied in the followup QuakeWorld and is called client side prediction. This technique completely eliminates movement lag for the client and has since become a standard technique used in first person shooter netcode.&lt;/p&gt;
&lt;p&gt;Client side prediction works by predicting physics ahead locally using the player&amp;rsquo;s input, simulating ahead without waiting for the server round trip. The server periodically sends corrections to the client which are required to ensure that the client stays in sync with the server physics. At all times the server is authoritative over the physics of the character so even if the client attempts to cheat all they are doing is fooling themselves locally while the server physics remains unaffected. Seeing as all game logic runs on the server according to server physics state, client side movement cheating is basically eliminated.&lt;/p&gt;
&lt;p&gt;The most complicated part of client side prediction is handling the correction from the server. This is difficult, because the corrections from the server arrive &lt;em&gt;in the past&lt;/em&gt; due to client/server communication latency. We need to apply this correction in the past, then calculate the resulting corrected position at present time on the client.&lt;/p&gt;
&lt;p&gt;The standard technique to do this is to store a circular buffer of saved moves on the client where each move in the buffer corresponds to an input rpc call sent from the client to the server:&lt;/p&gt;
&lt;pre&gt;   struct Move
    {
        double time;
        Input input;
        State state;
    };&lt;/pre&gt;
&lt;p&gt;When the client receives a correction it looks through the saved move buffer to compare its physics state at that time with the corrected physics state sent from the server. If the two physics states differ above some threshold then the client rewinds to the corrected physics state and time and replays the stored moves starting from the corrected state in the past, the result of this re-simulation being the corrected physics state at the current time on the client.&lt;/p&gt;
&lt;p&gt;Sometimes packet loss or out of order delivery occurs and the server input differs from that stored on the client. In this case the server snaps the client to the correct position automatically via rewind and replay. This snapping is quite noticeable to the player, so we reduce it with the same smoothing technique we used above for the other player characters. This smoothing is done &lt;i&gt;after&lt;/i&gt; recalculating the corrected position via rewind and replay.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We can easily apply the client side prediction techniques used in first person shooters to network a physics simulation, but only if there is a clear ownership of objects by clients and these object interact mostly with a static world.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Spring Physics</title>
      <link>https://gafferongames.com/post/spring_physics/</link>
      <pubDate>Fri, 03 Sep 2004 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/spring_physics/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/game-physics/&#34;&gt;Game Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/physics_in_3d/&#34;&gt;previous article&lt;/a&gt; we discussed how to simulate the motion of rigid bodies in 3D. Now we&amp;rsquo;re going to discuss how to implement spring physics.&lt;/p&gt;
&lt;p&gt;The physics behind springs is simple but extremely versatile and useful. You can use springs to link points together to model rope and string, cloth, and even blobs of jelly. Springs can also be used to implement basic collision response, and to create joints that constrain the motion of rigid bodies.&lt;/p&gt;
&lt;p&gt;The more physics programming you do, the more springs pop up. Many physical phenomenon boil down to spring-like forces being applied such as buoyancy in water. Springs are everywhere so lets discover how to simulate them!&lt;/p&gt;
&lt;h2 id=&#34;spring-and-dampers&#34;&gt;Spring and Dampers&lt;/h2&gt;
&lt;p&gt;The formula to use for simulating spring-like behavior is called &lt;a href=&#34;http://en.wikipedia.org/wiki/Hooke&#39;s_law&#34;&gt;Hooke&amp;rsquo;s Law&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;    &lt;strong&gt;F&lt;/strong&gt; = -k&lt;strong&gt;x&lt;/strong&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;strong&gt;x&lt;/strong&gt; is the vector displacement of the end of the spring from it&amp;rsquo;s equilibrium position,  and k is a constant describing the tightness of the spring. Larger values of k mean that the spring is tighter and will therefore stretch less per unit of force, smaller values mean the spring is looser and will stretch further.&lt;/p&gt;
&lt;p&gt;Newton&amp;rsquo;s third law says that every force has an equal and opposite force. If two objects a and b are connected together by a spring then the spring will apply one force which pulls object a towards object b, and an equal and opposite force pulling object b towards a. However, if you want to attach one object to a fixed point in space its you can apply the force of the object in one direction. This makes sense if you consider that point as having &lt;i&gt;infinite mass&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Spring forces alone are not much use though. You need to combine them with dampers to have a realistic simulation. Damping simulates energy loss, and it is used in physics simulations to make sure that springs don&amp;rsquo;t oscillate forever but come to rest over time.&lt;/p&gt;
&lt;p&gt;A spring-damper system can be modeled as follows:&lt;/p&gt;
&lt;pre&gt;    &lt;strong&gt;F&lt;/strong&gt; = - k&lt;strong&gt;x&lt;/strong&gt; - b&lt;strong&gt;v&lt;/strong&gt;&lt;/pre&gt;
&lt;p&gt;Where b is the coefficient of damping and &lt;strong&gt;v&lt;/strong&gt; is the relative velocity between the two points connected by the spring. Larger values for b increase the amount of damping so the object comes to rest more quickly.&lt;/p&gt;
&lt;h2 id=&#34;variations-on-springs&#34;&gt;Variations on Springs&lt;/h2&gt;
&lt;p&gt;There are many different variations on spring-damper systems, but what I want to do is explain how to think generally in terms of what the forces are doing so that you can easily design spring and damper systems to achieve whatever effect you want.&lt;/p&gt;
&lt;p&gt;The first thing is that springs don&amp;rsquo;t only have to act to pull two points together so that they lie on top of each other. For example you can design spring forces that pull together or push apart two points apart so they maintain a desired separation distance from each other:&lt;/p&gt;
&lt;pre&gt;    &lt;strong&gt;F&lt;/strong&gt; = -k(|&lt;strong&gt;x&lt;/strong&gt;|-d)(&lt;strong&gt;x&lt;/strong&gt;/|&lt;strong&gt;x&lt;/strong&gt;|) - b&lt;strong&gt;v&lt;/strong&gt;&lt;/pre&gt;
&lt;p&gt;Where |&lt;strong&gt;x&lt;/strong&gt;| is the distance between the two points connected to the spring, d is the desired distance of separation, and &lt;strong&gt;x&lt;/strong&gt; / |&lt;strong&gt;x&lt;/strong&gt;| is the unit length direction vector between the two points: &lt;strong&gt;a&lt;/strong&gt; to &lt;strong&gt;b&lt;/strong&gt;, when applying the force to point &lt;strong&gt;a&lt;/strong&gt; and vice versa.&lt;/p&gt;
&lt;p&gt;The overall effect of the force equation above is to have a force which pushes the two points connected by the spring apart if they are closer than distance d, and bring the two points together if they are further than d apart. Notice how the force becomes exactly zero when the two points are at the target distance? If you tune the k and b parameters correctly you can have a nicely behaving spring that quickly brings the two points together smoothly over time and comes to rest at the solution point.&lt;/p&gt;
&lt;p&gt;But why apply springs to position only? If you want to accelerate a body over time such that it accelerates to a certain speed then you can calculate a spring force proportional to the difference between the current velocity and the target velocity, combined with a damping proportional to the current velocity so that it reaches its target over time instead of cycling about it. This is usually called a motor in physics simulation.&lt;/p&gt;
&lt;p&gt;We can even apply the same concept to drive the spinning of an object at a certain speed by applying a spring torque proportional to the difference between the current angular velocity and the desired angular velocity, coupled with a damper force proportional to the current angular velocity.&lt;/p&gt;
&lt;p&gt;Another commonly implemented spring constraint is to enforce a upright orientation of a body, for example, you could apply a spring torque proportional to the difference between the current orientation and an upright orientation, coupled with a damper proportional to angular velocity. Such a constraint is called a &amp;lsquo;stay upright constraint&amp;rsquo; and its often used for sci-fi hover racing games.&lt;/p&gt;
&lt;p&gt;As you can see, the applications of springs are limitless. The overall pattern is to design spring forces that will attract your physics simulation into the desired state and fade off to zero when this state is has been reached. In order to make sure that your physics objects don&amp;rsquo;t just oscillate around the solution but actually reach it, it is necessary to apply damping proportional to whatever physics state values are performing the evolution of the simulation towards the solution over time.&lt;/p&gt;
&lt;h2 id=&#34;attachment-using-a-spring&#34;&gt;Attachment using a Spring&lt;/h2&gt;
&lt;p&gt;So lets get started with an actual concrete implementation of using springs a simulation. The first thing we will implement is an attachment joint that will allow the user to click and drag a point on the cube to move it around. We will implement this by modeling a tight spring attachment between a target point and an attachment point on the body of the cube. This is effectively a ball and socket joint implemented using only spring forces and is implemented using the standard equation we are used to:&lt;/p&gt;
&lt;pre&gt;    &lt;strong&gt;F&lt;/strong&gt; = -k&lt;strong&gt;x&lt;/strong&gt; -b&lt;strong&gt;v&lt;/strong&gt;&lt;/pre&gt;
&lt;p&gt;Where x is the vector difference between the current target point and the attachment point on the object, and v is the point velocity at the attachment point on the object. The important thing is that this velocity v being the point velocity means that it incorporates both the linear motion of the object plus any velocity at the attachment point due to angular velocity. As was shown in the previous article we can calculate this point velocity at follows:&lt;/p&gt;
&lt;pre&gt;    &lt;strong&gt;v&lt;/strong&gt;&lt;sub&gt;point&lt;/sub&gt; = &lt;strong&gt;v&lt;/strong&gt;&lt;sub&gt;linear&lt;/sub&gt; + &lt;strong&gt;v&lt;/strong&gt;&lt;sub&gt;angular&lt;/sub&gt; &lt;em&gt;cross&lt;/em&gt; (&lt;strong&gt;p&lt;/strong&gt; - &lt;strong&gt;x&lt;/strong&gt;)&lt;/pre&gt;
&lt;p&gt;Where &lt;strong&gt;p&lt;/strong&gt; is the point on the rigid body and &lt;strong&gt;x&lt;/strong&gt; is the center of mass of the object. Secondly, this spring and damper force is not just applied linearly, but is applied at the attachment point on the object. This means that the spring force will apply both a linear force and a torque component as follows:&lt;/p&gt;
&lt;pre&gt;    &lt;strong&gt;F&lt;/strong&gt;&lt;sub&gt;linear&lt;/sub&gt; = &lt;strong&gt;F&lt;/strong&gt;
    &lt;strong&gt;F&lt;/strong&gt;&lt;sub&gt;torque&lt;/sub&gt; = &lt;strong&gt;F&lt;/strong&gt; cross (&lt;strong&gt;p&lt;/strong&gt; - &lt;strong&gt;x&lt;/strong&gt;)&lt;/pre&gt;
&lt;p&gt;The overall effect of this joint then is to bring the target and attachment points together while damping the motion of the object at the attachment point. This allows the object to move as long as remains still at the attachment. In other words the object is only allowed to move by rotating about the attachment point. Our simple ball and socket joint is now complete.&lt;/p&gt;
&lt;h2 id=&#34;collision-response-with-springs&#34;&gt;Collision Response with Springs&lt;/h2&gt;
&lt;p&gt;Next we will implement a basic collision response using springs. The trick here is to apply a spring and damper force that works against what we don&amp;rsquo;t want, eg. objects moving towards each other and penetrating other objects.&lt;/p&gt;
&lt;p&gt;So we have a collision detected and the usual information is returned to the physics system ready to apply collision response. This information is typically something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A unit length collision normal&lt;/li&gt;
&lt;li&gt;The penetration depth along the normal&lt;/li&gt;
&lt;li&gt;The physics state for each of the colliding objects at the time of collision&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All this information grouped together is called a contact. Processing collision geometry and returning a series of generic contacts is a great idea because it decouples your collision response from the gritty details of collision detection.&lt;/p&gt;
&lt;p&gt;Once we have all our contact information a simple collision response can be implemented by applying a spring-like force to the colliding objects to keep them apart:&lt;/p&gt;
&lt;pre&gt;    &lt;strong&gt;F&lt;/strong&gt; = &lt;strong&gt;n&lt;/strong&gt;kd - b&lt;strong&gt;n&lt;/strong&gt;(&lt;strong&gt;n&lt;/strong&gt;.&lt;strong&gt;v&lt;/strong&gt;)&lt;/pre&gt;
&lt;p&gt;Where k and b are the spring-damper coefficients, &lt;strong&gt;n&lt;/strong&gt; is the contact normal and &lt;strong&gt;v&lt;/strong&gt; is the relative velocity between the two objects at the point of collision. Effectively this equation calculates a spring force that pushes out along the contact normal while reducing the relative velocity of the objects towards each other at the contact point.&lt;/p&gt;
&lt;p&gt;Various different collision responses types can also be achieved using this equation, for example setting b to 0 gives a completely elastic collision response where all energy going into the collision returns in the bounce over time. Setting b to higher value tend to make the collision more inelastic because it removes more energy during the collision. Finally, by increasing and decreasing the spring constant k in concert with b you can make a collision that feels like anything from bouncing off a trampoline (low k and low b), to landing and sinking into quicksand (low k and high b), or landing with a splat on concrete (high k, high b).&lt;/p&gt;
&lt;h2 id=&#34;the-weakness-of-springs&#34;&gt;The Weakness of Springs&lt;/h2&gt;
&lt;p&gt;It seems we can achieve a large variety of different collision effects using only springs and easily make joints and constraints. Its not all good news however because springs come with their own set of weaknesses which I will now explain.&lt;/p&gt;
&lt;p&gt;The first weakness is that its difficult to tune the spring constants to get exactly the effect you want. For example, if you are attempting to model the real world physics of an object, you will need to experiment to find the spring k and b values that match the simulation. These values are usually dependent on other values of your simulation, such as the gravity constant, meaning that if you adjust gravity you&amp;rsquo;ll need to retune your springs to get the same effect.&lt;/p&gt;
&lt;p&gt;The next problem is that tighter the spring k you use, the more difficult it becomes to solve the differential equation. Using an RK4 integrator sure help with this, but even with RK4 there is a fundamental limit to how large you can make your spring k before your simulation will explode. At this point you need to either decrease your timestep or reduce your spring k.&lt;/p&gt;
&lt;p&gt;The final, and major weakness is that springs are reactive not predictive. This is a subtle point but a very important one. A joint or constraint implemented using springs only works by correcting errors after they occur, and collision response using springs requires allowing some amount of penetration before it acts to correct it and so forth. More advanced techniques exist which can solve for the forces required to constrain the physics simulation without inducing error, such as LCP solvers or iterative methods, but they are out of scope of this simple article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/networked_physics_2004/&#34;&gt;Networked Physics (2004)&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Physics in 3D</title>
      <link>https://gafferongames.com/post/physics_in_3d/</link>
      <pubDate>Thu, 02 Sep 2004 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/physics_in_3d/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/game-physics/&#34;&gt;Game Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/fix_your_timestep/&#34;&gt;previous article&lt;/a&gt; we discussed how to integrate our physics simulation forward at fixed delta time increments, regardless of display framerate.&lt;/p&gt;
&lt;p&gt;In this article we are going to simulate motion in three dimensions.&lt;/p&gt;
&lt;h2 id=&#34;rigid-bodies&#34;&gt;Rigid Bodies&lt;/h2&gt;
&lt;p&gt;We will concentrate on a type of object called a &lt;strong&gt;rigid body&lt;/strong&gt;. Rigid bodies cannot bend, compress or deform in any way. This makes their motion much easier to calculate.&lt;/p&gt;
&lt;p&gt;To simulate the motion of rigid bodies, we must study both rigid body kinematics and rigid body dynamics. Kinematics is the study of how an object moves in the absence of forces, while dynamics describes how an object reacts to them. Together they provide all the information you need to simulate the motion of a rigid body in three dimensions.&lt;/p&gt;
&lt;p&gt;Along the way I will show you how to integrate vector quantities, handle rotations in three dimensions and integrate to find the motion of your object as it moves and spins around the world.&lt;/p&gt;
&lt;h2 id=&#34;moving-in-the-third-dimension&#34;&gt;Moving in the Third Dimension&lt;/h2&gt;
&lt;p&gt;As long as we only have single floating point values for position and velocity our physics simulation is limited to motion in a single dimension, and a point moving from side to side on the screen is pretty boring!&lt;/p&gt;
&lt;p&gt;We want our object to be able to move in three dimensions: left and right, forward and back, up and down. If we apply the equations of motion to each dimension separately, we can integrate each dimension in turn to find the motion of the object in three dimensions.&lt;/p&gt;
&lt;p&gt;Or&amp;hellip; we could just use vectors.&lt;/p&gt;
&lt;p&gt;Vectors are a mathematical type representing an array of numbers. A three dimensional vector has three components x, y and z. Each component corresponds to a dimension. In this article x is left and right, y is up and down, and z is forward and back.&lt;/p&gt;
&lt;p&gt;In C++ we implement vectors using a struct as follows:&lt;/p&gt;
&lt;pre&gt;
    struct Vector
    {
         float x,y,z;
    };
&lt;/pre&gt;
&lt;p&gt;Addition of two vectors is defined as adding each component together. Multiplying a vector by a floating point number is the same as just multiplying each component. Lets add overloaded operators to the vector struct so that we can perform these operations in code as if vectors are a native type:&lt;/p&gt;
&lt;pre&gt;
    struct Vector
    {
         float x,y,z;

         Vector operator + ( const Vector &amp;amp;other )
         {
              Vector result;
              result.x = x + other.x;
              result.y = y + other.y;
              result.z = z + other.z;
              return result;
         }

         Vector operator*( float scalar )
         {
              Vector result;
              result.x = x * scalar;
              result.y = y * scalar;
              result.z = z * scalar;
              return result;
         }
    };
&lt;/pre&gt;
&lt;p&gt;Now instead of maintaining completely seperate equations of motion and integrating seperately for x, y and z, we convert our position, velocity, acceleration and force to vector quantities, then integrate the vectors directly using the equations of motion from the &lt;a href=&#34;https://gafferongames.com/post/integration_basics/&#34;&gt;first article&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
    &lt;b&gt;F&lt;/b&gt; = m&lt;b&gt;a&lt;/b&gt;
    d&lt;b&gt;v&lt;/b&gt;/dt = &lt;b&gt;a&lt;/b&gt;
    d&lt;b&gt;x&lt;/b&gt;/dt = &lt;b&gt;v&lt;/b&gt;
&lt;/pre&gt;
&lt;p&gt;Notice how &lt;b&gt;F&lt;/b&gt;, &lt;b&gt;a&lt;/b&gt;, &lt;b&gt;v&lt;/b&gt; and &lt;b&gt;x&lt;/b&gt; are written in bold. This is the convention used to distinguish vector quantities from single value (scalar) quantities such as mass m and time t.&lt;/p&gt;
&lt;p&gt;Now that we have the equations of motion in vector form, how do we integrate them? The answer is exactly the same as we integrated single values. This is because we have already added overloaded operators for adding two vectors together, and multiplying a vector by a scalar, and this is all we need to be able to drop in vectors in place of floats and have everything just work.&lt;/p&gt;
&lt;p&gt;For example, here is a simple Euler integration for vector position from velocity:&lt;/p&gt;
&lt;pre&gt;
    position = position + velocity * dt;
&lt;/pre&gt;
&lt;p&gt;Notice how the overloaded operators make it look exactly the same as an Euler integration for a single value. But what is it really doing? Lets take a look at how we would implement vector integration without the overloaded operators:&lt;/p&gt;
&lt;pre&gt;
    position.x = position.x + velocity.x * dt;
    position.y = position.y + velocity.y * dt;
    position.z = position.z + velocity.z * dt;
&lt;/pre&gt;
&lt;p&gt;As you can see, its exactly the same as if we integrated each component of the vector separately! This is the cool thing about vectors. Whether we integrate vectors directly, or integrate each component separately, we are doing exactly the same thing.&lt;/p&gt;
&lt;h2 id=&#34;structuring-for-rk4&#34;&gt;Structuring for RK4&lt;/h2&gt;
&lt;p&gt;In the example programs from previous articles we drove the simulation from acceleration assuming unit mass. This kept the code nice and simple, but from now on every object will have its own mass in kilograms so the simulation needs be driven by forces instead.&lt;/p&gt;
&lt;p&gt;There are two ways we can do this. First, we can divide force by mass to get acceleration, then integrate this acceleration to get the velocity, and integrate velocity to get position.&lt;/p&gt;
&lt;p&gt;The second way is to integrate force directly to get momentum, then convert this momentum to velocity by dividing it by mass, then finally integrate velocity to get position. Remember that momentum is just velocity multiplied by mass:&lt;/p&gt;
&lt;pre&gt;
    d&lt;b&gt;p&lt;/b&gt;/dt = &lt;b&gt;F&lt;/b&gt;
    &lt;b&gt;v&lt;/b&gt; = &lt;b&gt;p&lt;/b&gt;/m
    d&lt;b&gt;x&lt;/b&gt;/dt = &lt;b&gt;v&lt;/b&gt;
&lt;/pre&gt;
&lt;p&gt;Both methods work, but the second way is more consistent with the way that we must approach rotation later in the article, so we&amp;rsquo;ll use that.&lt;/p&gt;
&lt;p&gt;When we switch to momentum we need to make sure that the velocity is recalculated after each integration by dividing momentum by mass. Doing this manually everywhere that momentum is changed would be error prone, so we now separate all our state quantities into primary, secondary and constant values, and add a method called &amp;lsquo;recalculate&amp;rsquo; to the State struct which is responsible for updating all the secondary values from the primary ones:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct State
    {
        // primary
        Vector position;
        Vector momentum;

        // secondary
        Vector velocity;

        // constant
        float mass;
        float inverseMass;

        void recalculate()
        {
            velocity = momentum * inverseMass;
        }
    };

    struct Derivative
    {
        Vector velocity;
        Vector force;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we make sure that recalculate is called whenever any of the primary values change, then our secondary values will always stay in sync. This may seem like overkill just to handle converting momentum to velocity, but as our simulation becomes more complex we will have many more secondary values, so it is important to design a system that handles this.&lt;/p&gt;
&lt;h2 id=&#34;spinning-around&#34;&gt;Spinning Around&lt;/h2&gt;
&lt;p&gt;So far we have covered linear motion, we can simulate an rigid body so that it moves in 3D space, but it cannot rotate yet.&lt;/p&gt;
&lt;p&gt;The good news is that rotational equivalents to force, momentum, velocity, position and mass exist, and once we understand how they work, integration of rotational physics state can be performed using our RK4 integrator.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start off by talking about how rigid bodies rotate. Because our objects are rigid they cannot deform. This means that we can treat the linear and rotational parts of an object&amp;rsquo;s motion as being entirely separate: a linear component (position, velocity, momentum, mass) and a rotational component rotating about the center of mass.&lt;/p&gt;
&lt;p&gt;How do we represent how the object is rotating? If you think about it a bit, you&amp;rsquo;ll realize that for a rigid body rotation can only ever be around a single axis, so the first thing we need to know is what that axis is. We can represent this axis with a unit length vector. Next we need to know how fast the object is rotating about this axis in radians per second.&lt;/p&gt;
&lt;p&gt;If we know the center of mass of the object, the axis of rotation, and the speed of rotation then we have the all the information we need to describe how it is rotating.&lt;/p&gt;
&lt;p&gt;The standard way of representing rotation over time is by combining the axis and the speed of rotation into a single vector called angular velocity. The length of the angular velocity vector is the speed of rotation in radians while the direction of the vector indicates the axis of rotation. For example, an angular velocity of (2Pi,0,0) indicates a rotation about the x axis doing one revolution per second.&lt;/p&gt;
&lt;p&gt;But what direction is this rotation in? In the example source code I use a right handed coordinate system which is standard when using OpenGL. To find the direction of rotation just take your right hand and point your thumb down the axis, your fingers curl in the direction of rotation. If your 3D engine uses a left handed coordinate system then just use your left hand instead.&lt;/p&gt;
&lt;p&gt;Why do we combine the axis and rate of rotation into a single vector? Doing so gives us a single vector quantity that is easy to manipulate just like velocity for linear motion. We can easily add and subtract changes to angular velocity to change how the object is rotating just like we can add and subtract from linear velocity. If we stuck with a unit length vector and scalar for rotation speed then it would be much more complicated to apply these changes.&lt;/p&gt;
&lt;p&gt;But there is one very important difference between linear and angular velocity. Unlike linear velocity, there is no guarantee that angular velocity will remain constant over time in the absence of forces. In other words, angular momentum is conserved while angular velocity is not. This means that we cannot trust angular velocity as a primary value and we need to use angular momentum instead.&lt;/p&gt;
&lt;h2 id=&#34;angular-momentum-inertia-and-torque&#34;&gt;Angular Momentum, Inertia and Torque&lt;/h2&gt;
&lt;p&gt;Just as velocity and momentum are related by mass in linear motion, angular velocity and angular momentum are related by a quantity called the rotational inertia. This tensor is a measurement of how much effort it takes to spin an object around an axis. It depends on both the shape of the object and how much it weighs.&lt;/p&gt;
&lt;p&gt;In the general case, rotational inertia is represented by a 3x3 matrix called an inertia tensor. Here we make a simplifying assumption by discussing physics in the context of simulating a cube. Because of the symmetries of the cube, we only need a single value for the rotational inertia: 1/6 x size^2 x mass, where size is the length of the sides of the cube.&lt;/p&gt;
&lt;p&gt;Just as we integrate linear momentum from force, we integrate angular momentum directly from the rotational equivalent of force called torque. You can think of torque just like a force, except that when it is applied it induces a rotation around an axis in the direction of torque vector rather than accelerating the object linearly. For example, a torque of (1,0,0) would cause a stationary object to start rotating about the x axis.&lt;/p&gt;
&lt;p&gt;Once we have angular momentum integrated, we multiply it by the inverse of the rotational inertia to get the angular velocity, and using this angular velocity we integrate to get the rotational equivalent of position called orientation.&lt;/p&gt;
&lt;p&gt;However, as we will see, integrating orientation from angular velocity is a bit more complicated!&lt;/p&gt;
&lt;h2 id=&#34;orientation-in-3d&#34;&gt;Orientation in 3D&lt;/h2&gt;
&lt;p&gt;This complexity is due to the difficulty of representing orientations in three dimensions.&lt;/p&gt;
&lt;p&gt;In two dimensions orientations are easy, you just keep track of an angle in radians and you are done. In three dimensions it becomes much more complex. It turns out that you must either use 3x3 rotation matrices or quaternions to correctly represent the orientation of an object.&lt;/p&gt;
&lt;p&gt;For reasons of simplicity and efficiency I&amp;rsquo;m going to use quaternions to represent the orientation instead of matrices. This also gives us an easy way to interpolate between the previous and current physics orientation to get smooth framerate independent animation as per the time stepping scheme outlined in the &lt;a href=&#34;https://gafferongames.com/post/fix_your_timestep/&#34;&gt;previous article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now there are plenty of resources on the internet which explain what quaternions are and how unit length quaternions are used to represent rotations in three dimensions. Here is a particularly &lt;a href=&#34;http://www.sjbrown.co.uk/quaternions.html&#34;&gt;nice one&lt;/a&gt;. What you need to know however is that, effectively, unit quaternions represent an axis of rotation and an amount of rotation about that axis. This may seem similar to our angular velocity, but quaternions are four dimensional vectors instead of three, so mathematically they are actually quite different!&lt;/p&gt;
&lt;p&gt;We will represent quaternions in code as another struct:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct Quaternion
    {
        float w,x,y,z;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we define the rotation of a quaternion as being relative to an initial orientation of the object (what we will later call body coordinates) then we can use this quaternion to represent the orientation of the object at any point in time. Now that we have decided on the representation to use for orientation, we need to integrate it over time so that the object rotates according to the angular velocity.&lt;/p&gt;
&lt;h2 id=&#34;integrating-orientation&#34;&gt;Integrating Orientation&lt;/h2&gt;
&lt;p&gt;We are now presented with a problem. Orientation is a quaternion but angular velocity is a vector. How can we integrate orientation from angular velocity when the two quantities are in different mathematical forms?&lt;/p&gt;
&lt;p&gt;The solution is to convert angular velocity into a quaternion form, then to use this quaternion to integrate orientation. For lack of a better term I will call this time derivative of orientation &amp;ldquo;spin&amp;rdquo;. Exactly how to calculate this spin quaternion is described in detail &lt;a href=&#34;http://www-2.cs.cmu.edu/~baraff/sigcourse/notesd1.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the final result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    d*q*/dt = spin = 0.5 *w* *q*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;strong&gt;q&lt;/strong&gt; is the current orientation quaternion, and &lt;strong&gt;w&lt;/strong&gt; is the current angular velocity in quaternion form (0,x,y,z) such that x, y, z are the components of the angular velocity vector. Note that the multiplication done between &lt;strong&gt;w&lt;/strong&gt; and &lt;strong&gt;q&lt;/strong&gt; is quaternion multiplication.&lt;/p&gt;
&lt;p&gt;To implement this in code we add spin as a new secondary quantity calculated from angular velocity in the recalculate method. We also add spin to the derivatives struct as it is the derivative of orientation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct State
    {
        // primary
        Quaternion orientation;
        Vector angularMomentum;

        // secondary
        Quaternion spin;
        Vector angularVelocity;

        // constant
        float inertia;
        float inverseInertia;

        void recalculate()
        {
            angularVelocity = angularMomentum * 
                               inverseInertia;

            orientation.normalize();

            Quaternion q( 0, 
                          angularVelocity.x, 
                          angularVelocity.y, 
                          angularVelocity.z ) 

            spin = 0.5f * q * orientation;
        }
    };

    struct Derivatives
    {
        Quaternion spin;
        Vector torque;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Integrating a quaternion, just like integrating a vector, is as simple as doing the integration for each value separately. The only difference is that after integrating orientation we must renormalize the orientation quaternion to make it unit length, to ensure that it still represents a rotation.&lt;/p&gt;
&lt;p&gt;This is required because errors in integration accumulate over time and make the quaternion &amp;lsquo;drift&amp;rsquo; away from being unit length. I like to renormalize in the recalculate method for simplicity, but you can get away with doing it less frequently if cpu cycles are tight.&lt;/p&gt;
&lt;p&gt;Now in order to drive the rotation of the object, we need a method that can calculate the torque applied given the current rotational state and time just like the force method we use when integrating linear motion. eg:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Vector torque( const State &amp;amp; state, double t )
    {
        return Vector(1,0,0) - state.angularVelocity * 0.1f;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function returns an acceleration torque to induce a spin around the x axis, but also applies a damping over time so that at a certain speed the accelerating and damping will cancel each other out. This is done so that the rotation will reach a certain rate and stay constant instead of getting faster and faster over time.&lt;/p&gt;
&lt;h2 id=&#34;combining-linear-and-angular-motion&#34;&gt;Combining Linear and Angular Motion&lt;/h2&gt;
&lt;p&gt;Now that we are able to integrate linear and rotational effects, how can they be combined into one simulation? The answer is to just integrate the linear and rotational physics state separately and everything works out. This is because the objects we are simulating are rigid so we can decompose their motion into separate linear and rotational components. As far as integration is concerned, you can treat linear and angular effects as being completely independent of each other.&lt;/p&gt;
&lt;p&gt;Now that we have an object that is translating and rotating through three dimensional space, we need a way to keep track of where it is. We must now introduce the concepts of body coordinates and world coordinates.&lt;/p&gt;
&lt;p&gt;Think of body coordinates in terms of the object in a convenient layout, for example its center of mass would be at the origin (0,0,0) and it would be oriented in the simplest way possible. In the case of the simulation that accompanies this article, in body space the cube is oriented so that it lines up with the x, y and z axes and the center of the cube is at the origin.&lt;/p&gt;
&lt;p&gt;The important thing to understand is that the object remains stationary in body space, and is transformed into world space using a combination of translation and rotation operations which put it in the correct position and orientation for rendering. When you see the cube animating on screen it is because it is being drawn in world space using the body to world transformation.&lt;/p&gt;
&lt;p&gt;We have the raw materials to implement this transform from body coordinates into world coordinates in the position vector and the orientation quaternion. The trick to combining the two is to convert each of them into 4x4 matrix form which is capable of representing both rotation and translation. Then we combine the two transformations into a single matrix by multiplication. This combined matrix has the effect of first rotating the cube around the origin to get the correct orientation, then translating the cube to the correct position in world space. See &lt;a href=&#34;http://www.gamedev.net/reference/articles/article695.asp&#34;&gt;this article&lt;/a&gt; for details on how this is done.&lt;/p&gt;
&lt;p&gt;If we then invert this matrix we get one that has the opposite effect, it transforms points in world coordinates into the body coordinates of the object. Once we have both these matrices we have the ability to convert points from body to world coordinates and back again which is very handy. These two matrices become new secondary values calculated in the &amp;lsquo;recalculate&amp;rsquo; method from the orientation quaternion and position vector.&lt;/p&gt;
&lt;h2 id=&#34;forces-and-torques&#34;&gt;Forces and Torques&lt;/h2&gt;
&lt;p&gt;We can apply separate forces and torques to an object individually, but we know from real life that if we push an object it usually makes it both move and rotate. So how can we break down a force applied at a point on the object into a linear force which causes a change in momentum, and a torque which changes angular momentum?&lt;/p&gt;
&lt;p&gt;Given that our object is a rigid body, what actually happens here is that the entire force applied at the point is applied linearly, plus a torque is also generated based on the cross product of the force vector and the point on the object relative to the center of mass of the object:&lt;/p&gt;
&lt;pre&gt;
    &lt;b&gt;F&lt;/b&gt;&lt;sub&gt;linear&lt;/sub&gt; = &lt;b&gt;F&lt;/b&gt;
    &lt;b&gt;F&lt;/b&gt;&lt;sub&gt;torque&lt;/sub&gt; = &lt;b&gt;F&lt;/b&gt; x (&lt;b&gt;p&lt;/b&gt; - &lt;b&gt;x&lt;/b&gt;)
&lt;/pre&gt;
&lt;p&gt;Where &lt;b&gt;F&lt;/b&gt; is the force being applied at point &lt;b&gt;p&lt;/b&gt; in world coordinates, and &lt;b&gt;x&lt;/b&gt; is the center of mass of the object.&lt;/p&gt;
&lt;p&gt;This seems counterintuitive at first. Why is the force being applied twice? Once to linear and once to rotational motion?&lt;/p&gt;
&lt;p&gt;What is happening here is our everyday experience with objects clouding the true behavior of an object under ideal conditions.&lt;/p&gt;
&lt;p&gt;Remember your pushbike when you were a kid? You would have to change your tire and flip the bike upside down. You could spin the tire around by pushing on it. You don&amp;rsquo;t see any linear motion here, just rotation, so what is going on? The answer of course is that the axle of the wheel is counteracting the linear component of the force you applied, leaving only the rotational component. Not convinced? Imagine what would happen if you tried to ride your bike without an axle in your wheel&amp;hellip;&lt;/p&gt;
&lt;p&gt;Another example: consider a bowling ball lying on a slippery surface such as ice so that no significant friction is present. Now in your mind try to work out a way that you can apply a force at a single point on the surface of the bowling ball such that it will stay completely still while rotating on the spot. There is no way you can do this! Any point where you push would also make the bowling ball move linearly as well as rotate. To apply a pure rotation you&amp;rsquo;d have to push on both sides of the ball, canceling the linear component of your force out leaving only torque.&lt;/p&gt;
&lt;p&gt;So remember, whenever you apply a force to an object there will always be a linear force component which causes the object to accelerate linearly, as well as, depending on the direction of the force, a rotational component that causes the object to rotate.&lt;/p&gt;
&lt;h2 id=&#34;velocity-at-a-pointb&#34;&gt;Velocity at a Point&lt;/b&gt;&lt;/h2&gt;
&lt;p&gt;The final piece of the puzzle is how to calculate the velocity of a single point in the rigid body. To do this we start with the linear velocity of the object, because all points must move with this velocity to keep it rigid, then add the velocity at the point due to rotation.&lt;/p&gt;
&lt;p&gt;This velocity due to rotation will not be constant for every point in the body if it is rotating, as each point in the body must be spinning around the axis of rotation. Combining the linear and angular velocities, the total velocity of a point in the rigid body is:&lt;/p&gt;
&lt;pre&gt;
    &lt;b&gt;v&lt;/b&gt;&lt;sub&gt;point&lt;/sub&gt; = &lt;b&gt;v&lt;/b&gt;&lt;sub&gt;linear&lt;/sub&gt; + &lt;b&gt;v&lt;/b&gt;&lt;sub&gt;angular&lt;/sub&gt; cross (&lt;b&gt;p&lt;/b&gt; - &lt;b&gt;x&lt;/b&gt;)
&lt;/pre&gt;
&lt;p&gt;Where &lt;b&gt;p&lt;/b&gt; is the point on the rigid body and &lt;b&gt;x&lt;/b&gt; is the center of mass of the object.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have covered the techniques required to simulate linear and rotational movement of a rigid body in three dimensions. By combining the linear and rotational physics into a single physics state and integrating, we can simulate the motion of a rigid body in three dimensions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/spring_physics/&#34;&gt;Spring Physics&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Fix Your Timestep!</title>
      <link>https://gafferongames.com/post/fix_your_timestep/</link>
      <pubDate>Thu, 10 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/fix_your_timestep/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/game-physics/&#34;&gt;Game Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://gafferongames.com/post/integration_basics/&#34;&gt;previous article&lt;/a&gt; we discussed how to integrate the equations of motion using a numerical integrator. Integration sounds complicated, but it&amp;rsquo;s just a way to advance the your physics simulation forward by some small amount of time called &amp;ldquo;delta time&amp;rdquo; (or dt for short).&lt;/p&gt;
&lt;p&gt;But how to choose this delta time value? This may seem like a trivial subject but in fact there are many different ways to do it, each with their own strengths and weaknesses - so read on!&lt;/p&gt;
&lt;h2 id=&#34;fixed-delta-time&#34;&gt;Fixed delta time&lt;/h2&gt;
&lt;p&gt;The simplest way to step forward is with fixed delta time, like 1/60th of a second:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    double t = 0.0;
    double dt = 1.0 / 60.0;

    while ( !quit )
    {
        integrate( state, t, dt );
        render( state );
        t += dt;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In many ways this code is ideal. If you&amp;rsquo;re lucky enough to have your delta time match the display refresh rate, and you can ensure that your update loop takes less than one frame worth of real time, then you already have the perfect solution for updating your physics simulation and you can stop reading this article.&lt;/p&gt;
&lt;p&gt;But in the real world you may not know the display refresh rate ahead of time. VSYNC could be turned off, or you could be running on a slow computer which cannot update and render your frame fast enough to present it at 60fps.&lt;/p&gt;
&lt;p&gt;In these cases your simulation will run faster or slower than you intended.&lt;/p&gt;
&lt;h2 id=&#34;variable-delta-time&#34;&gt;Variable delta time&lt;/h2&gt;
&lt;p&gt;Fixing this &lt;em&gt;seems&lt;/em&gt; simple. Just measure how long the previous frame takes, then feed that value back in as the delta time for the next frame. This makes sense because of course, because if the computer is too slow to update at 60HZ and has to drop down to 30fps, you&amp;rsquo;ll automatically pass in 1/30 as delta time. Same thing for a display refresh rate of 75HZ instead of 60HZ or even the case where VSYNC is turned off on a fast computer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    double t = 0.0;

    double currentTime = hires_time_in_seconds();

    while ( !quit )
    {
        double newTime = hires_time_in_seconds();
        double frameTime = newTime - currentTime;
        currentTime = newTime;

        integrate( state, t, frameTime );
        t += frameTime;

        render( state );
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But there is a huge problem with this approach which I will now explain. The problem is that the behavior of your physics simulation depends on the delta time you pass in. The effect could be subtle as your game having a slightly different &amp;ldquo;feel&amp;rdquo; depending on framerate or it could be as extreme as your spring simulation exploding to infinity, fast moving objects tunneling through walls and players falling through the floor!&lt;/p&gt;
&lt;p&gt;One thing is for certain though and that is that it&amp;rsquo;s utterly unrealistic to expect your simulation to correctly handle &lt;em&gt;any&lt;/em&gt; delta time passed into it. To understand why, consider what would happen if you passed in 1/10th of a second as delta time? How about one second? 10 seconds? 100? Eventually you&amp;rsquo;ll find a breaking point.&lt;/p&gt;
&lt;h2 id=&#34;semi-fixed-timestep&#34;&gt;Semi-fixed timestep&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s much more realistic to say that your simulation is well behaved only if delta time is less than or equal to some maximum value. This is usually significantly easier in practice than attempting to make your simulation bulletproof at a wide range of delta time values.&lt;/p&gt;
&lt;p&gt;With this knowledge at hand, here&amp;rsquo;s a simple trick to ensure that you never pass in a delta time greater than the maximum value, while still running at the correct speed on different machines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    double t = 0.0;
    double dt = 1 / 60.0;

    double currentTime = hires_time_in_seconds();

    while ( !quit )
    {
        double newTime = hires_time_in_seconds();
        double frameTime = newTime - currentTime;
        currentTime = newTime;
              
        while ( frameTime &amp;gt; 0.0 )
        {
            float deltaTime = min( frameTime, dt );
            integrate( state, t, deltaTime );
            frameTime -= deltaTime;
            t += deltaTime;
        }

        render( state );
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The benefit of this approach is that we now have an upper bound on delta time. It&amp;rsquo;s never larger than this value because if it is we subdivide the timestep. The disadvantage is that we&amp;rsquo;re now taking multiple steps per-display update including one additional step to consume any the remainder of frame time not divisible by dt. This is no problem if you are render bound, but if your simulation is the most expensive part of your frame you could run into the so called &amp;ldquo;spiral of death&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;What is the spiral of death? It&amp;rsquo;s what happens when your physics simulation can&amp;rsquo;t keep up with the steps it&amp;rsquo;s asked to take. For example, if your simulation is told: &amp;ldquo;OK, please simulate X seconds worth of physics&amp;rdquo; and if it takes Y seconds of real time to do so where Y &amp;gt; X, then it doesn&amp;rsquo;t take Einstein to realize that over time your simulation falls behind. It&amp;rsquo;s called the spiral of death because being behind causes your update to simulate more steps to catch up, which causes you to fall further behind, which causes you to simulate more steps&amp;hellip;&lt;/p&gt;
&lt;p&gt;So how do we avoid this? In order to ensure a stable update I recommend leaving some headroom. You really need to ensure that it takes &lt;em&gt;significantly less&lt;/em&gt; than X seconds of real time to update X seconds worth of physics simulation. If you can do this then your physics engine can &amp;ldquo;catch up&amp;rdquo; from any temporary spike by simulating more frames. Alternatively you can clamp at a maximum # of steps  per-frame and the simulation will appear to slow down under heavy load. Arguably this is better than spiraling to death, especially if the heavy load is just a temporary spike.&lt;/p&gt;
&lt;h2 id=&#34;free-the-physics&#34;&gt;Free the physics&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s take it one step further. What if you want exact reproducibility from one run to the next given the same inputs? This comes in handy when trying to network your physics simulation using deterministic lockstep, but it&amp;rsquo;s also generally a nice thing to know that your simulation behaves exactly the same from one run to the next without any potential for different behavior depending on the render framerate.&lt;/p&gt;
&lt;p&gt;But you ask why is it necessary to have fully fixed delta time to do this? Surely the semi-fixed delta time with the small remainder step is &amp;ldquo;good enough&amp;rdquo;? And yes, you are right. It is &lt;em&gt;good enough&lt;/em&gt; in most cases but it is not &lt;em&gt;exactly the same&lt;/em&gt; due to to the limited precision of floating point arithmetic.&lt;/p&gt;
&lt;p&gt;What we want then is the best of both worlds: a fixed delta time value for the simulation plus the ability to render at different framerates. These two things seem completely at odds, and they are - unless we can find a way to decouple the simulation and rendering framerates.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how to do it. Advance the physics simulation ahead in fixed dt time steps while also making sure that it keeps up with the timer values coming from the renderer so that the simulation advances at the correct rate. For example, if the display framerate is 50fps and the simulation runs at 100fps then we need to take two physics steps every display update. Easy.&lt;/p&gt;
&lt;p&gt;What if the display framerate is 200fps? Well in this case it we need to take half a physics step each display update, but we can&amp;rsquo;t do that, we must advance with constant dt. So we take one physics step every two display updates.&lt;/p&gt;
&lt;p&gt;Even trickier, what if the display framerate is 60fps, but we want our simulation to run at 100fps? There is no easy multiple. What if VSYNC is disabled and the display frame rate fluctuates from frame to frame?&lt;/p&gt;
&lt;p&gt;If you head just exploded don&amp;rsquo;t worry, all that is needed to solve this is to change your point of view. Instead of thinking that you have a certain amount of frame time you must simulate before rendering, flip your viewpoint upside down and think of it like this: the renderer &lt;strong&gt;produces time&lt;/strong&gt; and the simulation &lt;strong&gt;consumes it&lt;/strong&gt; in discrete dt sized steps.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    double t = 0.0;
    const double dt = 0.01;

    double currentTime = hires_time_in_seconds();
    double accumulator = 0.0;

    while ( !quit )
    {
        double newTime = hires_time_in_seconds();
        double frameTime = newTime - currentTime;
        currentTime = newTime;

        accumulator += frameTime;

        while ( accumulator &amp;gt;= dt )
        {
            integrate( state, t, dt );
            accumulator -= dt;
            t += dt;
        }

        render( state );
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that unlike the semi-fixed timestep we only ever integrate with steps sized dt so it follows that in the common case we have some unsimulated time left over at the end of each frame. This left over time is passed on to the next frame via the accumulator variable and is not thrown away.&lt;/p&gt;
&lt;h2 id=&#34;the-final-touch&#34;&gt;The final touch&lt;/h2&gt;
&lt;p&gt;But what do to with this remaining time? It seems incorrect doesn&amp;rsquo;t it?&lt;/p&gt;
&lt;p&gt;To understand what is going on consider a situation where the display framerate is 60fps and the physics is running at 50fps. There is no nice multiple so the accumulator causes the simulation to alternate between mostly taking one and occasionally two physics steps per-frame when the remainders &amp;ldquo;accumulate&amp;rdquo; above dt.&lt;/p&gt;
&lt;p&gt;Now consider that the majority of render frames will have some small remainder of frame time left in the accumulator that cannot be simulated because it is less than dt. This means we&amp;rsquo;re displaying the state of the physics simulation at a time slightly different from the render time, causing a subtle but visually unpleasant stuttering of the physics simulation on the screen.&lt;/p&gt;
&lt;p&gt;One solution to this problem is to interpolate between the previous and current physics state based on how much time is left in the accumulator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    double t = 0.0;
    double dt = 0.01;

    double currentTime = hires_time_in_seconds();
    double accumulator = 0.0;

    State previous;
    State current;

    while ( !quit )
    {
        double newTime = time();
        double frameTime = newTime - currentTime;
        if ( frameTime &amp;gt; 0.25 )
            frameTime = 0.25;
        currentTime = newTime;

        accumulator += frameTime;

        while ( accumulator &amp;gt;= dt )
        {
            previousState = currentState;
            integrate( currentState, t, dt );
            t += dt;
            accumulator -= dt;
        }

        const double alpha = accumulator / dt;

        State state = currentState * alpha + 
            previousState * ( 1.0 - alpha );

        render( state );
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;looks&lt;/em&gt; complicated but here is a simple way to think about it. Any remainder in the accumulator is effectively a measure of just how much more time is required before another whole physics step can be taken. For example, a remainder of dt/2 means that we are currently halfway between the current physics step and the next. A remainder of dt*0.1 means that the update is 1/10th of the way between the current and the next state.&lt;/p&gt;
&lt;p&gt;We can use this remainder value to get a blending factor between the previous and current physics state simply by dividing by dt. This gives an alpha value in the range [0,1] which is used to perform a linear interpolation between the two physics states to get the current state to render. This interpolation is easy to do for single values and for vector state values. You can even use it with full 3D rigid body dynamics if you store your orientation as a quaternion and use a spherical linear interpolation (slerp) to blend between the previous and current orientations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/physics_in_3d/&#34;&gt;Physics in 3D&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Integration Basics</title>
      <link>https://gafferongames.com/post/integration_basics/</link>
      <pubDate>Tue, 01 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>https://gafferongames.com/post/integration_basics/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hi, I&amp;rsquo;m &lt;a href=&#34;https://gafferongames.com&#34;&gt;Glenn Fiedler&lt;/a&gt; and welcome to &lt;strong&gt;&lt;a href=&#34;https://gafferongames.com/categories/game-physics/&#34;&gt;Game Physics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you have ever wondered how the physics simulation in a computer game works then this series of articles will explain it for you. I assume you are proficient with C++ and have a basic grasp of physics and mathematics. Nothing else will be required if you pay attention and study the example source code.&lt;/p&gt;
&lt;p&gt;A physics simulation works by making many small predictions based on the laws of physics. These predictions are actually quite simple, and basically boil down to something like &amp;ldquo;the object is here, and is traveling this fast in that direction, so in a short amount of time it should be over there&amp;rdquo;. We perform these predictions using a mathematical technique called integration.&lt;/p&gt;
&lt;p&gt;Exactly how to implement this integration is the subject of this article.&lt;/p&gt;
&lt;h2 id=&#34;integrating-the-equations-of-motion&#34;&gt;Integrating the Equations of Motion&lt;/h2&gt;
&lt;p&gt;You may remember from high school or university physics that force equals mass times acceleration.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    F = ma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can switch this around to see that acceleration is force divided by mass. This makes intuitive sense because heavier objects are harder to throw.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    a = F/m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acceleration is the rate of change in velocity over time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    dv/dt = a = F/m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, velocity is the rate of change in position over time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    dx/dt = v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means if we know the current position and velocity of an object, and the forces that will be applied to it, we can integrate to find its position and velocity at some point in the future.&lt;/p&gt;
&lt;h2 id=&#34;numerical-integration&#34;&gt;Numerical Integration&lt;/h2&gt;
&lt;p&gt;For those who have not formally studied differential equations at university, take heart for you are in almost as good a position as those who have. This is because we&amp;rsquo;re not going to analytically solve the differential equations as you would do in first year mathematics. Instead, we are going to &lt;strong&gt;numerically integrate&lt;/strong&gt; to find the solution.&lt;/p&gt;
&lt;p&gt;Here is how numerical integration works. First, start at an initial position and velocity, then take a small step forward to find the velocity and position at a future time. Then repeat this, moving forward in small time steps, using the result of the previous calculation as the starting point for the next.&lt;/p&gt;
&lt;p&gt;But how do we find the change in velocity and position at each step?&lt;/p&gt;
&lt;p&gt;The answer lies in the &lt;strong&gt;equations of motion&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s call our current time &lt;strong&gt;t&lt;/strong&gt;, and the time step &lt;strong&gt;dt&lt;/strong&gt; or &amp;lsquo;delta time&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;We can now put the equations of motion in a form that anyone can understand:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    acceleration = force / mass
    change in position = velocity * dt
    change in velocity = acceleration * dt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes intuitive sense because if you&amp;rsquo;re in a car traveling 60 kilometers per-hour, in one hour you&amp;rsquo;ll be 60 kilometers further down the road. Similarly, a car accelerating 10 kilometers per-hour-per-second will be moving 100 kilometers per-hour faster after 10 seconds.&lt;/p&gt;
&lt;p&gt;Of course this logic only holds when acceleration and velocity are constant. But even when they&amp;rsquo;re not, it&amp;rsquo;s still a pretty decent approximation to start with.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put this into code. Starting with a stationary object at the origin weighing one kilogram, we apply a constant force of 10 newtons and step forward with time steps of one second:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    double t = 0.0;
    float dt = 1.0f;

    float velocity = 0.0f;
    float position = 0.0f;
    float force = 10.0f;
    float mass = 1.0f;

    while ( t &amp;lt;= 10.0 )
    {
        position = position + velocity * dt;
        velocity = velocity + ( force / mass ) * dt;
        t += dt;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    t=0:    position = 0      velocity = 0
    t=1:    position = 0      velocity = 10
    t=2:    position = 10     velocity = 20
    t=3:    position = 30     velocity = 30
    t=4:    position = 60     velocity = 40
    t=5:    position = 100    velocity = 50
    t=6:    position = 150    velocity = 60
    t=7:    position = 210    velocity = 70
    t=8:    position = 280    velocity = 80
    t=9:    position = 360    velocity = 90
    t=10:   position = 450    velocity = 100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, at at each step we know both the position and velocity of the object. This is numerical integration.&lt;/p&gt;
&lt;h2 id=&#34;explicit-euler&#34;&gt;Explicit Euler&lt;/h2&gt;
&lt;p&gt;What we just did is a type of integration called &lt;strong&gt;explicit euler&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To save you future embarrassment, I must point out now that Euler is pronounced &amp;ldquo;Oiler&amp;rdquo; not &amp;ldquo;yew-ler&amp;rdquo; as it is the last name of the Swiss mathematician &lt;a href=&#34;https://en.wikipedia.org/wiki/Leonhard_Euler&#34;&gt;Leonhard Euler&lt;/a&gt; who first discovered this technique.&lt;/p&gt;
&lt;p&gt;Euler integration is the most basic numerical integration technique. It is only 100% accurate when the rate of change is constant over the timestep.&lt;/p&gt;
&lt;p&gt;Since acceleration is constant in the example above, the integration of velocity is without error. However, we are also integrating velocity to get position, and velocity is increasing due to acceleration. This means there is error in the integrated position.&lt;/p&gt;
&lt;p&gt;Just how large is this error? Let&amp;rsquo;s find out!&lt;/p&gt;
&lt;p&gt;There is a closed form solution for how an object moves under constant acceleration. We can use this to compare our numerically integrated position with the exact result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    s = ut + 0.5at^2
    s = 0.0*t + 0.5at^2
    s = 0.5(10)(10^2)
    s = 0.5(10)(100)
    s = 500 meters
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After 10 seconds, the object should have moved 500 meters, but explicit euler gives a result of 450 meters. That&amp;rsquo;s 50 meters off after just 10 seconds!&lt;/p&gt;
&lt;p&gt;This sounds really, really bad, but it&amp;rsquo;s not common for games to step physics forward with such large time steps. In fact, physics usually steps forward at something closer to the display framerate.&lt;/p&gt;
&lt;p&gt;Stepping forward with &lt;strong&gt;dt&lt;/strong&gt; = 1/100 yields a much better result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    t=9.90:     position = 489.552155     velocity = 98.999062
    t=9.91:     position = 490.542145     velocity = 99.099060
    t=9.92:     position = 491.533142     velocity = 99.199059
    t=9.93:     position = 492.525146     velocity = 99.299057
    t=9.94:     position = 493.518127     velocity = 99.399055
    t=9.95:     position = 494.512115     velocity = 99.499054
    t=9.96:     position = 495.507111     velocity = 99.599052
    t=9.97:     position = 496.503113     velocity = 99.699051
    t=9.98:     position = 497.500092     velocity = 99.799049
    t=9.99:     position = 498.498077     velocity = 99.899048
    t=10.00:    position = 499.497070     velocity = 99.999046
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, this is a pretty good result. Certainly good enough for a game.&lt;/p&gt;
&lt;h2 id=&#34;why-explicit-euler-is-not-always-so-great&#34;&gt;Why explicit euler is not (always) so great&lt;/h2&gt;
&lt;p&gt;With a small enough timestep explicit euler gives decent results for constant acceleration, but what about the case where acceleration isn&amp;rsquo;t constant?&lt;/p&gt;
&lt;p&gt;A good example of non-constant acceleration is a &lt;a href=&#34;https://ccrma.stanford.edu/CCRMA/Courses/152/vibrating_systems.html&#34;&gt;spring damper system&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this system a mass is attached to a spring and its motion is damped by some kind of friction. There is a force proportional to the distance of the object that pulls it towards the origin, and a force proportional to the velocity of the object, but in the opposite direction, which slows it down.&lt;/p&gt;
&lt;p&gt;Now the acceleration is definitely not constant throughout the timestep, but is a continously changing function that is a combination of the position and velocity, which are themselves changing continuously over the timestep.&lt;/p&gt;
&lt;p&gt;This is an example of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&#34;&gt;damped harmonic oscillator&lt;/a&gt;. It&amp;rsquo;s a well studied problem and there&amp;rsquo;s a closed form solution that we can use to check our numerically integrated result.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with an underdamped system where the mass oscillates about the origin while slowing down.&lt;/p&gt;
&lt;p&gt;Here are the input parameters to the mass spring system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mass: 1 kilogram&lt;/li&gt;
&lt;li&gt;Initial position: 1000 meters from origin&lt;/li&gt;
&lt;li&gt;Hooke&amp;rsquo;s law spring coefficient: k = 15&lt;/li&gt;
&lt;li&gt;Hooke&amp;rsquo;s law damping coefficient: b = 0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here is a graph of the exact solution:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_damped_exact_solution.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;When we apply explicit euler to integrate this system, we get the following result, which has been scaled down vertically to fit:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_damped_explicit_euler.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Instead of damping and converging on the origin, it gains energy over time!&lt;/p&gt;
&lt;p&gt;This system is unstable when integrated with explicit euler and &lt;strong&gt;dt&lt;/strong&gt;=1/100.&lt;/p&gt;
&lt;p&gt;Unfortunately, since we&amp;rsquo;re already integrating with a small timestep, we don&amp;rsquo;t have a lot of practical options to improve the accuracy. Even if you reduce the timestep, there&amp;rsquo;s always a spring tightness k above which you&amp;rsquo;ll see this behavior.&lt;/p&gt;
&lt;h2 id=&#34;semi-implicit-euler&#34;&gt;Semi-implicit Euler&lt;/h2&gt;
&lt;p&gt;Another integrator to consider is &lt;a href=&#34;https://en.wikipedia.org/wiki/Semi-implicit_Euler_method&#34;&gt;semi-implicit euler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most commercial game physics engines use this integrator.&lt;/p&gt;
&lt;p&gt;Switching from explicit to semi-implicit euler is as simple as changing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    position += velocity * dt;
    velocity += acceleration * dt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    velocity += acceleration * dt;
    position += velocity * dt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Applying the semi-implicit euler integrator with &lt;strong&gt;dt&lt;/strong&gt; = 1/100 to the spring damper system gives a stable result that is very close to the exact solution:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_damped_semi_implicit_euler.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Even though semi-implicit euler has the same order of accuracy as explicit euler (order 1), we get a much better result when integrating the equations of motion because it is &lt;a href=&#34;https://en.wikipedia.org/wiki/Symplectic_integrator&#34;&gt;symplectic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;many-different-integration-methods-exist&#34;&gt;Many different integration methods exist&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://web.mit.edu/10.001/Web/Course_Notes/Differential_Equations_Notes/node3.html&#34;&gt;Implicit euler&lt;/a&gt; is an integration technique that is well suited for simulating stiff equations that become unstable with other methods. The drawback is that it requires solving a system of equations per-timestep.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Verlet_integration&#34;&gt;Verlet integration&lt;/a&gt; provides greater accuracy than implicit euler and less memory usage when simulating a large number of particles is. This is a second order integrator which is also symplectic.&lt;/p&gt;
&lt;p&gt;There are a whole family of integrators called the &lt;strong&gt;Runge-Kutta methods&lt;/strong&gt;. Explicit euler is part of this family, but it also includes higher order integrators, the most classic of these being the Runge Kutta order 4 or simply &lt;strong&gt;RK4&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This Runge Kutta family of integrators is named for the German physicists who discovered them: &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_David_Tolm%C3%A9_Runge&#34;&gt;Carl Runge&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Martin_Wilhelm_Kutta&#34;&gt;Martin Kutta&lt;/a&gt;. This means the &amp;lsquo;g&amp;rsquo; is hard and the &amp;lsquo;u&amp;rsquo; is a short &amp;lsquo;oo&amp;rsquo; sound. I am sorry to inform but this means we are talking about the &lt;em&gt;&amp;lsquo;roon-geh koo-ta&amp;rsquo;&lt;/em&gt; methods and not a &lt;em&gt;&amp;lsquo;runge cutter&amp;rsquo;&lt;/em&gt;, whatever that is :)&lt;/p&gt;
&lt;p&gt;The RK4 is a fourth order integrator, which means its accumulated error is on the order of the fourth derivative. This makes it very accurate. Much more accurate than explicit and implicit euler which are only first order.&lt;/p&gt;
&lt;p&gt;But although it&amp;rsquo;s more accurate, that&amp;rsquo;s not to say RK4 is automatically &amp;ldquo;the best&amp;rdquo; integrator, or that it is better than semi-implicit euler. It&amp;rsquo;s much more complicated than this.&lt;/p&gt;
&lt;p&gt;Regardless, it&amp;rsquo;s an interesting integrator and is well worth studying.&lt;/p&gt;
&lt;h2 id=&#34;implementing-rk4&#34;&gt;Implementing RK4&lt;/h2&gt;
&lt;p&gt;There are many great explanations of the mathematics behind RK4 already. For example: &lt;a href=&#34;https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://web.mit.edu/10.001/Web/Course_Notes/Differential_Equations_Notes/node5.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://www.researchgate.net/publication/49587610_A_Simplified_Derivation_and_Analysis_of_Fourth_Order_Runge_Kutta_Method&#34;&gt;here&lt;/a&gt;. I highly encourage you to follow the derivation and understand how and why it works at a mathematical level. But, seeing as the target audience for this article are programmers, not mathematicians, we&amp;rsquo;re all about implementation, so let&amp;rsquo;s get started.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s define the state of an object as a struct in C++ so we have both position and velocity stored conveniently in one place:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct State
    {
        float x;      // position
        float v;      // velocity
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need a struct to store the derivatives of the state values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    struct Derivative
    {
        float dx;      // dx/dt = velocity
        float dv;      // dv/dt = acceleration
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need a function to advance the physics state ahead from t to t+dt using one set of derivatives, and once there, recalculate the derivatives at this new state:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Derivative evaluate( const State &amp;amp; initial, 
                         double t, 
                         float dt, 
                         const Derivative &amp;amp; d )
    {
        State state;
        state.x = initial.x + d.dx*dt;
        state.v = initial.v + d.dv*dt;

        Derivative output;
        output.dx = state.v;
        output.dv = acceleration( state, t+dt );
        return output;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The acceleration function is what drives the entire simulation. Let&amp;rsquo;s set it to the spring damper system and return the acceleration assuming unit mass:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    float acceleration( const State &amp;amp; state, double t )
    {
        const float k = 15.0f;
        const float b = 0.1f;
        return -k * state.x - b * state.v;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we get to the RK4 integration routine itself:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    void integrate( State &amp;amp; state, 
                    double t, 
                    float dt )
    {
        Derivative a,b,c,d;

        a = evaluate( state, t, 0.0f, Derivative() );
        b = evaluate( state, t, dt*0.5f, a );
        c = evaluate( state, t, dt*0.5f, b );
        d = evaluate( state, t, dt, c );

        float dxdt = 1.0f / 6.0f * 
            ( a.dx + 2.0f * ( b.dx + c.dx ) + d.dx );
        
        float dvdt = 1.0f / 6.0f * 
            ( a.dv + 2.0f * ( b.dv + c.dv ) + d.dv );

        state.x = state.x + dxdt * dt;
        state.v = state.v + dvdt * dt;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The RK4 integrator samples the derivative at four points to detect curvative. Notice how derivative a is used when calculating b, b is used when calculating c, and c into d. This feedback of the current derivative into the calculation of the next is what gives the RK4 integrator its accuracy.&lt;/p&gt;
&lt;p&gt;Importantly, each of these derivatives a,b,c and d will be &lt;em&gt;different&lt;/em&gt; when the rate of change in these quantities is a function of time or a function of the state itself. For example, in our spring damper system acceleration is a function of the current position and velocity which change throughout the timestep.&lt;/p&gt;
&lt;p&gt;Once the four derivatives have been evaluated, the best overall derivative is calculated as a weighted sum derived from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Taylor_series&#34;&gt;taylor series&lt;/a&gt; expansion. This combined derivative is used to advance the position and velocity forward, just as we did with the explicit euler integrator.&lt;/p&gt;
&lt;h2 id=&#34;semi-implicit-euler-vs-rk4&#34;&gt;Semi-implicit euler vs. RK4&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s put the RK4 integrator to the test.&lt;/p&gt;
&lt;p&gt;Since it is a higher order integrator (4th order vs. 1st order) it will be visibly more accurate than semi-implicit euler, right?&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_damped_rk4_vs_semi_implicit_euler.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;&lt;strong&gt;Wrong&lt;/strong&gt;. Both integrators are so close to the exact result that it&amp;rsquo;s impossible to make out any difference at this scale. Both integrators are stable and track the exact solution very well with &lt;strong&gt;dt&lt;/strong&gt;=1/100.&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_damped_rk4_vs_semi_implicit_euler_zoomed_in.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;Zooming in confirms that RK4 &lt;em&gt;is&lt;/em&gt; more accurate than semi-implicit euler, but is it really worth the complexity and extra runtime cost of RK4? It&amp;rsquo;s hard to say.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s push a bit harder and see if we can find a significant difference between the two integrators. Unfortunately, we can&amp;rsquo;t look at this system for long periods of time because it quickly damps down to zero, so let&amp;rsquo;s switch to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Harmonic_oscillator#Simple_harmonic_oscillator&#34;&gt;simple harmonic oscillator&lt;/a&gt; which oscillates forever without any damping.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the exact result we&amp;rsquo;re aiming for:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_undamped_exact_solution.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;To make it harder on the integrators, let&amp;rsquo;s increase delta time to 0.1 seconds.&lt;/p&gt;
&lt;p&gt;Next, we let the integrators run for 90 seconds and zoom in:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_undamped_rk4_vs_semi_implicit_euler.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;After 90 seconds the semi-implicit euler solution (orange) has drifted out of phase with the exact solution because it has a slightly different frequency, while the green line of RK4 matches the frequency, but is losing energy!&lt;/p&gt;
&lt;p&gt;We can see this more clearly by increasing the time step to 0.25 seconds.&lt;/p&gt;
&lt;p&gt;RK4 maintains the correct frequency but loses energy:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_undamped_rk4_5fps.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;While semi-implicit euler does a better job at conserving energy, on average:&lt;/p&gt;
&lt;img src=&#34;https://gafferongames.com/img/game-physics/integration_basics_undamped_semi_implicit_euler_5fps.png&#34; width=&#34;100%&#34;/&gt;
&lt;p&gt;But drifts out of phase. What an interesting result! As you can see it&amp;rsquo;s not simply the case that RK4 has a higher order of accuracy and is &amp;ldquo;better&amp;rdquo;. It&amp;rsquo;s much, much more nuanced than this.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Which integrator should you use in your game?&lt;/p&gt;
&lt;p&gt;My recommendation is &lt;strong&gt;semi-implicit euler&lt;/strong&gt;. It&amp;rsquo;s cheap and easy to implement, it&amp;rsquo;s much more stable than explicit euler, and it tends to preserve energy on average even when pushed near its limit.&lt;/p&gt;
&lt;p&gt;If you really do need more accuracy than semi-implicit euler, I recommend you look into higher order &lt;a href=&#34;https://en.wikipedia.org/wiki/Symplectic_integrator&#34;&gt;symplectic integrators&lt;/a&gt; designed for &lt;a href=&#34;https://en.wikipedia.org/wiki/Hamiltonian_system&#34;&gt;hamiltonian systems&lt;/a&gt;. This way you&amp;rsquo;ll discover more modern higher order integration techniques that are better suited to your simulation than RK4.&lt;/p&gt;
&lt;p&gt;And finally, if you are still doing this in your game:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    position += velocity * dt;
    velocity += acceleration * dt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please take a moment to change it to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    velocity += acceleration * dt;
    position += velocity * dt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll be glad you did :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEXT ARTICLE:&lt;/strong&gt; &lt;a href=&#34;https://gafferongames.com/post/fix_your_timestep/&#34;&gt;Fix Your Timestep!&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;_im-no-longer-posting-new-content-on-gafferongamescomhttpsgafferongamescom-please-check-out-my-new-blog-at-mas-bandwidthcomhttpsmas-bandwidthcomxdp-for-game-programmers_-1&#34;&gt;&lt;em&gt;I&amp;rsquo;m no longer posting new content on &lt;a href=&#34;https://gafferongames.com&#34;&gt;gafferongames.com&lt;/a&gt;. Please check out my new blog at &lt;a href=&#34;https://mas-bandwidth.com/xdp-for-game-programmers&#34;&gt;mas-bandwidth.com&lt;/a&gt;!&lt;/em&gt;&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
  </channel>
</rss>
